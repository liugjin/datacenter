// Generated by IcedCoffeeScript 108.0.11

/*
* File: scrum-controller
* User: Dow
* Date: 2/27/2015
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation.web', '../../services/datacenter/service-manager', 'underscore'], function(web, sm, _) {
  var PortalController, exports;
  PortalController = (function(_super) {
    __extends(PortalController, _super);

    function PortalController() {
      PortalController.__super__.constructor.call(this, sm);
      this.datacenterService = sm.getService('datacenter');
    }

    PortalController.prototype.onRpc = function(method, options, callback) {
      var file, _ref, _ref1;
      if (method !== "upload" && method !== "uploadElement" && method !== "configurationRecovery" && method !== "upgrade") {
        return this.datacenterService.rpc(method, options, callback);
      } else {
        if (_.isArray(this.req.files)) {
          file = (_ref = this.req.files) != null ? _ref[0] : void 0;
          file.options = options.parameters;
          return this.datacenterService.rpc(method, file, callback);
        } else if (_.isObject(this.req.files)) {
          file = (_ref1 = this.req.files) != null ? _ref1.file : void 0;
          file.options = options.parameters;
          return this.datacenterService.rpc(method, file, callback);
        }
      }
    };

    return PortalController;

  })(web.PortalController);
  return exports = {
    PortalController: PortalController
  };
});
