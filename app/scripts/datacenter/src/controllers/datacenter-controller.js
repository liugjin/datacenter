// Generated by IcedCoffeeScript 108.0.13

/*
* File: datacenter-controller
* User: Dow
* Date: 3/25/2017
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation.angular/controllers/project-base-controller'], function(base) {
  var DatacenterController, exports;
  DatacenterController = (function(_super) {
    __extends(DatacenterController, _super);

    function DatacenterController($scope, $rootScope, $routeParams, $location, $window, $timeout, modelManager, modelEngine, uploadService, datacenterService, options) {
      this.datacenterService = datacenterService;
      DatacenterController.__super__.constructor.call(this, $scope, $rootScope, $routeParams, $location, $window, $timeout, modelManager, modelEngine, uploadService, options);
    }

    DatacenterController.prototype.onLoad = function(callback, refresh) {
      return this.load(callback, refresh);
    };

    DatacenterController.prototype.load = function(callback, refresh) {
      this.myproject = this.modelEngine.storage.get('myproject');
      return this.loadProjects(callback, refresh);
    };

    DatacenterController.prototype.loadProjects = function(callback, refresh) {
      var fields, filter, _ref;
      filter = {
        user: (_ref = this.$rootScope.user) != null ? _ref.user : void 0,
        keywords: this.setting.keyword
      };
      fields = '_id user project name image updatetime stars keywords desc';
      return this.query(filter, fields, (function(_this) {
        return function(err, model) {
          var p, _i, _len;
          if ((model != null ? model.length : void 0) === 1) {
            _this.goto("dispatch/" + model[0].user + "/" + model[0].project);
          } else if ((model != null ? model.length : void 0) > 1) {
            for (_i = 0, _len = model.length; _i < _len; _i++) {
              p = model[_i];
              p.stared = _this.isStared(p);
              if (!_this.myproject && p.stared) {
                _this.myproject = p;
              }
            }
          }
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    return DatacenterController;

  })(base.ProjectBaseController);
  return exports = {
    DatacenterController: DatacenterController
  };
});
