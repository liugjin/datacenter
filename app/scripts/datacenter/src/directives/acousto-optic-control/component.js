// Generated by IcedCoffeeScript 108.0.13

/*
* File: acousto-optic-control-directive
* User: David
* Date: 2019/06/14
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var AcoustoOpticControlDirective, exports;
  AcoustoOpticControlDirective = (function(_super) {
    __extends(AcoustoOpticControlDirective, _super);

    function AcoustoOpticControlDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "acousto-optic-control";
      AcoustoOpticControlDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    AcoustoOpticControlDirective.prototype.setScope = function() {};

    AcoustoOpticControlDirective.prototype.setCSS = function() {
      return css;
    };

    AcoustoOpticControlDirective.prototype.setTemplate = function() {
      return view;
    };

    AcoustoOpticControlDirective.prototype.show = function(scope, element, attrs) {
      scope.image = this.getComponentPath("images/alarm-off.png");
      scope.equip = null;
      this.getStationAcoustoOpticDevices(scope, scope.station, (function(_this) {
        return function(equip) {
          var _ref;
          if (scope.equip) {
            return;
          }
          scope.equip = equip;
          if ((_ref = scope.subscription) != null) {
            _ref.dispose();
          }
          return scope.subscription = _this.commonService.subscribeEquipmentSignalValues(equip);
        };
      })(this));
      return scope.offAlarm = (function(_this) {
        return function() {
          return scope.equip.loadCommands(null, function(err, cmds) {
            var cmd, value;
            cmd = _.find(cmds, function(cd) {
              return cd.model.command === "alarm-status";
            });
            if (cmd) {
              value = _.find(cmd.model.parameters, function(ps) {
                return ps.key === "value";
              });
              value.value = "0";
              return _this.executeCommand(scope, cmd);
            }
          });
        };
      })(this);
    };

    AcoustoOpticControlDirective.prototype.getStationAcoustoOpticDevices = function(scope, station, callback) {
      var _ref;
      return station.loadEquipments({
        type: "environmental",
        template: (_ref = scope.parameters.template) != null ? _ref : "acousto_optic_template"
      }, null, (function(_this) {
        return function(err, equips) {
          var equip, sta, _i, _len, _ref1, _results;
          if (equips.length > 0) {
            equip = _.max(equips, function(eq) {
              return eq.model.index;
            });
            return typeof callback === "function" ? callback(equip) : void 0;
          } else {
            _ref1 = station.stations;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              _results.push(_this.getStationAcoustoOpticDevices(scope, sta, callback));
            }
            return _results;
          }
        };
      })(this));
    };

    AcoustoOpticControlDirective.prototype.resize = function(scope) {};

    AcoustoOpticControlDirective.prototype.dispose = function(scope) {};

    return AcoustoOpticControlDirective;

  })(base.BaseDirective);
  return exports = {
    AcoustoOpticControlDirective: AcoustoOpticControlDirective
  };
});
