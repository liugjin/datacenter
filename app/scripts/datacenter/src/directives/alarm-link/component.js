// Generated by IcedCoffeeScript 108.0.12

/*
* File: alarm-link-directive
* User: David
* Date: 2018/11/06
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'lodash', "moment"], function(base, css, view, _, moment) {
  var AlarmLinkDirective, exports;
  AlarmLinkDirective = (function(_super) {
    __extends(AlarmLinkDirective, _super);

    function AlarmLinkDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      AlarmLinkDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.id = "alarm-link";
    }

    AlarmLinkDirective.prototype.setScope = function() {};

    AlarmLinkDirective.prototype.setCSS = function() {
      return css;
    };

    AlarmLinkDirective.prototype.setTemplate = function() {
      return view;
    };

    AlarmLinkDirective.prototype.show = function(scope, element, attrs) {
      var equipmentsList, getEquipments, hideAutocompleteInput, initSelect, notification, queryRules, setCmdModelParameters, updateAutoComplete, updateLinkActions;
      element.css("display", "block");
      M.Autocomplete.init(element.find('.autocomplete'), {
        minLength: 0,
        data: {
          "等待初始化": null
        }
      });
      equipmentsList = {};
      scope.re = {};
      scope.rules = [];
      scope.equipments = [];
      scope.triggerStates = scope.project.dictionary.eventphases.items;
      getEquipments = function(callback) {
        var index, station, _i, _len, _ref, _results;
        index = 0;
        _ref = scope.project.stations.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          station = _ref[_i];
          _results.push(station.loadEquipments(null, null, function(err, equips) {
            scope.equipments = scope.equipments.concat(equips);
            index++;
            if (index === scope.project.stations.items.length) {
              return typeof callback === "function" ? callback() : void 0;
            }
          }));
        }
        return _results;
      };
      notification = scope.controller.modelEngine.modelManager.getService("notificationrules");
      queryRules = function() {
        scope.rules = [];
        return notification.query({
          user: scope.project.model.user,
          project: scope.project.model.project
        }, null, function(err, rules) {
          return _.map(rules, function(rule) {
            var linkAction, linkDevice, linkEquip, triggerAlarm, triggerDevice, triggerEquip, triggerState;
            if (rule.notification.substr(0, 4) === "link") {
              triggerDevice = scope.project.model.user + "_" + scope.project.model.project + "_" + rule.events[0].split("/")[0] + "_" + rule.events[0].split("/")[1];
              triggerEquip = scope.project.equipments[triggerDevice];
              if (!triggerEquip) {
                return false;
              }
              triggerEquip.loadEvents();
              triggerAlarm = rule.events[0].split("/")[2];
              triggerState = rule.rule.allEventPhases ? "all" : rule.rule.eventPhases[0];
              linkDevice = scope.project.model.user + "_" + scope.project.model.project + "_" + rule.title.split("/")[0] + "_" + rule.title.split("/")[1];
              linkEquip = scope.project.equipments[linkDevice];
              if (linkEquip != null) {
                linkEquip.loadCommands();
              }
              linkAction = scope.project.model.user + "." + scope.project.model.project + "." + rule.title.replace(/[/]/g, ".");
              return scope.rules.push({
                triggerDevice: triggerDevice,
                triggerEquip: triggerEquip,
                triggerAlarm: triggerAlarm,
                triggerState: triggerState,
                linkDevice: linkDevice,
                linkEquip: linkEquip,
                linkAction: linkAction,
                content: rule.content,
                notification: rule.notification
              });
            }
          });
        }, true);
      };
      getEquipments((function(_this) {
        return function() {
          return queryRules();
        };
      })(this));
      hideAutocompleteInput = (function(_this) {
        return function() {
          element.find('.autocomplete').attr('autocomplete', 'off');
          return setTimeout(function() {
            return element.find('.autocomplete').attr('autocomplete', 'off');
          }, 200);
        };
      })(this);
      scope.listSourceEquipments = function() {
        scope.re.sourceEquipmentName = '';
        hideAutocompleteInput();
        return setTimeout((function(_this) {
          return function() {
            return M.Autocomplete.getInstance(element.find('#source-equipment')).open();
          };
        })(this), 100);
      };
      scope.listLinkEquipments = function() {
        scope.re.linkEquipmentName = '';
        hideAutocompleteInput();
        return setTimeout((function(_this) {
          return function() {
            return M.Autocomplete.getInstance(element.find('#link-equipment')).open();
          };
        })(this), 100);
      };
      initSelect = (function(_this) {
        return function() {
          return setTimeout(function() {
            $('select').formSelect();
            return scope.$applyAsync();
          }, 100);
        };
      })(this);
      scope.changeSourceEquipments = function() {
        var _ref;
        return scope.re.triggerDevice2 = (_ref = equipmentsList[scope.re.sourceEquipmentName]) != null ? _ref.key : void 0;
      };
      scope.changeLinkEquipments = function() {
        var _ref;
        scope.re.linkDevice2 = (_ref = equipmentsList[scope.re.linkEquipmentName]) != null ? _ref.key : void 0;
        scope.re.linkAction2 = null;
        return scope.re.cmdModelParameters = [];
      };
      scope.$watch("re.triggerDevice2", function(eq) {
        var equip;
        scope.triggerAlarms = [];
        if (!eq) {
          return;
        }
        equip = _.find(scope.equipments, function(e) {
          return e.key === eq;
        });
        return equip != null ? equip.loadEvents("event name", function(err, events) {
          scope.triggerAlarms = events;
          return initSelect();
        }) : void 0;
      });
      updateLinkActions = function(equipKey) {
        var equip;
        equip = _.find(scope.equipments, function(e) {
          return e.key === equipKey;
        });
        return equip != null ? equip.loadCommands(null, function(err, commands) {
          return scope.linkActions = commands;
        }) : void 0;
      };
      setCmdModelParameters = (function(_this) {
        return function() {
          var arr, cmd, i, key, p, value, _i, _j, _len, _len1, _ref, _ref1, _results;
          cmd = _.find(scope.linkActions, function(e) {
            return e.key === scope.re.linkAction2;
          });
          scope.re.cmdModelParameters = _.cloneDeep(cmd.model.parameters);
          _ref = scope.re.cmdModelParameters;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            p.value = '';
          }
          arr = (_ref1 = scope.re.content) != null ? _ref1.split(',') : void 0;
          if (arr) {
            _results = [];
            for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
              i = arr[_j];
              key = i.split(':')[0];
              value = i.split(':')[1];
              if (key && value.length > 0) {
                _results.push((function() {
                  var _k, _len2, _ref2, _results1;
                  _ref2 = scope.re.cmdModelParameters;
                  _results1 = [];
                  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    p = _ref2[_k];
                    if (p.key === key) {
                      switch (p.type) {
                        case 'int':
                          p.value = parseInt(value);
                          break;
                        case 'float':
                          p.value = parseFloat(value);
                          break;
                        case 'bool':
                          _results1.push(p.value = Boolean(value));
                          break;
                        default:
                          p.value = value;
                          break;
                      }
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                })());
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this);
      scope.$watch("re.linkDevice2", function(eq) {
        if (!eq) {
          return;
        }
        return updateLinkActions(eq);
      });
      scope.$watch("re.linkAction2", function(ac) {
        if (!ac) {
          return;
        }
        setCmdModelParameters();
        return initSelect();
      });
      scope.select = function(rule) {
        return scope.re = rule;
      };
      updateAutoComplete = (function(_this) {
        return function() {
          var equip, equipmentsList2, _i, _len, _ref;
          hideAutocompleteInput();
          equipmentsList2 = {};
          _ref = scope.equipments;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            equip = _ref[_i];
            equipmentsList[equip.station.model.name + '-' + equip.model.name] = equip;
            equipmentsList2[equip.station.model.name + '-' + equip.model.name] = null;
          }
          M.Autocomplete.getInstance(element.find('#source-equipment')).updateData(equipmentsList2);
          return M.Autocomplete.getInstance(element.find('#link-equipment')).updateData(equipmentsList2);
        };
      })(this);
      scope.add = (function(_this) {
        return function() {
          scope.re = {};
          scope.linkActions = [];
          scope.triggerAlarms = [];
          updateAutoComplete();
          return initSelect();
        };
      })(this);
      scope.modify = (function(_this) {
        return function() {
          var equip, _i, _len, _ref;
          updateAutoComplete();
          _ref = scope.equipments;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            equip = _ref[_i];
            if (equip.key === scope.re.triggerDevice) {
              scope.re.sourceEquipmentName = equip.station.model.name + '-' + equip.model.name;
            }
            if (equip.key === scope.re.linkDevice) {
              scope.re.linkEquipmentName = equip.station.model.name + '-' + equip.model.name;
            }
          }
          scope.re.triggerDevice2 = _.cloneDeep(scope.re.triggerDevice);
          scope.re.linkDevice2 = _.cloneDeep(scope.re.linkDevice);
          scope.re.triggerAlarm2 = _.cloneDeep(scope.re.triggerAlarm);
          scope.re.triggerState2 = _.cloneDeep(scope.re.triggerState);
          scope.re.linkAction2 = _.cloneDeep(scope.re.linkAction);
          updateLinkActions(scope.re.linkDevice2);
          setCmdModelParameters();
          return initSelect();
        };
      })(this);
      scope["delete"] = (function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          return scope.promptModel = {
            title: "请确认删除 告警联动",
            message: "删除告警联动:" + ((_ref = scope.re.linkEquip) != null ? (_ref1 = _ref.model) != null ? _ref1.name : void 0 : void 0) + ' - ' + ((_ref2 = scope.re) != null ? (_ref3 = _ref2.triggerEquip) != null ? (_ref4 = _ref3.model) != null ? _ref4.name : void 0 : void 0 : void 0),
            confirm: function(ok) {
              if (ok) {
                return notification.remove({
                  user: scope.project.model.user,
                  project: scope.project.model.project,
                  notification: scope.re.notification
                }, function(err, n) {
                  if (!err) {
                    _this.display("删除成功");
                  }
                  queryRules();
                  return scope.re = {};
                });
              }
            }
          };
        };
      })(this);
      scope.checkContent = (function(_this) {
        return function() {
          if (!(scope.re.triggerDevice2 && scope.re.triggerAlarm2 && scope.re.triggerState2 && scope.re.linkDevice2 && scope.re.linkAction2)) {
            return alert("请输入完整信息");
          }
        };
      })(this);
      return scope.save = (function(_this) {
        return function() {
          var setParameterContent, _ref;
          if (!(scope.re.triggerDevice2 && scope.re.triggerAlarm2 && scope.re.triggerState2 && scope.re.linkDevice2 && scope.re.linkAction2)) {
            return _this.display("请输入完整信息555555");
          }
          scope.re.triggerAlarm = _.cloneDeep(scope.re.triggerAlarm2);
          scope.re.triggerState = _.cloneDeep(scope.re.triggerState2);
          scope.re.linkDevice = scope.re.linkDevice2;
          scope.re.triggerDevice = scope.re.triggerDevice2;
          scope.re.linkAction = scope.re.linkAction2;
          setParameterContent = function() {
            var parameter, result, _i, _len, _ref;
            result = '';
            _ref = scope.re.cmdModelParameters;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              parameter = _ref[_i];
              result += parameter.key + ':' + parameter.value + ',';
            }
            if (result.length > 0) {
              result = result.substring(0, result.length - 1);
            }
            return result;
          };
          scope.rule = {
            "enable": true,
            "visible": true,
            "index": 0,
            "users": ["_all"],
            "events": [scope.re.triggerDevice.split("_")[2] + "/" + scope.re.triggerDevice.split("_")[3] + "/" + scope.re.triggerAlarm],
            "user": scope.project.model.user,
            "project": scope.project.model.project,
            "notification": (_ref = scope.re.notification) != null ? _ref : "link-" + moment().format("YYYYMMDDHHmmss"),
            "name": "告警联动规则-" + moment().format("YYYYMMDDHHmmss"),
            "title": scope.re.linkAction.split(".")[2] + "/" + scope.re.linkAction.split(".")[3] + "/" + scope.re.linkAction.split(".")[4],
            "content": setParameterContent(),
            "contentType": "text",
            "priority": 0,
            "type": "command",
            "timeout": 2,
            "phase": "start",
            "delay": 0,
            "repeatPeriod": 0,
            "repeatTimes": 0,
            "rule": {
              "allStations": true,
              "allEquipmentTypes": true,
              "allEquipments": true,
              "allEventTypes": true,
              "allEventSeverities": true
            },
            "ruleType": "events"
          };
          if (scope.re.triggerState === "all") {
            scope.rule.rule.allEventPhases = true;
          } else {
            scope.rule.rule.eventPhases = [scope.re.triggerState];
          }
          return notification.save(scope.rule, function(err, model) {
            if (!err) {
              _this.display("保存成功");
            }
            queryRules();
            return scope.re = {};
          });
        };
      })(this);
    };

    AlarmLinkDirective.prototype.resize = function(scope) {};

    AlarmLinkDirective.prototype.dispose = function(scope) {};

    return AlarmLinkDirective;

  })(base.BaseDirective);
  return exports = {
    AlarmLinkDirective: AlarmLinkDirective
  };
});
