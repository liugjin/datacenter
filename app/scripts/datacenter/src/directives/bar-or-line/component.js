// Generated by IcedCoffeeScript 108.0.12

/*
* File: bar-or-line-directive
* User: Sheen
* Date: 2018/12/06
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var BarOrLineDirective, exports;
  BarOrLineDirective = (function(_super) {
    __extends(BarOrLineDirective, _super);

    function BarOrLineDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "bar-or-line";
      BarOrLineDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    BarOrLineDirective.prototype.setScope = function() {};

    BarOrLineDirective.prototype.setCSS = function() {
      return css;
    };

    BarOrLineDirective.prototype.setTemplate = function() {
      return view;
    };

    BarOrLineDirective.prototype.show = function($scope, element, attrs) {
      var createChartOption, e, renderChart, waitingLayout, _ref;
      $scope.mychart = null;
      $scope.value = [];
      $scope.$watch('parameters.barlinevalue', (function(_this) {
        return function(value) {
          return $scope.value = $scope.parameters.barlinevalue;
        };
      })(this));
      e = element.find('.ss-chart');
      waitingLayout = (function(_this) {
        return function($timeout, element, callback) {
          return $timeout(function() {
            if (element.width() <= 100) {
              return waitingLayout($timeout, element, callback);
            } else {
              return callback();
            }
          }, 200);
        };
      })(this);
      waitingLayout(this.$timeout, e, (function(_this) {
        return function() {
          return renderChart(e);
        };
      })(this));
      renderChart = function(element) {
        $scope.mychart = echarts.init(element[0]);
        return $scope.$watch('value', function(value) {
          var option, _ref, _ref1;
          if ((_ref = $scope.mychart) != null) {
            _ref.clear();
          }
          option = createChartOption($scope.value, $scope.parameters.title, $scope.parameters.type, $scope.parameters.xname, $scope.parameters.yname, $scope.parameters.mutilcolorflag, $scope.parameters.mutillevelflag, $scope.parameters.leghidflag, $scope.parameters.hidsplitlineflag, $scope.parameters.hidlabelshowflag, $scope.parameters.lbbevelflag, $scope.parameters.hidxaxislabel, $scope.parameters.hidxaxislineshow, $scope.parameters.hidyaxislineshow, $scope.parameters.hidtoolboxshow, $scope.parameters.graphcolor);
          return (_ref1 = $scope.mychart) != null ? _ref1.setOption(option) : void 0;
        });
      };
      createChartOption = function(values, title, type, xname, yname, mutilcolorflag, mutillevelflag, leghidflag, hidsplitlineflag, hidlabelshowflag, lbbevelflag, hidxaxislabel, hidxaxislineshow, hidyaxislineshow, hidtoolboxshow, graphcolor) {
        var axisLabelShow, defaultColor, i, labelOption, labelShowFlag, lbrotate, legendData, legendPosition, legendShowFlag, option, seriesData, splitLineShowFlag, toolboxShow, xAxisData, xaxisLineShow, yaxisLineShow, _i, _ref;
        legendShowFlag = true;
        splitLineShowFlag = true;
        labelShowFlag = false;
        axisLabelShow = true;
        xaxisLineShow = true;
        yaxisLineShow = true;
        toolboxShow = true;
        defaultColor = "#00a856";
        lbrotate = 0;
        if (graphcolor) {
          defaultColor = graphcolor;
        }
        if (lbbevelflag) {
          lbrotate = 15;
        }
        if (hidsplitlineflag) {
          splitLineShowFlag = false;
        }
        if (hidxaxislabel) {
          axisLabelShow = false;
        }
        if (hidxaxislineshow) {
          xaxisLineShow = false;
        }
        if (hidyaxislineshow) {
          yaxisLineShow = false;
        }
        if (hidtoolboxshow) {
          toolboxShow = false;
        }
        if (leghidflag) {
          legendShowFlag = false;
        }
        if (hidlabelshowflag) {
          labelShowFlag = false;
        } else {
          labelShowFlag = true;
        }
        labelOption = {
          normal: {
            show: labelShowFlag,
            position: 'inside'
          }
        };
        if (!type) {
          type = 'bar';
        }
        legendPosition = "top";
        if (type.indexOf("LB") >= 0) {
          legendPosition = "bottom";
        }
        legendData = _.uniq(_.pluck(values, 'name'));
        xAxisData = _.pluck(values, 'key');
        if (mutillevelflag) {
          for (i = _i = 0, _ref = xAxisData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (i % 2 > 0) {
              xAxisData[i] = "\n" + xAxisData[i];
            }
          }
        }
        seriesData = _.map(legendData, function(value) {
          var data, dataColor, markLineType, valueType;
          dataColor = '';
          if (value) {
            if ((value.toUpperCase()).indexOf("A") === 0) {
              dataColor = '#ffeb3b';
            } else if ((value.toUpperCase()).indexOf("B") === 0) {
              dataColor = '#4caf50';
            } else {
              dataColor = '#f44336';
            }
          }
          if (mutilcolorflag) {
            data = {
              name: value,
              label: labelOption,
              data: _.pluck(_.filter(values, function(val) {
                return val.name === value && val.type !== 'markline';
              }), 'value'),
              smooth: true,
              lineStyle: {
                normal: {
                  width: 3,
                  shadowColor: 'rgba(0,0,0,0.4)',
                  shadowBlur: 10,
                  shadowOffsetY: 10
                }
              }
            };
          } else {
            data = {
              name: value,
              label: labelOption,
              data: _.pluck(_.filter(values, function(val) {
                return val.name === value && val.type !== 'markline';
              }), 'value'),
              smooth: true,
              lineStyle: {
                normal: {
                  width: 3,
                  shadowColor: 'rgba(0,0,0,0.4)',
                  shadowBlur: 10,
                  shadowOffsetY: 10
                }
              }
            };
          }
          if (mutilcolorflag) {
            data.itemStyle = {
              normal: {
                color: function(params) {
                  var colorList;
                  colorList = ['#00a856', '#C3362F', '#324354', '#D28367', '#93C8AC', '#799E82', '#CD8620', '#BCA29B', '#6C5685', '#819D48', '#9B4441', '#406C9B', '#E68D39'];
                  return colorList[params.dataIndex % 13];
                },
                lineStyle: {
                  color: defaultColor
                }
              }
            };
          }
          markLineType = _.findWhere(values, {
            name: value,
            type: 'markline'
          });
          if (markLineType) {
            data.markLine = {
              data: [
                {
                  yAxis: parseFloat(markLineType.value),
                  name: '标准线'
                }
              ]
            };
          }
          valueType = _.pick(_.find(values, function(val) {
            return val.name === value && val.type !== 'markline';
          }), 'type');
          if (!_.isEmpty(valueType)) {
            data.type = valueType.type;
            return data;
          }
          if (type.indexOf('line') >= 0) {
            data.type = 'line';
          } else if (type.indexOf('stack') >= 0) {
            data.type = 'bar';
            data.stack = 'bar';
          } else {
            data.type = 'bar';
          }
          if (type.indexOf('Smooth') >= 0) {
            data.smooth = true;
          }
          if (type.indexOf('Maxmin') >= 0) {
            data.markPoint = {
              data: [
                {
                  type: 'max',
                  name: '最大值'
                }, {
                  type: 'min',
                  name: '最小值'
                }
              ]
            };
          }
          if (type.indexOf('Avg') >= 0) {
            data.markLine = {
              data: [
                {
                  type: 'average',
                  name: '平均值'
                }
              ]
            };
          }
          return data;
        });
        option = {
          color: ['#00a856', '#C3362F', '#324354', '#D28367', '#93C8AC', '#799E82', '#CD8620', '#BCA29B', '#6C5685', '#819D48', '#9B4441', '#406C9B', '#E68D39'],
          backgroundColor: "rgba(255,255,255,0.0)",
          tooltip: {
            trigger: 'axis'
          },
          legend: {
            data: legendData,
            y: legendPosition,
            show: legendShowFlag,
            textStyle: {
              color: '#9E9E9E'
            }
          },
          toolbox: {
            show: toolboxShow,
            x: 'right',
            y: 'top',
            feature: {
              dataView: {
                show: true,
                readOnly: false
              },
              magicType: {
                show: true,
                type: ['line', 'bar']
              },
              restore: {
                show: true
              },
              saveAsImage: {
                show: true
              }
            },
            orient: 'vertical'
          },
          xAxis: [
            {
              name: xname,
              type: 'category',
              data: xAxisData,
              axisLine: {
                show: xaxisLineShow,
                lineStyle: {
                  color: '#dedede'
                }
              },
              axisLabel: {
                show: axisLabelShow,
                textStyle: {
                  color: '#dedede'
                }
              }
            }
          ],
          yAxis: [
            {
              name: yname,
              type: 'value',
              splitLine: {
                show: splitLineShowFlag,
                lineStyle: {
                  color: ['#dedede'],
                  width: 1,
                  type: 'dashed'
                }
              },
              axisLine: {
                show: yaxisLineShow,
                lineStyle: {
                  color: '#dedede'
                }
              },
              axisLabel: {
                show: axisLabelShow,
                interval: 0,
                rotate: lbrotate,
                textStyle: {
                  color: '#dedede'
                }
              }
            }
          ],
          dataZoom: [
            {
              type: 'slider',
              height: 20,
              bottom: 4,
              xAxisIndex: 0,
              start: 0,
              end: 100,
              borderColor: '#bfcff3',
              handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
              filterMode: 'empty',
              textStyle: {
                color: '#fff'
              }
            }, {
              type: 'inside',
              xAxisIndex: 0,
              start: 0,
              end: 100,
              filterMode: 'empty'
            }
          ],
          series: seriesData
        };
        if (legendPosition === "bottom") {
          if (title) {
            option.title = {
              text: title,
              textStyle: {
                color: '#9E9E9E'
              },
              x: 'center',
              y: 'top',
              textAlign: 'center'
            };
          }
        } else {
          if (title) {
            option.title = {
              text: title,
              textStyle: {
                color: '#9E9E9E'
              }
            };
          }
        }
        if (type.indexOf('line') >= 0) {
          option.xAxis[0].boundaryGap = false;
        }
        return option;
      };
      if ((_ref = $scope.menuSubscription) != null) {
        _ref.dispose();
      }
      return $scope.menuSubscription = this.commonService.subscribeEventBus('menu-collapsed', (function(_this) {
        return function(d) {
          return setTimeout(function() {
            var _ref1;
            return (_ref1 = $scope.mychart) != null ? _ref1.resize() : void 0;
          }, 500);
        };
      })(this));
    };

    BarOrLineDirective.prototype.resize = function($scope) {
      var _ref;
      return (_ref = $scope.mychart) != null ? _ref.resize() : void 0;
    };

    BarOrLineDirective.prototype.dispose = function($scope) {
      var _ref, _ref1;
      if ((_ref = $scope.mychart) != null) {
        _ref.dispose();
      }
      $scope.mychart = null;
      return (_ref1 = $scope.menuSubscription) != null ? _ref1.dispose() : void 0;
    };

    return BarOrLineDirective;

  })(base.BaseDirective);
  return exports = {
    BarOrLineDirective: BarOrLineDirective
  };
});
