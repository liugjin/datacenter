// Generated by IcedCoffeeScript 108.0.13

/*
* File: batch-configuration-directive
* User: David
* Date: 2020/05/07
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "jszip2"], function(base, css, view, _, moment, zip) {
  var BatchConfigurationDirective, exports;
  BatchConfigurationDirective = (function(_super) {
    __extends(BatchConfigurationDirective, _super);

    function BatchConfigurationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.downloadMakeupZip = __bind(this.downloadMakeupZip, this);
      this.downloadMonitoring = __bind(this.downloadMonitoring, this);
      this.downloadElements = __bind(this.downloadElements, this);
      this.downloadGraphics = __bind(this.downloadGraphics, this);
      this.downloadAndZipFilesByJson = __bind(this.downloadAndZipFilesByJson, this);
      this.loadData = __bind(this.loadData, this);
      this.show = __bind(this.show, this);
      this.id = "batch-configuration";
      BatchConfigurationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    BatchConfigurationDirective.prototype.setScope = function() {};

    BatchConfigurationDirective.prototype.setCSS = function() {
      return css;
    };

    BatchConfigurationDirective.prototype.setTemplate = function() {
      return view;
    };

    BatchConfigurationDirective.prototype.show = function(scope, element, attrs) {
      this.ip = this.$window.origin;
      this.templates = [];
      this.user = scope.project.model.user;
      this.project = scope.project.model.project;
      this.setting = scope.setting;
      this.dictionaryTypes = ["datatypes", "signaltypes", "eventtypes", "porttypes", "stationtypes", "units", "eventseverities", "eventphases", "vendors", "roles", "connectiontypes", "capacities"];
      this.modelTypes = ["equipmenttemplates", "equipmentproperties", "equipmentsignals", "equipmentevents", "equipmentcommands", "equipmentports"];
      this.siteEquipment = ["stations", "equipments"];
      this.referenceFileKeys = ["image", "src", "audio", "video", "file", "attachment", "d3"];
      scope.project.loadEquipmentTemplates(null, null, (function(_this) {
        return function(err, tmps) {
          return _this.templates = tmps;
        };
      })(this), true);
      this.commonService.rpcGet("muSetting", null, (function(_this) {
        return function(err, data) {
          var _ref, _ref1;
          _this.mu = data != null ? (_ref = data.data) != null ? _ref.mu : void 0 : void 0;
          _this.elements = data != null ? (_ref1 = data.data) != null ? _ref1.elements : void 0 : void 0;
          console.log("@mu", _this.mu);
          return console.log("321", _this.elements);
        };
      })(this));
      scope.download = (function(_this) {
        return function(callback) {
          var content, data, err, file, info, infos, name, project, tent, zname, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          _this.totalFile = new zip;
          _this.selectTemplates = [];
          _this.selectTypes = [];
          _.each(_this.templates, function(template) {
            return _this.selectTemplates.push(template.model.template);
          });
          _.each(_this.templates, function(template) {
            if (_this.selectTypes.indexOf(template.model.type) === -1) {
              return _this.selectTypes.push(template.model.type);
            }
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
              funcname: "download"
            });
            _this.downloadElements(__iced_deferrals.defer({
              lineno: 57
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                funcname: "download"
              });
              _this.downloadMonitoring(__iced_deferrals.defer({
                lineno: 58
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                  funcname: "download"
                });
                _this.downloadGraphics(__iced_deferrals.defer({
                  lineno: 59
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                    funcname: "download"
                  });
                  _this.loadConfiguration(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return data = arguments[1];
                      };
                    })(),
                    lineno: 60
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  project = data.project;
                  info = {
                    from: {
                      user: _this.user,
                      project: _this.project
                    },
                    to: {},
                    timestamp: (new Date()).toISOString(),
                    data: data
                  };
                  file = new zip;
                  name = project.user + "-" + project.project + ".json";
                  infos = JSON.stringify(info, null, 2);
                  file.folder("project").file(name, infos);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                      funcname: "download"
                    });
                    _this.downloadAndZipFilesByJson(data, file, __iced_deferrals.defer({
                      lineno: 71
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                        funcname: "download"
                      });
                      file.generateAsync({
                        type: "blob"
                      }).then(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return content = arguments[0];
                          };
                        })(),
                        lineno: 72
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      zname = "project" + "-" + project.user + ".zip";
                      _this.totalFile.file(zname, content);
                      console.log("data", data);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                          funcname: "download"
                        });
                        _this.totalFile.generateAsync({
                          type: "blob"
                        }).then(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return tent = arguments[0];
                            };
                          })(),
                          lineno: 77
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        name = "configuration-" + project.project + "-" + project.user + ".zip";
                        _this.downloadBlobFile(tent, name);
                        return typeof callback === "function" ? callback(err, data) : void 0;
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this);
      scope.file = (function(_this) {
        return function() {
          var input;
          scope.fileNameStr = "";
          input = element.find('input[type="file"]');
          input.click();
          input.click(function() {
            return input.val('');
          });
          return input.on('change', function(evt) {
            var file, _ref, _ref1;
            file = (_ref = input[0]) != null ? (_ref1 = _ref.files) != null ? _ref1[0] : void 0 : void 0;
            scope.fileNameStr = file.name;
            evt.target.value = null;
            scope.zp = new FormData;
            scope.zp.append("file", file);
            return scope.$applyAsync();
          });
        };
      })(this);
      return scope.confirmSha = (function(_this) {
        return function() {
          var params, url;
          console.log("scope.controller", scope.controller);
          url = scope.controller.$location.$$absUrl.substr(0, scope.controller.$location.$$absUrl.indexOf("#")) + "rpc/configurationRecovery";
          params = {
            token: scope.controller.$rootScope.user.token,
            parameters: {
              token: scope.controller.$rootScope.user.token,
              project: _this.project,
              user: _this.user,
              ip: _this.ip
            }
          };
          return _this.commonService.uploadService.$http({
            method: 'POST',
            url: url,
            data: scope.zp,
            params: params,
            headers: {
              'Content-Type': void 0
            }
          }).then(function(res) {
            var _ref;
            if (((_ref = res.data) != null ? _ref.data : void 0) === "ok") {
              return _this.display("上传成功");
            } else {
              return _this.display("上传失败");
            }
          });
        };
      })(this);
    };

    BatchConfigurationDirective.prototype.loadConfiguration = function(callback) {
      var data, err, getback, item, project, result, templates, types, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      result = {};
      getback = function(key, err, data, flag) {
        if (err) {
          return callback(err);
        }
        return result[key] = flag || data instanceof Array ? data : [data];
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
            funcname: "BatchConfigurationDirective.loadConfiguration"
          });
          _this.loadData("project", __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return project = arguments[1];
              };
            })(),
            lineno: 123
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          getback("project", err, project, true);
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = _this.dictionaryTypes;
            _len = _ref.length;
            _i = 0;
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = __iced_k;
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = _continue;
              if (!(_i < _len)) {
                return _break();
              } else {
                item = _ref[_i];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                    funcname: "BatchConfigurationDirective.loadConfiguration"
                  });
                  _this.loadData(item, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return data = arguments[1];
                      };
                    })(),
                    lineno: 128
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(getback(item, err, data));
                });
              }
            };
            _while(__iced_k);
          })(function() {
            types = _this.selectTypes.join();
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                funcname: "BatchConfigurationDirective.loadConfiguration"
              });
              _this.loadData("equipmenttypes", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 132
              }), null, {
                type: types
              });
              __iced_deferrals._fulfill();
            })(function() {
              getback("equipmenttypes", err, data);
              templates = _this.selectTemplates.join();
              (function(__iced_k) {
                var _i, _len, _ref, _results, _while;
                _ref = _this.modelTypes;
                _len = _ref.length;
                _i = 0;
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = __iced_k;
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_i;
                      return _while(__iced_k);
                    });
                  };
                  _next = _continue;
                  if (!(_i < _len)) {
                    return _break();
                  } else {
                    item = _ref[_i];
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                        funcname: "BatchConfigurationDirective.loadConfiguration"
                      });
                      _this.loadData(item, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            err = arguments[0];
                            return data = arguments[1];
                          };
                        })(),
                        lineno: 137
                      }), null, {
                        template: templates
                      });
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(getback(item, err, data));
                    });
                  }
                };
                _while(__iced_k);
              })(function() {
                (function(__iced_k) {
                  var _i, _len, _ref, _results, _while;
                  _ref = _this.siteEquipment;
                  _len = _ref.length;
                  _i = 0;
                  _while = function(__iced_k) {
                    var _break, _continue, _next;
                    _break = __iced_k;
                    _continue = function() {
                      return iced.trampoline(function() {
                        ++_i;
                        return _while(__iced_k);
                      });
                    };
                    _next = _continue;
                    if (!(_i < _len)) {
                      return _break();
                    } else {
                      item = _ref[_i];
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                          funcname: "BatchConfigurationDirective.loadConfiguration"
                        });
                        _this.loadData(item, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              err = arguments[0];
                              return data = arguments[1];
                            };
                          })(),
                          lineno: 141
                        }), null, null);
                        __iced_deferrals._fulfill();
                      })(function() {
                        return _next(getback(item, err, data));
                      });
                    }
                  };
                  _while(__iced_k);
                })(function() {
                  return typeof callback === "function" ? callback(null, result) : void 0;
                });
              });
            });
          });
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.loadData = function(serviceId, callback, field, filter) {
      var service;
      if (filter == null) {
        filter = {};
      }
      service = this.commonService.modelEngine.modelManager.getService(serviceId);
      if (filter.user == null) {
        filter.user = this.user;
      }
      if (filter.project == null) {
        filter.project = this.project;
      }
      return service.query(filter, field, (function(_this) {
        return function(err, data) {
          return typeof callback === "function" ? callback(err, data) : void 0;
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.downloadAndZipFilesByJson = function(data, zp, callback) {
      var doc, err, file, files, folder, image, images, item, key, name, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      images = [];
      _ref = this.referenceFileKeys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        folder = zp.folder(item);
        files = this.findJsonValuesByKey(data, item);
        for (key in files) {
          file = files[key];
          images.push({
            file: file,
            folder: folder
          });
        }
        files = this.findJsonValuesByProperty(data, item, "property", "value");
        for (key in files) {
          file = files[key];
          images.push({
            file: file,
            folder: folder
          });
        }
      }
      (function(_this) {
        return (function(__iced_k) {
          var _j, _len1, _ref1, _results, _while;
          _ref1 = images;
          _len1 = _ref1.length;
          _j = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_j;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_j < _len1)) {
              return _break();
            } else {
              image = _ref1[_j];
              file = _this.setting.urls.uploadUrl + "/" + image.file;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                  funcname: "BatchConfigurationDirective.downloadAndZipFilesByJson"
                });
                _this.downloadFileAsync(file, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return doc = arguments[1];
                    };
                  })(),
                  lineno: 168
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(!err && doc ? (name = image.file.split("?")[0], image.folder.file(name, doc)) : void 0);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.downloadGraphics = function(callback) {
      var content, data, err, file, folder, graphic, info, name, zname, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.graphics = [];
      this.infos = [];
      _.each(this.templates, (function(_this) {
        return function(template) {
          if (template.model.graphic) {
            return _this.graphics.push(template.model.graphic);
          }
        };
      })(this));
      if (this.graphics.length === 0) {
        return;
      }
      file = new zip;
      folder = file.folder("template");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.graphics;
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              graphic = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                  funcname: "BatchConfigurationDirective.downloadGraphics"
                });
                _this.loadData("graphictemplates", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return data = arguments[1];
                    };
                  })(),
                  lineno: 184
                }), null, {
                  template: graphic
                });
                __iced_deferrals._fulfill();
              })(function() {
                _this.infos.push(data);
                name = "graphic-template-" + data.user + "." + data.project + "-" + graphic + ".json";
                info = JSON.stringify(data, null, 2);
                return _next(folder.file(name, info));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
              funcname: "BatchConfigurationDirective.downloadGraphics"
            });
            _this.downloadAndZipFilesByJson(_this.infos, file, __iced_deferrals.defer({
              lineno: 189
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
                funcname: "BatchConfigurationDirective.downloadGraphics"
              });
              file.generateAsync({
                type: "blob"
              }).then(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return content = arguments[0];
                  };
                })(),
                lineno: 190
              }));
              __iced_deferrals._fulfill();
            })(function() {
              zname = "graphic-templates-" + data.user + ".zip";
              _this.totalFile.file(zname, content);
              return typeof callback === "function" ? callback() : void 0;
            });
          });
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.downloadJsonFiles = function(file, callback) {
      var json, jsons, _i, _len;
      jsons = [];
      _.each(this.templates, (function(_this) {
        return function(template) {
          var data, _ref;
          data = (_ref = template.model.symbol) != null ? _ref : template.model.desc;
          if (data && data.length) {
            return jsons = jsons.concat(data);
          }
        };
      })(this));
      for (_i = 0, _len = jsons.length; _i < _len; _i++) {
        json = jsons[_i];
        _.mapObject(this.elements, (function(_this) {
          return function(ele) {
            var infos, name;
            if (ele.id === json) {
              infos = JSON.stringify(ele, null, 2);
              name = json + ".json";
              return file.folder("elements").file(name, infos);
            }
          };
        })(this));
      }
      return typeof callback === "function" ? callback() : void 0;
    };

    BatchConfigurationDirective.prototype.downloadElements = function(callback) {
      var content, file, zname, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      file = new zip();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
            funcname: "BatchConfigurationDirective.downloadElements"
          });
          _this.downloadJsonFiles(file, __iced_deferrals.defer({
            lineno: 212
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
              funcname: "BatchConfigurationDirective.downloadElements"
            });
            file.generateAsync({
              type: "blob"
            }).then(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return content = arguments[0];
                };
              })(),
              lineno: 213
            }));
            __iced_deferrals._fulfill();
          })(function() {
            zname = "elements.zip";
            _this.totalFile.file(zname, content);
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.downloadMonitoring = function(callback) {
      var content, file, infos, name, zname, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      file = new zip;
      name = "monitoring-units.json";
      infos = JSON.stringify(this.mu, null, 2);
      file.folder("monitoring-units").file(name, infos);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\batch-configuration\\component.coffee",
            funcname: "BatchConfigurationDirective.downloadMonitoring"
          });
          file.generateAsync({
            type: "blob"
          }).then(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return content = arguments[0];
              };
            })(),
            lineno: 225
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          zname = "monitoring-units.zip";
          _this.totalFile.file(zname, content);
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    BatchConfigurationDirective.prototype.downloadMakeupZip = function(content) {
      return console.log("content", content);
    };

    BatchConfigurationDirective.prototype.downloadFileAsync = function(file, callback) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.open('GET', file);
      xhr.responseType = "blob";
      xhr.onload = function() {
        var err;
        err = this.status === 200 ? null : this.status;
        return callback(err, xhr.response);
      };
      return xhr.send();
    };

    BatchConfigurationDirective.prototype.findJsonValuesByKey = function(json, key) {
      var j, k, k2, r2, result, v, v2, _i, _len;
      result = {};
      if (!json) {
        return result;
      }
      if (json instanceof Array) {
        for (_i = 0, _len = json.length; _i < _len; _i++) {
          j = json[_i];
          r2 = this.findJsonValuesByKey(j, key);
          for (k in r2) {
            v = r2[k];
            result[v] = v;
          }
        }
      } else if (typeof json === 'object') {
        for (k in json) {
          v = json[k];
          if (((key instanceof Array) && __indexOf.call(key, k) >= 0) || k === key) {
            if (typeof v === 'string') {
              result[v] = v;
            } else if (typeof v === 'object') {
              r2 = this.findJsonValuesByKey(v, key);
              for (k2 in r2) {
                v2 = r2[k2];
                result[v2] = v2;
              }
            }
          } else {
            r2 = this.findJsonValuesByKey(v, key);
            for (k2 in r2) {
              v2 = r2[k2];
              result[v2] = v2;
            }
          }
        }
      }
      return result;
    };

    BatchConfigurationDirective.prototype.findJsonValuesByProperty = function(json, type, propertyKey, valueKey) {
      var j, k, k2, r2, result, v, v2, val, _i, _len;
      if (propertyKey == null) {
        propertyKey = 'property';
      }
      if (valueKey == null) {
        valueKey = 'value';
      }
      result = {};
      if (!json) {
        return result;
      }
      if (json instanceof Array) {
        for (_i = 0, _len = json.length; _i < _len; _i++) {
          j = json[_i];
          r2 = this.findJsonValuesByProperty(j, type, propertyKey, valueKey);
          for (k in r2) {
            v = r2[k];
            result[v] = v;
          }
        }
      } else if (typeof json === 'object') {
        for (k in json) {
          v = json[k];
          if (k === propertyKey && (((type instanceof Array) && __indexOf.call(type, v) >= 0) || v === type)) {
            val = json[valueKey];
            if (typeof val === 'string') {
              result[val] = val;
            } else if (typeof val === 'object') {
              r2 = this.findJsonValuesByProperty(val, type, propertyKey, valueKey);
              for (k2 in r2) {
                v2 = r2[k2];
                result[v2] = v2;
              }
            }
          } else {
            r2 = this.findJsonValuesByProperty(v, type, propertyKey, valueKey);
            for (k2 in r2) {
              v2 = r2[k2];
              result[v2] = v2;
            }
          }
        }
      }
      return result;
    };

    BatchConfigurationDirective.prototype.downloadBlobFile = function(blob, filename) {
      var a, e;
      e = document.createEvent('MouseEvents');
      a = document.createElement('a');
      a.download = filename;
      a.href = window.URL.createObjectURL(blob);
      a.dataset.downloadurl = [a.download, a.href].join(':');
      e.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      a.dispatchEvent(e);
    };

    BatchConfigurationDirective.prototype.resize = function(scope) {};

    BatchConfigurationDirective.prototype.dispose = function(scope) {};

    return BatchConfigurationDirective;

  })(base.BaseDirective);
  return exports = {
    BatchConfigurationDirective: BatchConfigurationDirective
  };
});
