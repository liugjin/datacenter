// Generated by IcedCoffeeScript 108.0.12

/*
* File: capacity-asset-directive
* User: David
* Date: 2019/02/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CapacityAssetDirective, exports;
  CapacityAssetDirective = (function(_super) {
    __extends(CapacityAssetDirective, _super);

    function CapacityAssetDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "capacity-asset";
      CapacityAssetDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CapacityAssetDirective.prototype.setScope = function() {};

    CapacityAssetDirective.prototype.setCSS = function() {
      return css;
    };

    CapacityAssetDirective.prototype.setTemplate = function() {
      return view;
    };

    CapacityAssetDirective.prototype.show = function(scope, element, attrs) {
      var hrefContent, subSignalArr;
      if (!scope.unitMap) {
        scope.unitMap = {};
        _.each(this.project.dictionary.signaltypes.items, (function(_this) {
          return function(d) {
            return scope.unitMap[d.model.type] = d.model.unit;
          };
        })(this));
      }
      hrefContent = "#/capacity-2d/" + scope.project.model.user + "/" + scope.project.model.project + "?station=" + scope.station.model.station + "&signalId=";
      scope.showSignal = [
        {
          href: hrefContent + "space",
          id: "space",
          name: "空间",
          usedSignal: "used-space",
          totalSignal: "rated-space",
          ratioSignal: "ratio-space",
          imgUrl: "" + (this.getComponentPath('images/space.png'))
        }, {
          href: hrefContent + "power",
          id: "power",
          name: "电力",
          usedSignal: "used-power",
          totalSignal: "rated-power",
          ratioSignal: "ratio-power",
          imgUrl: "" + (this.getComponentPath('images/power.png'))
        }, {
          href: hrefContent + "cooling",
          id: "cooling",
          name: "制冷",
          usedSignal: "used-cooling",
          totalSignal: "rated-cooling",
          ratioSignal: "ratio-cooling",
          imgUrl: "" + (this.getComponentPath('images/cooling.png'))
        }, {
          href: hrefContent + "weight",
          id: "weight",
          name: "承重",
          usedSignal: "used-weight",
          totalSignal: "rated-weight",
          ratioSignal: "ratio-weight",
          imgUrl: "" + (this.getComponentPath('images/weight.png'))
        }, {
          id: "ports",
          name: "端口",
          usedSignal: "used-ports",
          totalSignal: "rated-ports",
          ratioSignal: "ratio-ports",
          imgUrl: "" + (this.getComponentPath('images/ports.png'))
        }
      ];
      if (scope.subscribeArr) {
        _.each(scope.subscribeArr, (function(_this) {
          return function(d) {
            return d.dispose();
          };
        })(this));
      }
      scope.subscribeArr = {};
      subSignalArr = ["used-space", "rated-space", "ratio-space", "used-power", "rated-power", "ratio-power", "used-cooling", "rated-cooling", "ratio-cooling", "used-weight", "rated-weight", "ratio-weight", "used-ports", "rated-ports", "ratio-ports"];
      return scope.station.loadEquipment("_station_capacity", null, (function(_this) {
        return function(err, equip) {
          var filter;
          if (err) {
            return console.error("告警: " + err);
          }
          if (!equip) {
            return console.warn("该站点没有配置容量管理设备!!");
          }
          filter = equip.getIds();
          return _.each(subSignalArr, function(sigId, index) {
            var id;
            id = Math.ceil((index + 1) / 3) - 1;
            filter.signal = sigId;
            return scope.subscribeArr[sigId] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err2, d) {
              if (err2) {
                return console.error("告警: " + err2);
              }
              if (index % 3 === 0) {
                return scope.showSignal[id].usedValue = d.message.value;
              } else if (index % 3 === 1) {
                scope.showSignal[id].totalValue = d.message.value;
                if (_.has(scope.unitMap, d.message.unit)) {
                  return scope.showSignal[id].unit = scope.unitMap[d.message.unit].toUpperCase();
                }
              } else {
                return scope.showSignal[id].ratioValue = d.message.value;
              }
            });
          });
        };
      })(this));
    };

    CapacityAssetDirective.prototype.resize = function(scope) {};

    CapacityAssetDirective.prototype.dispose = function(scope) {
      return _.each(scope.subscribeArr, (function(_this) {
        return function(d) {
          return d.dispose();
        };
      })(this));
    };

    return CapacityAssetDirective;

  })(base.BaseDirective);
  return exports = {
    CapacityAssetDirective: CapacityAssetDirective
  };
});
