// Generated by IcedCoffeeScript 108.0.13

/*
* File: capacity-management-directive
* User: Billy
* Date: 2019/02/20
* Desc: 资产管理组件
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CapacityManagementDirective, exports;
  CapacityManagementDirective = (function(_super) {
    __extends(CapacityManagementDirective, _super);

    function CapacityManagementDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "capacity-management";
      CapacityManagementDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CapacityManagementDirective.prototype.setScope = function() {};

    CapacityManagementDirective.prototype.setCSS = function() {
      return css;
    };

    CapacityManagementDirective.prototype.setTemplate = function() {
      return view;
    };

    CapacityManagementDirective.prototype.show = function(scope, element, attrs) {
      var getCapcityEquipment, initData;
      scope.showSignal = [
        {
          id: 'cooling',
          signal: 'ratio-cooling',
          name: '制冷容量'
        }, {
          id: 'port',
          signal: 'ratio-ports',
          name: '端口容量'
        }, {
          id: 'space',
          signal: 'ratio-space',
          name: 'U位容量',
          mid: true
        }, {
          id: 'power',
          signal: 'ratio-power',
          name: '电力容量'
        }, {
          id: 'weight',
          signal: 'ratio-weight',
          name: '承重容量'
        }
      ];
      getCapcityEquipment = (function(_this) {
        return function(stationId, callback) {
          return _this.commonService.loadStation(stationId, function(err, station) {
            return _this.commonService.loadEquipmentById(station, '_station_capacity', function(err, equipment) {
              if (!equipment) {
                return console.warn("equipment is null", equipment);
              }
              return typeof callback === "function" ? callback(err, equipment) : void 0;
            }, true);
          }, true);
        };
      })(this);
      initData = (function(_this) {
        return function() {
          var signal, _i, _len, _ref, _results;
          _ref = scope.showSignal;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            signal = _ref[_i];
            _results.push(signal.data = null);
          }
          return _results;
        };
      })(this);
      return scope.$watch('parameters.stationId', (function(_this) {
        return function(stationId) {
          return getCapcityEquipment(stationId, function(err, capacity) {
            var _ref;
            if ((_ref = scope.subSignal) != null) {
              _ref.dispose();
            }
            initData();
            return scope.subSignal = _this.commonService.subscribeEquipmentSignalValues(capacity, function(sig) {
              return _.map(scope.showSignal, function(signal) {
                if (sig.model.signal === signal.signal) {
                  return signal['data'] = sig.data;
                }
              });
            });
          });
        };
      })(this));
    };

    CapacityManagementDirective.prototype.resize = function(scope) {};

    CapacityManagementDirective.prototype.dispose = function(scope) {
      var _ref;
      if ((_ref = scope.subSignal) != null) {
        _ref.dispose();
      }
      return scope.subSignal = null;
    };

    return CapacityManagementDirective;

  })(base.BaseDirective);
  return exports = {
    CapacityManagementDirective: CapacityManagementDirective
  };
});
