// Generated by IcedCoffeeScript 108.0.13

/*
* File: capacity-radar-directive
* User: David
* Date: 2019/02/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'echarts'], function(base, css, view, _, moment, echarts) {
  var CapacityRadarDirective, exports;
  CapacityRadarDirective = (function(_super) {
    __extends(CapacityRadarDirective, _super);

    function CapacityRadarDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createOption = __bind(this.createOption, this);
      this.createChart = __bind(this.createChart, this);
      this.show = __bind(this.show, this);
      this.id = "capacity-radar";
      CapacityRadarDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CapacityRadarDirective.prototype.setScope = function() {};

    CapacityRadarDirective.prototype.setCSS = function() {
      return css;
    };

    CapacityRadarDirective.prototype.setTemplate = function() {
      return view;
    };

    CapacityRadarDirective.prototype.show = function(scope, element, attrs) {
      var radar;
      radar = element.find(".capacity-radar");
      scope.ratios = {};
      return this.waitingLayout(this.$timeout, radar, (function(_this) {
        return function() {
          var option, _ref, _ref1;
          if ((_ref = scope.echart) != null) {
            _ref.dispose();
          }
          scope.echart = echarts.init(radar[0]);
          option = _this.createOption(scope.ratios);
          scope.echart.setOption(option);
          _this.createChart(scope);
          if ((_ref1 = scope.subtopic) != null) {
            _ref1.dispose();
          }
          return scope.subtopic = _this.commonService.subscribeEventBus("stationId", function(msg) {
            scope.station = _.find(scope.project.stations.items, function(item) {
              return item.model.station === msg.message.stationId;
            });
            return _this.createChart(scope);
          });
        };
      })(this));
    };

    CapacityRadarDirective.prototype.createChart = function(scope) {
      var _ref;
      return (_ref = scope.station) != null ? _ref.loadEquipment("_station_capacity", null, (function(_this) {
        return function(err, equipment) {
          var _ref1;
          if ((_ref1 = scope.subscription) != null) {
            _ref1.dispose();
          }
          return scope.subscription = _this.commonService.subscribeEquipmentSignalValues(equipment, function(signal) {
            var option, _ref2;
            if ((_ref2 = signal.model.signal) === "ratio-cooling" || _ref2 === "ratio-ports" || _ref2 === "ratio-power" || _ref2 === "ratio-space" || _ref2 === "ratio-weight" || _ref2 === "plan-ratio-cooling" || _ref2 === "plan-ratio-ports" || _ref2 === "plan-ratio-power" || _ref2 === "plan-ratio-space" || _ref2 === "plan-ratio-weight") {
              scope.ratios[signal.model.signal.replace("ratio-", "")] = signal.data.value;
              option = _this.createOption(scope.ratios);
              return scope.echart.setOption(option);
            }
          });
        };
      })(this)) : void 0;
    };

    CapacityRadarDirective.prototype.createOption = function(ratios) {
      var addCooling, addPorts, addPower, addSpace, addWeight, multiple, option, ratioCooling, ratioPorts, ratioPower, ratioSpace, ratioWeight, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      multiple = 1;
      ratioCooling = (ratios != null ? (_ref = ratios.cooling) != null ? _ref.toFixed(2) : void 0 : void 0) || 0;
      ratioWeight = (ratios != null ? (_ref1 = ratios.weight) != null ? _ref1.toFixed(2) : void 0 : void 0) || 0;
      ratioPower = (ratios != null ? (_ref2 = ratios.power) != null ? _ref2.toFixed(2) : void 0 : void 0) || 0;
      ratioSpace = (ratios != null ? (_ref3 = ratios.space) != null ? _ref3.toFixed(2) : void 0 : void 0) || 0;
      ratioPorts = (ratios != null ? (_ref4 = ratios.ports) != null ? _ref4.toFixed(2) : void 0 : void 0) || 0;
      addCooling = (ratios != null ? (_ref5 = ratios["plan-cooling"]) != null ? _ref5.toFixed(2) : void 0 : void 0) || 0;
      addWeight = (ratios != null ? (_ref6 = ratios["plan-weight"]) != null ? _ref6.toFixed(2) : void 0 : void 0) || 0;
      addPower = (ratios != null ? (_ref7 = ratios["plan-power"]) != null ? _ref7.toFixed(2) : void 0 : void 0) || 0;
      addSpace = (ratios != null ? (_ref8 = ratios["plan-space"]) != null ? _ref8.toFixed(2) : void 0 : void 0) || 0;
      addPorts = (ratios != null ? (_ref9 = ratios["plan-ports"]) != null ? _ref9.toFixed(2) : void 0 : void 0) || 0;
      return option = {
        tooltip: {
          trigger: 'axis',
          formatter: function(params) {
            var i, relVal, _i, _ref10;
            relVal = params.data.name;
            for (i = _i = 0, _ref10 = params.data.value.length; 0 <= _ref10 ? _i < _ref10 : _i > _ref10; i = 0 <= _ref10 ? ++_i : --_i) {
              relVal += "<br>" + params.data.key[i] + "：" + params.data.value[i] + " %";
            }
            return relVal;
          }
        },
        radar: {
          name: {
            textStyle: {
              fontSize: 14 * multiple,
              color: '#fff'
            }
          },
          indicator: [
            {
              text: '制冷容量',
              max: 100
            }, {
              text: '承重容量',
              max: 100
            }, {
              text: '电力容量',
              max: 100
            }, {
              text: '空间容量',
              max: 100
            }, {
              text: '端口容量',
              max: 100
            }
          ],
          axisLine: {
            lineStyle: {
              color: '#2d91bd',
              width: 2 * multiple
            }
          },
          splitLine: {
            lineStyle: {
              color: '#005b7d',
              width: 2 * multiple
            }
          },
          splitArea: {
            areaStyle: {
              color: ['rgba(67,186,254,0.1)', 'transparent']
            }
          }
        },
        series: [
          {
            type: 'radar',
            tooltip: {
              trigger: 'item'
            },
            symbolSize: 0,
            data: [
              {
                value: [ratioCooling + addCooling, ratioWeight + addWeight, ratioPower + addPower, ratioSpace + addSpace, ratioPorts + addPorts],
                key: ['制冷容量', '承重容量', '电力容量', '空间容量', '端口容量'],
                name: '附加计划用量',
                lineStyle: {
                  normal: {
                    color: '#45cafe',
                    width: 2 * multiple
                  }
                }
              }, {
                value: [ratioCooling, ratioWeight, ratioPower, ratioSpace, ratioPorts],
                key: ['制冷容量', '承重容量', '电力容量', '空间容量', '端口容量'],
                name: '已使用量',
                lineStyle: {
                  normal: {
                    color: '#00ffbb',
                    width: 2 * multiple
                  }
                },
                areaStyle: {
                  normal: {
                    color: '#33eee7',
                    opacity: 0.3
                  }
                }
              }
            ]
          }
        ]
      };
    };

    CapacityRadarDirective.prototype.resize = function(scope) {
      var _ref;
      return (_ref = scope.echart) != null ? _ref.resize() : void 0;
    };

    CapacityRadarDirective.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2;
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.subtopic) != null) {
        _ref1.dispose();
      }
      return (_ref2 = scope.subscription) != null ? _ref2.dispose() : void 0;
    };

    return CapacityRadarDirective;

  })(base.BaseDirective);
  return exports = {
    CapacityRadarDirective: CapacityRadarDirective
  };
});
