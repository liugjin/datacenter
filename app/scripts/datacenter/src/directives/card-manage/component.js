// Generated by IcedCoffeeScript 108.0.12

/*
* File: card-manage-directive
* User: David
* Date: 2019/04/01
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CardManageDirective, exports;
  CardManageDirective = (function(_super) {
    __extends(CardManageDirective, _super);

    function CardManageDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "card-manage";
      CardManageDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CardManageDirective.prototype.setScope = function() {};

    CardManageDirective.prototype.setCSS = function() {
      return css;
    };

    CardManageDirective.prototype.setTemplate = function() {
      return view;
    };

    CardManageDirective.prototype.show = function(scope, element, attrs) {
      var ids;
      scope.cards = [];
      scope.cardArr = [];
      scope.peoplesselectoptions = [
        {
          id: '0',
          name: '请选择'
        }
      ];
      scope.sendCardOptions = [
        {
          id: '0',
          name: '请选择'
        }
      ];
      scope.currentcard = {};
      scope.cardType = {
        1: {
          type: '1',
          name: '普通卡'
        },
        2: {
          type: '2',
          name: '残疾人卡'
        },
        3: {
          type: '3',
          name: '黑名单卡'
        },
        4: {
          type: '4',
          name: '巡更卡'
        },
        5: {
          type: '5',
          name: '胁迫卡'
        },
        6: {
          type: '6',
          name: '超级卡'
        },
        7: {
          type: '7',
          name: '来宾卡'
        },
        8: {
          type: '8',
          name: '解除卡'
        },
        9: {
          type: '9',
          name: '员工卡'
        },
        10: {
          type: '10',
          name: '应急卡'
        },
        11: {
          type: '11',
          name: '应急管理卡'
        }
      };
      scope.cardstatus = {
        0: {
          type: '0',
          name: '挂失'
        },
        1: {
          type: '1',
          name: '正常'
        }
      };
      scope.cardSelected = false;
      console.log(scope.cardType);
      scope.data = {
        cardtype: '1',
        cardid: '',
        cardname: 'new-card-name',
        cardowner: '0',
        cardstatus: '1',
        registrationtime: moment().format("YYYY-MM-DD"),
        cardactiveendtime: moment().format("YYYY-MM-DD"),
        cardactivestarttime: moment().format("YYYY-MM-DD"),
        carddescribe: '',
        add: true,
        sendCard: '0'
      };
      this.datacenters = this.project.stations.roots;
      ids = {
        user: this.$routeParams.user,
        project: this.$routeParams.project
      };
      scope.user = ids.user;
      scope.project = ids.project;
      console.log(this.datacenters);
      this.datacenter = this.datacenters[0];
      console.log(this.datacenter);
      scope.selectStation = function(station) {
        console.log(station);
        scope.station = station;
        this.station = station;
        scope.data.user = this.station.model.user;
        scope.data.project = this.station.model.project;
        scope.data.station = this.station.model.station;
        scope.peoples = [];
        scope.cardEquips = [];
        return scope.station.loadEquipments({
          type: "access"
        }, null, (function(_this) {
          return function(err, equips) {
            if (err) {
              return;
            }
            equips.forEach(function(equip) {
              var a;
              if (equip != null) {
                equip.loadProperties();
              }
              if (equip.propertyValues['card-active-end-time'] !== void 0) {
                scope.cardEquips.push(equip);
              }
              if (equip.model.template === 'people_template') {
                a = {
                  id: equip.getPropertyValue('people-id'),
                  name: equip.getPropertyValue('people-name')
                };
                if (!scope.peoplesselectoptions.includes(a)) {
                  scope.peoplesselectoptions.push(a);
                }
                return scope.peoples.push(equip);
              }
            });
            console.log(scope.cardEquips);
            _.map(scope.cardEquips, function(card) {
              return scope.isCoverCard(card);
            });
            scope.cardEquips = scope.cardArr;
            scope.cardArr = [];
            return console.log(scope.cardArr);
          };
        })(this), true);
      };
      scope.selectStation(this.datacenter);
      scope.isCoverCard = function(card) {
        if (card.getPropertyValue('card-id') === scope.station.equipment.getPropertyValue('card-id')) {
          card = scope.station.equipment;
          return scope.cardArr.push(card);
        } else {
          return scope.cardArr.push(card);
        }
      };
      scope.getOwername = function(owerid) {
        var namestr, _ref;
        namestr = "";
        namestr = (_ref = _.find(scope.peoples, function(tmp) {
          return tmp.model.equipment === owerid;
        })) != null ? _ref.model.name : void 0;
        return namestr;
      };
      scope.selectCard = function(card) {
        scope.cardSelected = true;
        card.loadProperties();
        scope.data.cardtype = card.propertyValues['card-type'];
        scope.data.cardid = card.propertyValues['card-id'];
        scope.data.cardname = card.propertyValues['card-name'];
        scope.data.cardowner = card.propertyValues['card-owner'];
        scope.data.cardstatus = card.propertyValues['card-status'];
        scope.data.carddescribe = card.propertyValues['card-describe'];
        scope.data.registrationtime = card.propertyValues['registration-time'];
        scope.data.cardactivestarttime = card.propertyValues['card-active-start-time'];
        scope.data.cardactiveendtime = card.propertyValues['card-active-end-time'];
        scope.data.cardDoor = card.propertyValues['card-door'];
        scope.data.add = false;
        return scope.data.sendCard = '0';
      };
      scope.addCard = function(obj) {
        scope.cardSelected = false;
        if (obj != null) {
          return scope.data = obj;
        } else {
          return scope.data = {
            user: scope.data.user,
            project: scope.data.project,
            station: scope.data.station,
            cardtype: '1',
            cardid: '',
            cardname: 'new-card-name',
            cardowner: '0',
            cardstatus: '1',
            registrationtime: moment().format("YYYY-MM-DD"),
            cardactiveendtime: moment().format("YYYY-MM-DD"),
            cardactivestarttime: moment().format("YYYY-MM-DD"),
            carddescribe: '',
            add: true,
            sendCard: '0'
          };
        }
      };
      scope.saveEquipment = function(obj, callback) {
        var model;
        if (obj == null) {
          model = {
            user: scope.data.user,
            project: scope.data.project,
            station: scope.data.station,
            equipment: scope.data.cardid,
            name: scope.data.cardname,
            type: 'access',
            vendor: 'huayuan-iot',
            enable: true,
            template: 'card_template'
          };
          this.equipment = this.station.createEquipment(model, null);
          console.log(this.equipment);
          return this.equipment.loadProperties(null, (function(_this) {
            return function(err, data) {
              _this.equipment.setPropertyValue('card-id', scope.data.cardid);
              _this.equipment.setPropertyValue('card-name', scope.data.cardname);
              _this.equipment.setPropertyValue('card-type', scope.data.cardtype);
              _this.equipment.setPropertyValue('card-owner', scope.data.cardowner);
              _this.equipment.setPropertyValue('card-status', scope.data.cardstatus);
              _this.equipment.setPropertyValue('card-active-start-time', scope.data.cardactivestarttime);
              _this.equipment.setPropertyValue('card-active-end-time', scope.data.cardactiveendtime);
              _this.equipment.setPropertyValue('registration-time', scope.data.registrationtime);
              _this.equipment.setPropertyValue('card-describe', scope.data.carddescribe);
              _this.equipment.setPropertyValue('card-door', scope.data.cardDoor);
              _this.equipment.save(model);
              _this.station.save(_this.equipment);
              scope.selectStation(_this.station);
              console.log(_this.station);
              $('#door-card-modal').modal('close');
              return typeof callback === "function" ? callback(err, model) : void 0;
            };
          })(this));
        } else {
          this.equipment = obj;
          scope.selectStation(this.station);
          $('#equipment-modal-card').modal('close');
          return typeof callback === "function" ? callback(err, model) : void 0;
        }
      };
      scope.removeEquipment = (function(_this) {
        return function(card) {
          var message, title;
          card.loadProperties();
          scope.data.cardid = card.propertyValues['card-id'];
          _this.equipment = _.find(_this.datacenter.equipments.items, function(item) {
            console.log(item.model.equipment);
            console.log(scope.data.cardid);
            return item.model.equipment === scope.data.cardid;
          });
          console.log(_this.equipment);
          title = "删除设备确认: " + _this.equipment.model.name;
          message = "请确认是否删除设备: " + _this.equipment.model.name + "？删除后设备和数据将从系统中移除不可恢复！";
          return scope.prompt(title, message, function(ok) {
            var type;
            if (!ok) {
              return;
            }
            type = _this.equipment.model.type;
            return _this.equipment.remove(function(err, model) {
              scope.selectStation(scope.station);
              $('#door-card-modal').modal('close');
              return typeof callback === "function" ? callback(err, model) : void 0;
            });
          });
        };
      })(this);
      scope.removeStation = (function(_this) {
        return function(station) {
          var msg, title;
          title = station.model.name;
          msg = "";
          $('#station-manager-prompt-modal').modal('open');
          return scope.prompt(title, msg, function(ok) {
            if (!ok) {
              return;
            }
            if (ok) {
              if (station != null) {
                station.remove();
              }
              $('#station-manager-prompt-modal').modal('close');
              return loadStations();
            }
          });
        };
      })(this);
      scope.filterCard = function() {
        return (function(_this) {
          return function(equipment) {
            var text, _ref;
            text = (_ref = scope.search) != null ? _ref.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (equipment.model.equipment.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (equipment.model.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (equipment.propertyValues['card-owner'].toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (scope.cardType[equipment.propertyValues['card-type']].name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (scope.cardstatus[equipment.propertyValues['card-status']].name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            return false;
          };
        })(this);
      };
      return scope.sortBy = function(predicate) {
        if (scope.predicate === predicate) {
          return scope.reverse = !scope.reverse;
        } else {
          scope.predicate = predicate;
          return scope.reverse = true;
        }
      };
    };

    CardManageDirective.prototype.resize = function(scope) {};

    CardManageDirective.prototype.dispose = function(scope) {};

    return CardManageDirective;

  })(base.BaseDirective);
  return exports = {
    CardManageDirective: CardManageDirective
  };
});
