// Generated by IcedCoffeeScript 108.0.13

/*
* File: card-manager-directive
* User: bingo
* Date: 2019/04/09
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CardManagerDirective, exports;
  CardManagerDirective = (function(_super) {
    __extends(CardManagerDirective, _super);

    function CardManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "card-manager";
      CardManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CardManagerDirective.prototype.setScope = function() {};

    CardManagerDirective.prototype.setCSS = function() {
      return css;
    };

    CardManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    CardManagerDirective.prototype.show = function($scope, element, attrs) {
      var cardEquips, doorEquips, loadEquipmentsByType, peopleEquips, selectEquips, sendCards, value, _i, _len, _ref;
      element.css("display", "block");
      $scope.setting = setting;
      $scope.addImg = this.getComponentPath('image/add.svg');
      $scope.deleteImg = this.getComponentPath('image/delete.svg');
      $scope.editImg = this.getComponentPath('image/edit.svg');
      $scope.closeImg = this.getComponentPath('image/close.svg');
      $scope.refreshImg = this.getComponentPath('image/refresh.svg');
      $scope.saveImg = this.getComponentPath('image/save.svg');
      $scope.uploadImg = this.getComponentPath('image/upload.svg');
      $scope.linkImg = this.getComponentPath('image/link.svg');
      $scope.downImg = this.getComponentPath('image/download.svg');
      $scope.select = false;
      selectEquips = [];
      $scope.pageIndex = 1;
      $scope.pageItems = 10;
      $scope.cardEquips = [];
      $scope.sendCards = [];
      $scope.vendor = "hikvision";
      doorEquips = [];
      peopleEquips = [];
      cardEquips = [];
      sendCards = [];
      $scope.manufactorArr = [];
      $scope.manufacturer = $scope.project.typeModels.vendors.items;
      _ref = $scope.manufacturer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        $scope.manufactorObj = {
          name: null,
          vendor: null
        };
        $scope.manufactorObj.name = value.model.name;
        $scope.manufactorObj.vendor = value.model.vendor;
        $scope.manufactorArr.push($scope.manufactorObj);
      }
      $scope.project.loadEquipmentTemplates({
        template: "card_template"
      }, 'user project type vendor template name base index image', (function(_this) {
        return function(err, templates) {
          if (err || templates.length < 1) {
            return;
          }
          $scope.vendor = templates[0].model.vendor;
          return templates[0].loadProperties(null, function(err, properties) {
            if (err || properties.length < 1) {
              return;
            }
            return $scope.properties = properties;
          });
        };
      })(this));
      loadEquipmentsByType = (function(_this) {
        return function(refresh) {
          $scope.cardEquips = [];
          $scope.sendCards = [];
          doorEquips = [];
          peopleEquips = [];
          cardEquips = [];
          sendCards = [];
          return _.each($scope.stations, function(station) {
            return _this.commonService.loadEquipmentsByType(station, "access", function(err, equips) {
              _.each(equips, function(equip) {
                equip.loadProperties();
                if (equip.model.template.indexOf("door_") >= 0) {
                  doorEquips.push(equip);
                }
                if (equip.model.template.indexOf("people_") >= 0) {
                  peopleEquips.push(equip);
                }
                if (equip.model.template.indexOf("card_") >= 0) {
                  cardEquips.push(equip);
                }
                if (equip.model.template === 'card-sender') {
                  return sendCards.push(equip);
                }
              });
              $scope.peopleEquips = peopleEquips;
              $scope.cardEquips = cardEquips;
              return $scope.sendCards = sendCards;
            }, refresh);
          });
        };
      })(this);
      $scope.stations = this.commonService.loadStationChildren($scope.station, true);
      loadEquipmentsByType(true);
      $scope.selectPage = (function(_this) {
        return function(page) {
          return $scope.pageIndex = page;
        };
      })(this);
      $scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _j, _results;
          if (!$scope.cardEquips) {
            return;
          }
          items = [];
          items = _.filter($scope.cardEquips, function(equip) {
            var text, _ref1;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / $scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _j = 1; 1 <= pageCount ? _j <= pageCount : _j >= pageCount; 1 <= pageCount ? _j++ : _j--){ _results.push(_j); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      $scope.limitToEquipment = (function(_this) {
        return function() {
          var aa, result;
          if ($scope.filterEquipmentItem() && $scope.filterEquipmentItem().pageCount === $scope.pageIndex) {
            aa = $scope.filterEquipmentItem().items % $scope.pageItems;
            result = -(aa === 0 ? $scope.pageItems : aa);
          } else {
            result = -$scope.pageItems;
          }
          return result;
        };
      })(this);
      $scope.formatValue = (function(_this) {
        return function(propertyId, value) {
          var arr, i, property, val, _j, _len1;
          val = '';
          property = _.find($scope.properties, function(property) {
            return property.model.property === propertyId;
          });
          if (property) {
            arr = property.model.format.split(',');
            for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
              i = arr[_j];
              if (i.split(':')[0] === value) {
                val = i.split(':')[1];
              }
            }
          }
          return val;
        };
      })(this);
      $scope.getOweName = (function(_this) {
        return function(oweId) {
          var namesStr, _ref1;
          namesStr = "";
          namesStr = (_ref1 = _.find(peopleEquips, function(tmp) {
            return tmp.model.equipment === oweId;
          })) != null ? _ref1.model.name : void 0;
          return namesStr;
        };
      })(this);
      $scope.selectAll = (function(_this) {
        return function() {
          if ($scope.select) {
            _.each($scope.cardEquips, function(equip) {
              equip.checked = true;
              return selectEquips.push(equip.model.equipment);
            });
          } else {
            _.each($scope.cardEquips, function(equip) {
              equip.checked = false;
              return selectEquips = [];
            });
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.selectOne = (function(_this) {
        return function() {
          _.each($scope.cardEquips, function(equip) {
            var index;
            index = _.indexOf(selectEquips, equip.model.equipment);
            if (equip.checked && index === -1) {
              return selectEquips.push(equip.model.equipment);
            } else if (!equip.checked && index !== -1) {
              return selectEquips.splice(index, 1);
            }
          });
          if ($scope.cardEquips.length === selectEquips.length) {
            $scope.select = true;
          } else {
            $scope.select = false;
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.addEquip = (function(_this) {
        return function() {
          var model;
          model = {
            user: $scope.project.model.user,
            project: $scope.project.model.project,
            station: $scope.station.model.station,
            equipment: '',
            name: '',
            type: 'access',
            vendor: $scope.vendor,
            enable: true,
            template: 'card_template'
          };
          $scope.equipment = $scope.station.createEquipment(model, null);
          $scope.equipment.loadProperties();
          return $scope.refreshData();
        };
      })(this);
      $scope.deleteEquip = (function(_this) {
        return function(equip) {
          var message, station, title;
          $scope.equipment = equip;
          station = _.find($scope.stations, function(station) {
            return station.model.station === equip.model.station;
          });
          title = "删除设备确认: " + $scope.project.model.name + "/" + station.model.name + "/" + $scope.equipment.model.name;
          message = "请确认是否删除设备: " + $scope.project.model.name + "/" + station.model.name + "/" + $scope.equipment.model.name + "？删除后设备和数据将从系统中移除不可恢复！";
          return $scope.prompt(title, message, function(ok) {
            if (!ok) {
              return;
            }
            return $scope.equipment.remove(function(err, model) {
              return loadEquipmentsByType(true);
            });
          });
        };
      })(this);
      $scope.selectEquip = (function(_this) {
        return function(card) {
          $scope.equipment = card;
          $scope.currentCard = {};
          $scope.currentCard.cardType = card.propertyValues['card-type'];
          $scope.currentCard.cardId = card.propertyValues['card-id'];
          $scope.currentCard.cardName = card.propertyValues['card-name'];
          $scope.currentCard.cardOwner = card.propertyValues['card-owner'];
          $scope.currentCard.cardStatus = card.propertyValues['card-status'];
          $scope.currentCard.registrationTime = card.propertyValues['registration-time'];
          $scope.currentCard.cardActiveStartTime = card.propertyValues['card-active-start-time'];
          $scope.currentCard.cardActiveEndTime = card.propertyValues['card-active-end-time'];
          $scope.currentCard.cardDescribe = card.propertyValues['card-describe'];
          $scope.currentCard.cardDoor = card.propertyValues['card-door'];
          $scope.currentCard.add = false;
          $scope.currentCard.sendCard = '0';
          $scope.currentCard.vendor = card.model.vendor;
          return $scope.currentCard.station = card.model.station;
        };
      })(this);
      $scope.findProperty = (function(_this) {
        return function(propertyId) {
          var property;
          property = _.find($scope.properties, function(property) {
            return property.model.property === propertyId;
          });
          if (property) {
            return property;
          }
        };
      })(this);
      $scope.saveEquipment = (function(_this) {
        return function() {
          var card, message, title;
          if (!$scope.currentCard.cardId) {
            title = "ID不能为空";
            message = "ID不能为空，请获取ID。";
            return _this.display(title, message);
          }
          if (!$scope.currentCard.cardName) {
            title = "卡名称不能为空";
            message = "卡名称不能为空，请输入卡名称。";
            return _this.display(title, message);
          }
          if ($scope.currentCard.cardOwner === '0') {
            title = "持卡人不能为空";
            message = "持卡人不能为空，请选择持卡人。";
            return _this.display(title, message);
          }
          if ($scope.currentCard.add) {
            card = _.find(cardEquips, function(card) {
              return card.model.equipment === $scope.currentCard.cardId;
            });
            if (card) {
              title = "该卡已经存在";
              message = "该卡已经存在，请重新获取卡ID。";
              return _this.display(title, message);
            }
          }
          if (!$scope.currentCard.cardActiveStartTime) {
            title = "有效开始时间不能为空";
            message = "有效开始时间不能为空，请输入有效开始时间。";
            return _this.display(title, message);
          }
          if (!$scope.currentCard.cardActiveEndTime) {
            title = "有效结束时间不能为空";
            message = "有效结束时间不能为空，请输入有效开始时间。";
            return _this.display(title, message);
          }
          if ($scope.currentCard.cardActiveEndTime && $scope.currentCard.cardActiveStartTime && (moment($scope.currentCard.cardActiveEndTime) < moment($scope.currentCard.cardActiveStartTime))) {
            title = "有效结束时间应该晚于有效开始时间";
            message = "有效结束时间应该晚于有效开始时间，请重新输入";
            return _this.display(title, message);
          }
          if ($scope.currentCard.vendor === "0") {
            title = "设备厂商不能为空";
            message = "ID不能为空，请重新选择厂商";
            return _this.display(title, message);
          }
          if (!$scope.equipment.model.equipment) {
            $scope.equipment.model.equipment = $scope.currentCard.cardId;
          }
          $scope.equipment.model.name = $scope.currentCard.cardName;
          $scope.equipment.model.vendor = $scope.currentCard.vendor;
          $scope.equipment.model.station = $scope.currentCard.station;
          _.map($scope.equipment.properties.items, function(property) {
            if (property.model.property === "card-type") {
              property.value = $scope.currentCard.cardType;
            }
            if (property.model.property === "card-id") {
              property.value = $scope.currentCard.cardId;
            }
            if (property.model.property === "card-name") {
              property.value = $scope.currentCard.cardName;
            }
            if (property.model.property === "card-owner") {
              property.value = $scope.currentCard.cardOwner;
            }
            if (property.model.property === "card-status") {
              property.value = $scope.currentCard.cardStatus;
            }
            if (property.model.property === "registration-time") {
              property.value = $scope.currentCard.registrationTime;
            }
            if (property.model.property === "card-active-start-time") {
              property.value = $scope.currentCard.cardActiveStartTime;
            }
            if (property.model.property === "card-active-end-time") {
              property.value = $scope.currentCard.cardActiveEndTime;
            }
            if (property.model.property === "card-describe") {
              property.value = $scope.currentCard.cardDescribe;
            }
            if (property.model.property === "card-door") {
              return property.value = $scope.currentCard.cardDoor;
            }
          });
          return $scope.equipment.save(function(err, model) {
            $scope.closeModal();
            return loadEquipmentsByType(true);
          });
        };
      })(this);
      $scope.closeModal = (function(_this) {
        return function() {
          return $('#door-card-modal').modal('close');
        };
      })(this);
      $scope.refreshData = (function(_this) {
        return function() {
          return $scope.currentCard = {
            cardType: '1',
            cardId: '',
            cardName: 'new-card-name',
            cardOwner: '0',
            cardStatus: '1',
            registrationTime: moment().format("YYYY-MM-DD"),
            cardActiveStartTime: moment().format("YYYY-MM-DD"),
            cardActiveEndTime: moment().format("YYYY-MM-DD"),
            cardDescribe: '',
            add: true,
            sendCard: '0',
            vendor: '0',
            station: $scope.station.model.station
          };
        };
      })(this);
      $scope.selectSendCard = (function(_this) {
        return function() {
          var currentSendCard;
          currentSendCard = _.find(sendCards, function(send) {
            return send.model.equipment === $scope.currentCard.sendCard;
          });
          if (currentSendCard) {
            return currentSendCard.loadSignals(null, function(err, signals) {
              var getCardSignal, _ref1;
              if (err || signals.leader < 1) {
                return;
              }
              getCardSignal = _.find(signals, function(signal) {
                return signal.model.signal === "getCardID";
              });
              if (getCardSignal) {
                if ((_ref1 = $scope.getCardSubscribe) != null) {
                  _ref1.dispose();
                }
                return $scope.getCardSubscribe = _this.commonService.subscribeSignalValue(getCardSignal, function(signal) {
                  var len;
                  if (!signal || signal.data.value === "-") {
                    return;
                  }
                  $scope.currentCard.cardId = signal.data.value;
                  len = signal.data.value.length;
                  while (len < 10) {
                    signal.data.value = "0" + signal.data.value;
                    len++;
                  }
                  return $scope.currentCard.cardId = signal.data.value;
                });
              }
            });
          }
        };
      })(this);
      $scope.getCardNumber = (function(_this) {
        return function() {
          var currentSendCard;
          currentSendCard = _.find(sendCards, function(send) {
            return send.model.equipment === $scope.currentCard.sendCard;
          });
          if (!currentSendCard) {
            _this.display("请选择发卡器！");
            return;
          }
          return currentSendCard != null ? currentSendCard.loadCommands(null, function(err, commands) {
            var getCardNum, _ref1;
            if (err || commands.length < 1) {
              return;
            }
            getCardNum = _.find(commands, function(cmd) {
              return cmd.model.command === "card";
            });
            if (!getCardNum) {
              _this.display("模板配置错误，未找到控制命令！");
              return;
            }
            _this.executeCommand($scope, getCardNum);
            if ((_ref1 = $scope.commandSub) != null) {
              _ref1.dispose();
            }
            return $scope.commandSub = _this.commonService.subscribeCommandValue(getCardNum, function(cmd) {
              var len;
              if (cmd.data.phase === "executing") {
                return;
              }
              if (cmd.data.phase === "complete" && cmd.data.command === "card") {
                len = cmd.data.result.length;
                while (len < 10) {
                  cmd.data.result = "0" + cmd.data.result;
                  len++;
                }
                return $scope.currentCard.cardId = cmd.data.result;
              }
            });
          }) : void 0;
        };
      })(this);
      return $scope.filterCard = (function(_this) {
        return function() {
          return function(card) {
            var text, _ref1, _ref2, _ref3, _ref4;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (card.model.equipment.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (card.model.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (((_ref2 = $scope.getOweName(card.getPropertyValue('card-owner'))) != null ? _ref2.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref3 = $scope.formatValue('card-type', card.getPropertyValue('card-type'))) != null ? _ref3.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref4 = $scope.formatValue('card-status', card.getPropertyValue('card-status'))) != null ? _ref4.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
    };

    CardManagerDirective.prototype.resize = function($scope) {};

    CardManagerDirective.prototype.dispose = function($scope) {
      var _ref, _ref1;
      if ((_ref = $scope.commandSub) != null) {
        _ref.dispose();
      }
      return (_ref1 = $scope.getCardSubscribe) != null ? _ref1.dispose() : void 0;
    };

    return CardManagerDirective;

  })(base.BaseDirective);
  return exports = {
    CardManagerDirective: CardManagerDirective
  };
});
