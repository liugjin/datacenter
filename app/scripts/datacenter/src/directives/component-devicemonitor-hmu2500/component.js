// Generated by IcedCoffeeScript 108.0.13

/*
* File: component-devicemonitor-hmu2500-directive
* User: David
* Date: 2020/05/30
* Desc:
 */
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", './models/paging-model', './modules/signal-manager', './modules/event-manager', './modules/command-manager', 'tripledes'], function(base, css, view, _, moment, pm, sm, em, cm, CryptoJS) {
  var ComponentDevicemonitorHmu2500Directive, exports;
  ComponentDevicemonitorHmu2500Directive = (function(_super) {
    var sortFunction;

    __extends(ComponentDevicemonitorHmu2500Directive, _super);

    function ComponentDevicemonitorHmu2500Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.querySignalRecords = __bind(this.querySignalRecords, this);
      this.subscribeSignalStatistics = __bind(this.subscribeSignalStatistics, this);
      this.updateDuration = __bind(this.updateDuration, this);
      this.processSignalData = __bind(this.processSignalData, this);
      this.subscribeSignals = __bind(this.subscribeSignals, this);
      this.show = __bind(this.show, this);
      this.id = "component-devicemonitor-hmu2500";
      ComponentDevicemonitorHmu2500Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.currStation = null;
      this.currEquipment = null;
    }

    ComponentDevicemonitorHmu2500Directive.prototype.setScope = function() {};

    ComponentDevicemonitorHmu2500Directive.prototype.setCSS = function() {
      return css;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.setTemplate = function() {
      return view;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1;
      scope.tapFlag = 'overview';
      scope.fullscreen = (function(_this) {
        return function(element) {
          var el, exit, height, theight, twidth, width, xoffset, yoffset;
          if (!element) {
            return;
          }
          if (typeof element === 'string') {
            el = angular.element(element);
            element = el[0];
          }
          exit = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
          if (exit) {
            if (document.exitFullscreen) {
              return document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
              return document.webkitExitFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            } else if (document.mozExitFullScreen) {
              return document.mozExitFullScreen();
            } else if (document.msExitFullscreen) {
              return document.msExitFullscreen();
            }
          } else {
            if (element.requestFullscreen) {
              element.requestFullscreen();
            } else if (element.webkitRequestFullscreen) {
              element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            } else if (element.mozRequestFullScreen) {
              element.mozRequestFullScreen();
            } else if (element.msRequestFullscreen) {
              element.msRequestFullscreen();
            }
            width = $("#snap-svg-canvas").width();
            height = $("#snap-svg-canvas").height();
            twidth = scope.controller.player.engine.template.propertyValues.width;
            theight = scope.controller.player.engine.template.propertyValues.height;
            if (width / height > twidth / theight) {
              xoffset = (width - twidth) / 2;
              yoffset = 0;
            } else {
              xoffset = 0;
              yoffset = height - theight;
            }
            return _this.pan(xoffset, yoffset, scope);
          }
        };
      })(this);
      this.eventSeverities = (_ref = scope.project) != null ? _ref.typeModels.eventseverities : void 0;
      scope.signals = this.signals = null;
      scope.events = this.events = null;
      scope.commands = this.commands = null;
      this.project = scope.project;
      scope.signalManager = this.signalManager = new sm.SignalManager({}, this.commonService.reportingService);
      scope.eventManager = this.eventManager = new em.EventManager({}, this.commonService.reportingService);
      scope.commandManager = this.commandManager = new cm.CommandManager({}, this.commonService.reportingService);
      scope.searchSignal = this.searchSignal = null;
      scope.searchEvent = this.searchEvent = null;
      scope.searchCommand = this.searchCommand = null;
      this.eventManager.eventSeverities = this.eventSeverities;
      this.signalManager.eventSeverities = this.eventSeverities;
      scope.signalValues = this.signalValues = null;
      scope.signalSetting = this.signalSetting = null;
      scope.signalValue = this.signalValue = null;
      this.$routeParams.tab = null;
      scope.setTab = function(tab, manual) {
        var _ref1, _ref2;
        if (tab == null) {
          tab = (_ref1 = (_ref2 = this.$routeParams) != null ? _ref2.tab : void 0) != null ? _ref1 : scope.equipment_tab;
        }
        if (this.tab === tab) {
          return;
        }
        this.tab = tab;
        scope.tapFlag = tab;
        scope.equipment_tab = tab;
        return this.loadTabData(tab);
      };
      scope.signalTrend = (function(_this) {
        return function(signalObj) {
          _this.commonService.publishEventBus('signalId', {
            signalId: {
              signal: signalObj.model.signal,
              name: signalObj.model.name
            }
          });
          return scope.setTab("chart");
        };
      })(this);
      scope.loadTabData = (function(_this) {
        return function(tab) {
          var _ref1, _ref2;
          if (tab == null) {
            tab = (_ref1 = (_ref2 = _this.tab) != null ? _ref2 : _this.$routeParams.tab) != null ? _ref1 : scope.equipment_tab;
          }
          if (!tab) {
            tab = 'signals';
          }
          switch (tab) {
            case 'signals':
              return _this.loadSignals(_this.currEquipment, function(err, model) {
                return _this.subscribeSignals(_this.currEquipment);
              }, false);
            case 'events':
              return _this.loadEvents(_this.currEquipment, function(err, model) {
                return _this.subscribeEvents(_this.currEquipment);
              }, false);
            case 'commands':
              return _this.loadCommands(_this.currEquipment, function(err, model) {
                return _this.subscribeCommands(_this.currEquipment);
              }, false);
          }
        };
      })(this);
      scope.filterSignal = (function(_this) {
        return function() {
          return function(signal) {
            var text;
            if (_this.signalGroup && signal.model.group !== _this.signalGroup) {
              return false;
            }
            text = scope.searchSignal;
            if (!text) {
              return true;
            }
            if (signal.model.signal.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (signal.model.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
      scope.queryToExecuteCommand = function(command) {
        if (command == null) {
          command = this.command;
        }
        return this.queryToExecuting = true;
      };
      scope.queryToCancelCommand = function(command) {
        if (command == null) {
          command = this.command;
        }
        return this.queryToExecuting = true;
      };
      scope.selectSignal = (function(_this) {
        return function(signal) {
          var _ref1;
          scope.signal = _this.signal = signal;
          if (((_ref1 = signal.model) != null ? _ref1.dataType : void 0) === 'float') {
            _this.queryRecentSignalRecords(signal);
          }
          _this.querySignalRecords(signal);
          return true;
        };
      })(this);
      scope.selectEvent = (function(_this) {
        return function(event) {
          scope.event = _this.event = event;
          _this.queryEventRecords(event);
          return true;
        };
      })(this);
      scope.selectCommand = (function(_this) {
        return function(command) {
          scope.command = _this.command = command;
          scope.stopQueryExecuting();
          _this.queryCommandRecords(command);
          return true;
        };
      })(this);
      scope.selectPreviousSignal = function() {
        var index, items;
        items = this.currEquipment.signals.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.signal) + 1;
        if (index >= items.length) {
          return;
        }
        return this.selectSignal(items[index]);
      };
      scope.selectNextSignal = function() {
        var index, items;
        items = this.currEquipment.signals.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.signal) - 1;
        if (index < 0) {
          return;
        }
        return this.selectSignal(items[index]);
      };
      scope.selectPreviousEvent = function() {
        var index, items;
        items = this.currEquipment.events.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.event) + 1;
        if (index >= items.length) {
          return;
        }
        return this.selectEvent(items[index]);
      };
      scope.selectNextEvent = function() {
        var index, items;
        items = this.currEquipment.events.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.event) - 1;
        if (index < 0) {
          return;
        }
        return this.selectEvent(items[index]);
      };
      scope.selectPreviousCommand = function() {
        var index, items;
        items = this.currEquipment.commands.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.command) + 1;
        if (index >= items.length) {
          return;
        }
        return this.selectCommand(items[index]);
      };
      scope.selectNextCommand = function() {
        var index, items;
        items = this.currEquipment.commands.items;
        if (!items.length) {
          return;
        }
        index = items.indexOf(this.command) - 1;
        if (index < 0) {
          return;
        }
        return this.selectCommand(items[index]);
      };
      scope.saveSignalInstance = function(signal, callback) {
        var data, evt, id, instance, model, signals, _i, _len;
        model = signal.model;
        instance = signal.instance;
        signals = this.currEquipment.model.signals;
        if (signals == null) {
          signals = [];
        }
        this.currEquipment.model.signals = signals;
        id = model.signal;
        data = null;
        for (_i = 0, _len = signals.length; _i < _len; _i++) {
          evt = signals[_i];
          if (evt.id === id) {
            data = evt;
            break;
          }
        }
        if (data) {
          if (data.signal == null) {
            data.signal = {};
          }
          if (instance.name !== model.name) {
            data.signal.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.signal.enable = instance.enable;
          }
        } else {
          data = {
            id: id,
            signal: {}
          };
          if (instance.name !== model.name) {
            data.signal.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.signal.enable = instance.enable;
          }
          signals.push(data);
        }
        return this.currEquipment.save(function(err, model) {
          return typeof callback === "function" ? callback(err, model) : void 0;
        });
      };
      scope.saveEventInstance = function(event, callback) {
        var data, events, evt, id, instance, model, _i, _len;
        model = event.model;
        instance = event.instance;
        events = this.currEquipment.model.events;
        if (events == null) {
          events = [];
        }
        this.currEquipment.model.events = events;
        id = model.event;
        data = null;
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          evt = events[_i];
          if (evt.id === id) {
            data = evt;
            break;
          }
        }
        if (data) {
          if (data.event == null) {
            data.event = {};
          }
          if (instance.name !== model.name) {
            data.event.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.event.enable = instance.enable;
          }
        } else {
          data = {
            id: id,
            event: {}
          };
          if (instance.name !== model.name) {
            data.event.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.event.enable = instance.enable;
          }
          events.push(data);
        }
        return this.currEquipment.save(function(err, model) {
          return typeof callback === "function" ? callback(err, model) : void 0;
        });
      };
      scope.saveCommandInstance = function(command, callback) {
        var commands, data, evt, id, instance, model, _i, _len;
        model = command.model;
        instance = command.instance;
        commands = this.currEquipment.model.commands;
        if (commands == null) {
          commands = [];
        }
        this.currEquipment.model.commands = commands;
        id = model.command;
        data = null;
        for (_i = 0, _len = commands.length; _i < _len; _i++) {
          evt = commands[_i];
          if (evt.id === id) {
            data = evt;
            break;
          }
        }
        if (data) {
          if (data.command == null) {
            data.command = {};
          }
          if (instance.name !== model.name) {
            data.command.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.command.enable = instance.enable;
          }
        } else {
          data = {
            id: id,
            command: {}
          };
          if (instance.name !== model.name) {
            data.command.name = instance.name;
          }
          if (instance.enable !== model.enable) {
            data.command.enable = instance.enable;
          }
          commands.push(data);
        }
        return this.currEquipment.save(function(err, model) {
          return typeof callback === "function" ? callback(err, model) : void 0;
        });
      };
      scope.confirmEquipmentEvents = (function(_this) {
        return function(equipment, forceToEnd) {
          var action, message, title;
          action = forceToEnd ? "强制结束" : "确认";
          title = "" + action + "设备所有告警: " + equipment.station.model.name + " / " + equipment.model.name;
          message = "请输入备注信息：";
          return scope.prompt(title, message, function(ok, comment) {
            if (!ok) {
              return;
            }
            return _this.confirmEquipmentEvents2(equipment, comment, forceToEnd);
          }, true);
        };
      })(this);
      scope.confirmEquipmentEvent = (function(_this) {
        return function(event, forceToEnd) {
          var action, message, title;
          if (!event) {
            return;
          }
          action = forceToEnd ? "强制结束" : "确认";
          title = "" + action + "设备告警: " + event.station.model.name + " / " + event.equipment.model.name + " / " + event.model.name;
          message = "请输入备注信息：";
          return scope.prompt(title, message, function(ok, comment) {
            if (!ok) {
              return;
            }
            return _this.confirmEquipmentEvent2(event, comment, forceToEnd);
          }, true, event.data.comment);
        };
      })(this);
      scope.stopQueryExecuting = function() {
        this.queryToExecuting = false;
        return this.commandError = null;
      };
      scope.doExecuteCommand = (function(_this) {
        return function(command) {
          if (command == null) {
            command = _this.command;
          }
          if (command.model.password) {
            return _this.validateCommandPassword(function(err) {
              if (err) {
                return;
              }
              scope.stopQueryExecuting();
              return _this.executeCommand2(command);
            });
          } else {
            scope.stopQueryExecuting();
            return _this.executeCommand2(command);
          }
        };
      })(this);
      scope.doCancelCommand = (function(_this) {
        return function(command) {
          if (command == null) {
            command = _this.command;
          }
          if (!scope.queryToExecuting) {
            return;
          }
          if (command.model.password) {
            return _this.validateCommandPassword(function(err) {
              if (err) {
                return;
              }
              scope.stopQueryExecuting();
              return _this.cancelCommand2(command);
            });
          } else {
            scope.stopQueryExecuting();
            return _this.cancelCommand2(command);
          }
        };
      })(this);
      scope.setTab(null, true);
      scope.sortDataVal = function(item) {
        if (_.isEmpty(item.data)) {
          return 0;
        } else {
          return 1;
        }
      };
      if ((_ref1 = this.subStationEquipId) != null) {
        _ref1.dispose();
      }
      return this.subStationEquipId = this.commonService.subscribeEventBus('equipmentId', (function(_this) {
        return function(d) {
          var filter, stationResult;
          _this.resetEquipment();
          if (d) {
            if (d.message.equipmentId.station) {
              stationResult = _.filter(scope.project.stations.items, function(item) {
                return item.model.station === d.message.equipmentId.station;
              });
              if (stationResult.length > 0) {
                _this.currStation = stationResult[0];
                filter = scope.project.getIds();
                filter.equipment = d.message.equipmentId.equipment;
                return _this.currStation.loadEquipments(filter, null, function(err, equipDatas) {
                  if (equipDatas) {
                    scope.currEquipment = _this.currEquipment = equipDatas[0];
                    return scope.loadTabData(scope.equipment_tab);
                  }
                });
              }
            }
          }
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.confirmEquipmentEvent2 = function(event, comment, forceToEnd) {
      var data;
      data = event.getIds();
      this.confirmData(data, comment, forceToEnd);
      return this.commonService.eventLiveSession.confirmAllEvents(data);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.confirmData = function(data, comment, forceToEnd) {
      data.operator = this.$window.$controller.$rootScope.user.user;
      data.operatorName = this.$window.$controller.$rootScope.user.name;
      data.confirmTime = new Date;
      data.comment = comment;
      data.forceToEnd = forceToEnd;
      return data;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.confirmEquipmentEvents2 = function(equipment, comment, forceToEnd) {
      var data;
      data = equipment.getIds();
      this.confirmData(data, comment, forceToEnd);
      return this.commonService.eventLiveSession.confirmAllEvents(data);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.executeCommand2 = function(command, comment) {
      var data, model, parameters;
      model = command.model;
      parameters = command.getParameterValues();
      data = command.getIds();
      data.priority = model.priority;
      data.phase = 'executing';
      data.parameters = parameters;
      data.startTime = new Date;
      data.endTime = null;
      data.result = null;
      data.trigger = 'user';
      data.operator = this.$window.$controller.$rootScope.user.user;
      data.operatorName = this.$window.$controller.$rootScope.user.name;
      data.comment = comment != null ? comment : model.comment;
      return this.commonService.commandLiveSession.executeCommand(data);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.cancelCommand2 = function(command, comment) {
      var data, k, v, _ref;
      if (!command._data) {
        return;
      }
      data = {};
      _ref = command._data;
      for (k in _ref) {
        v = _ref[k];
        data[k] = v;
      }
      data.phase = 'cancel';
      data.trigger = 'user';
      data.endTime = new Date;
      data.operator = this.$window.$controller.$rootScope.user.user;
      data.operatorName = this.$window.$controller.$rootScope.user.name;
      data.comment = comment != null ? comment : command.model.comment;
      return this.commonService.commandLiveSession.executeCommand(data);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.resetEquipment = function() {
      this.currProperties = null;
      this.currSignals = null;
      this.currEvents = null;
      this.currCommands = null;
      this.currEquipment = null;
      this.activeEvents = {};
      return this.equipmentStatistic = null;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.loadSignals = function(equipment, callback, refresh) {
      var fields, instances, sgl, signals, _i, _len;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment) {
        return callback('null equipment');
      }
      instances = {};
      signals = equipment.model.signals;
      if (signals) {
        for (_i = 0, _len = signals.length; _i < _len; _i++) {
          sgl = signals[_i];
          instances[sgl.id] = sgl.signal;
        }
      }
      equipment.signalInstances = instances;
      fields = null;
      return equipment.loadSignals(fields, (function(_this) {
        return function(err, model) {
          var signal, _j, _len1;
          _this.signals = model;
          if (model) {
            for (_j = 0, _len1 = model.length; _j < _len1; _j++) {
              signal = model[_j];
              _this.initializeSignal(signal, equipment);
            }
          }
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.loadEvents = function(equipment, callback, refresh) {
      var events, evt, fields, instances, _i, _len;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment) {
        return callback('null equipment');
      }
      instances = {};
      events = equipment.model.events;
      if (events) {
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          evt = events[_i];
          instances[evt.id] = evt.event;
        }
      }
      equipment.eventInstances = instances;
      fields = null;
      return equipment.loadEvents(fields, (function(_this) {
        return function(err, model) {
          var event, _j, _len1;
          _this.events = model;
          if (model) {
            for (_j = 0, _len1 = model.length; _j < _len1; _j++) {
              event = model[_j];
              _this.initializeEvent(event, equipment);
            }
          }
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.loadCommands = function(equipment, callback, refresh) {
      var cmd, commands, fields, instances, _i, _len;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment) {
        return callback('null equipment');
      }
      instances = {};
      commands = equipment.model.commands;
      if (commands) {
        for (_i = 0, _len = commands.length; _i < _len; _i++) {
          cmd = commands[_i];
          instances[cmd.id] = cmd.command;
        }
      }
      equipment.commandInstances = instances;
      fields = null;
      return equipment.loadCommands(fields, (function(_this) {
        return function(err, model) {
          var command, _j, _len1;
          _this.commands = model;
          if (model) {
            for (_j = 0, _len1 = model.length; _j < _len1; _j++) {
              command = model[_j];
              _this.initializeCommand(command, equipment);
            }
          }
          return typeof callback === "function" ? callback(err, model) : void 0;
        };
      })(this), refresh);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.initializeSignal = function(signal, equipment) {
      var instance, _ref, _ref1;
      if (equipment == null) {
        equipment = this.equipment;
      }
      instance = (_ref = equipment.signalInstances[signal.model.signal]) != null ? _ref : {};
      if (instance.name == null) {
        instance.name = signal.model.name;
      }
      if (instance.enable == null) {
        instance.enable = signal.model.enable;
      }
      signal.instance = instance;
      return signal.unit = (_ref1 = this.project.typeModels.signaltypes.getItem(signal.model.unit)) != null ? _ref1.model : void 0;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.initializeEvent = function(event, equipment) {
      var instance, _ref;
      if (equipment == null) {
        equipment = this.equipment;
      }
      instance = (_ref = equipment.eventInstances[event.model.event]) != null ? _ref : {};
      if (instance.name == null) {
        instance.name = event.model.name;
      }
      if (instance.enable == null) {
        instance.enable = event.model.enable;
      }
      return event.instance = instance;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.initializeCommand = function(command, equipment) {
      var instance, _ref;
      if (equipment == null) {
        equipment = this.equipment;
      }
      instance = (_ref = equipment.commandInstances[command.model.command]) != null ? _ref : {};
      if (instance.name == null) {
        instance.name = command.model.name;
      }
      if (instance.enable == null) {
        instance.enable = command.model.enable;
      }
      return command.instance = instance;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.subscribeSignals = function(equipment) {
      var filter, model, _ref;
      if (!equipment || this.equipmentOfSignalsSubscription === equipment) {
        return;
      }
      this.equipmentOfSignalsSubscription = equipment;
      equipment.signals.predicate = "data.severity";
      equipment.signals.reverse = true;
      model = equipment.model;
      filter = {
        user: model.user,
        project: model.project,
        station: model.station,
        equipment: model.equipment
      };
      if ((_ref = this.signalSubscription) != null) {
        _ref.dispose();
      }
      return this.signalSubscription = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var signal;
          if (!d) {
            return;
          }
          signal = _this.project.getSignalByTopic(d.topic);
          if (signal) {
            signal.setValue(d.message);
            _this.processSignalData(signal.data);
            if (signal === _this.signal) {
              return _this.signalValue = d.message;
            }
          }
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.processSignalData = function(data) {
      var severity, _ref, _ref1;
      severity = (_ref = this.eventSeverities.getItem(data.severity)) != null ? _ref.model : void 0;
      if (!severity) {
        data.color = data.severity < 0 ? 'grey' : 'green';
        data.tooltip = data.severity;
        data.newFormatValue = data.severity === -1 ? '' : data.formatValue;
      } else {
        data.color = (_ref1 = severity.color) != null ? _ref1 : severity.severity < 0 && 'grey' || 'green';
        data.tooltip = "" + severity.name + "(" + severity.severity + ")";
        data.newFormatValue = data.formatValue;
      }
      return data.eventSeverity = severity;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.updateDuration = function(scope) {
      return scope.timer = setInterval((function(_this) {
        return function() {
          var event, key, progress, startEvent, _ref;
          if (_this.activeEvents) {
            _ref = _this.activeEvents;
            for (key in _ref) {
              startEvent = _ref[key];
              if (!(!startEvent.data.endTime)) {
                continue;
              }
              event = startEvent.data;
              event.duration = new Date() - event.startTime2;
              progress = (event.duration / _this.eventExpectedDuration * 100).toFixed(1);
              event.progress = "" + progress + "%";
            }
          }
          return scope.$applyAsync();
        };
      })(this), 1000);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.subscribeSignalStatistics = function(equipment) {
      var filter, model, _ref;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment || this.equipmentOfSignalStatisticsSubscription === equipment) {
        return;
      }
      this.equipmentOfSignalStatisticsSubscription = equipment;
      model = equipment.model;
      filter = {
        user: model.user,
        project: model.project,
        station: model.station,
        equipment: model.equipment
      };
      if ((_ref = this.signalStatisticSubscription) != null) {
        _ref.dispose();
      }
      return this.signalStatisticSubscription = this.commonService.signalStatisticLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var data, signal, topic;
          if (!d) {
            return;
          }
          topic = d.topic.substr(0, d.topic.lastIndexOf('/'));
          signal = _this.project.getSignalByStatisticTopic(topic);
          if (signal) {
            if (signal.statistics == null) {
              signal.statistics = {};
            }
            data = d.message;
            return signal.statistics[data.mode] = data;
          }
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.subscribeEvents = function(equipment) {
      var filter, model, _ref;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment || this.equipmentOfEventsSubscription === equipment) {
        return;
      }
      this.equipmentOfEventsSubscription = equipment;
      equipment.events.predicate = "data.startValue";
      equipment.events.reverse = false;
      model = equipment.model;
      filter = {
        user: model.user,
        project: model.project,
        station: model.station,
        equipment: model.equipment
      };
      if ((_ref = this.eventSubscription) != null) {
        _ref.dispose();
      }
      return this.eventSubscription = this.commonService.eventLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var event;
          if (!d) {
            return;
          }
          event = _this.project.getEventByTopic(d.topic);
          if (event) {
            event.setValue(d.message);
            _this.processEventData(event.data);
            return _this.processActiveEvent(event);
          }
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.processEventData = function(event) {
      var endTime, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      event.updateTime = (_ref = (_ref1 = event.endTime) != null ? _ref1 : event.confirmTime) != null ? _ref : event.startTime;
      event.eventSeverity = (_ref2 = this.eventSeverities.getItem(event.severity)) != null ? _ref2.model : void 0;
      event.color = (_ref3 = (_ref4 = event.eventSeverity) != null ? _ref4.color : void 0) != null ? _ref3 : 'grey';
      event.tooltip = "" + ((_ref5 = (_ref6 = event.eventSeverity) != null ? _ref6.name : void 0) != null ? _ref5 : '正常状态') + " " + event.phase;
      endTime = event.endTime ? new Date(event.endTime) : new Date;
      event.duration = endTime - new Date(event.startTime);
      return event.startTime2 = new Date(event.startTime);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.processActiveEvent = function(event) {
      var count, eventSeverity, evt, id, severity, _ref;
      id = event.model._id;
      if (event.phase === 'completed') {
        delete this.activeEvents[id];
      } else {
        this.activeEvents[id] = event;
      }
      count = 0;
      severity = -1;
      _ref = this.activeEvents;
      for (id in _ref) {
        evt = _ref[id];
        count++;
        if (severity < evt.data.severity) {
          severity = evt.data.severity;
          eventSeverity = evt.data.eventSeverity;
        }
      }
      this.equipmentStatistic = {
        severity: eventSeverity,
        count: count
      };
    };

    ComponentDevicemonitorHmu2500Directive.prototype.subscribeCommands = function(equipment) {
      var filter, model, _ref;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment || this.equipmentOfCommandsSubscription === equipment) {
        return;
      }
      this.equipmentOfCommandsSubscription = equipment;
      model = equipment.model;
      filter = {
        user: model.user,
        project: model.project,
        station: model.station,
        equipment: model.equipment
      };
      if ((_ref = this.oneSubscription) != null) {
        _ref.dispose();
      }
      return this.oneSubscription = this.commonService.commandLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, d) {
          var command;
          if (!d) {
            return;
          }
          command = _this.project.getCommandByTopic(d.topic);
          if (command) {
            return command.setValue(d.message);
          }
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.queryRecentSignalRecords = function(signal) {
      var data, filter, paging, sorting;
      if (!signal) {
        return;
      }
      filter = signal.getIds();
      paging = {
        page: 1,
        pageItems: 20
      };
      sorting = {
        timestamp: -1
      };
      this.parameters = {
        filter: filter,
        queryTime: moment(),
        paging: paging,
        sorting: sorting
      };
      data = {
        filter: filter,
        fields: null,
        paging: paging,
        sorting: sorting
      };
      this.signalRecordsParameters = {
        signal: signal,
        queryTime: new Date
      };
      this.signalValues = null;
      this.signalSetting = null;
      this.signalValue = null;
      return this.commonService.reportingService.querySignalGroupRecords(data, (function(_this) {
        return function(err, records) {
          var key, m, record, s, svs, title, _i, _len, _ref, _ref1;
          if (records.hasOwnProperty(signal.key)) {
            for (key in records) {
              record = records[key];
              _ref = record.values;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _this.processSignalData(s);
              }
            }
            _this.signalValues = records;
          } else {
            m = signal.model;
            svs = {};
            svs[signal.key] = {
              user: m.user,
              project: m.project,
              station: m.station,
              equipment: m.equipment,
              signal: m.signal,
              values: []
            };
            _this.signalValues = svs;
          }
          title = "实时数据曲线 / " + signal.model.name;
          if ((_ref1 = signal.unit) != null ? _ref1.unit : void 0) {
            title = "" + title + "(" + signal.unit.unit + ")";
          }
          return _this.signalSetting = {
            title: title,
            yScale: _this.yScale
          };
        };
      })(this));
    };

    ComponentDevicemonitorHmu2500Directive.prototype.querySignalRecords = function(signal) {
      return this.signalManager.queryRecords(signal);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.queryEventRecords = function(event) {
      return this.eventManager.queryRecords(event);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.queryCommandRecords = function(command) {
      return this.commandManager.queryRecords(command);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.processCommandData = function(data) {
      var p, parameters, parameters3, _i, _len, _ref;
      parameters = {};
      parameters3 = '';
      if (data.parameters) {
        _ref = data.parameters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          parameters[p.key] = p.value;
          parameters3 += "" + p.key + "=" + p.value + "; ";
        }
      }
      data.parameters3 = parameters3;
      if (data.trigger === 'user') {
        data.triggerName = data.operatorName;
      } else {
        data.triggerName = data.trigger;
      }
      return data;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.clearSignalRecords = function() {
      this.signalRecords.setItems([]);
      return this.signalRecordsParameters = {};
    };

    ComponentDevicemonitorHmu2500Directive.prototype.clearEventRecords = function() {
      this.eventRecords.setItems([]);
      return this.eventRecordsParameters = {};
    };

    ComponentDevicemonitorHmu2500Directive.prototype.clearCommandRecords = function() {
      this.commandRecords.setItems([]);
      return this.commandRecordsParameters = {};
    };

    ComponentDevicemonitorHmu2500Directive.prototype.loadEquipmentGraphic = function(equipment, refresh) {
      var graphic, templateId;
      if (equipment == null) {
        equipment = this.equipment;
      }
      if (!equipment) {
        return;
      }
      graphic = equipment.getTemplateValue('graphic');
      if (graphic) {
        templateId = {
          user: this.$routeParams.user,
          project: this.$routeParams.project,
          template: graphic
        };
        if (refresh) {
          templateId.timestamp = new Date;
        }
        this.templateId = templateId;
      } else {
        this.templateId = null;
      }
      return this.directive = equipment.getTemplateValue('directive');
    };

    ComponentDevicemonitorHmu2500Directive.prototype.connect = function(data, callback) {
      var url;
      if (this.connectService == null) {
        this.connectService = this.modelManager.getService('connect');
      }
      url = this.connectService.getUrl(data);
      return this.connectService.postData(url, data, callback);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.filterEquipment = function() {
      return (function(_this) {
        return function(equipment) {
          var text;
          if (_this.group && equipment.model.group !== _this.group) {
            return false;
          }
          text = _this.search;
          if (!text) {
            return true;
          }
          if (equipment.model.equipment.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          if (equipment.model.name.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.selectSignalGroup = function(group) {
      return this.signalGroup = group;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.filterEvent = function() {
      return (function(_this) {
        return function(event) {
          var text;
          if (_this.eventGroup && event.model.group !== _this.eventGroup) {
            return false;
          }
          text = _this.searchEvent;
          if (!text) {
            return true;
          }
          if (event.model.event.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          if (event.model.name.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.selectEventGroup = function(group) {
      return this.eventGroup = group;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.filterCommand = function() {
      return (function(_this) {
        return function(command) {
          var text;
          if (_this.commandGroup && command.model.group !== _this.commandGroup) {
            return false;
          }
          text = _this.searchCommand;
          if (!text) {
            return true;
          }
          if (command.model.command.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          if (command.model.name.toLowerCase().indexOf(text) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.selectCommandGroup = function(group) {
      return this.commandGroup = group;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.validateCommandPassword = function(callback) {
      var authService, data, username;
      if (this.password) {
        authService = this.modelManager.getService('validatePassword');
        username = this.$rootScope.user.user;
        data = {
          username: username,
          password: this.encrypt(this.password, username)
        };
        return authService.get(data, (function(_this) {
          return function(err, result) {
            _this.commandError = err || !(result != null ? result.token : void 0) ? '密码验证失败，请重新输入有效用户密码！' : null;
            return typeof callback === "function" ? callback(_this.commandError) : void 0;
          };
        })(this));
      } else {
        this.commandError = "请输入有效用户密码！";
        return typeof callback === "function" ? callback(this.commandError) : void 0;
      }
    };

    ComponentDevicemonitorHmu2500Directive.prototype.encrypt = function(value, key) {
      var encryptedValue;
      return encryptedValue = CryptoJS.DES.encrypt(value, key).toString();
    };

    ComponentDevicemonitorHmu2500Directive.prototype.decrypt = function(encryptedValue, key) {
      var value;
      value = CryptoJS.DES.decrypt(encryptedValue, key);
      return value = CryptoJS.enc.Utf8.stringify(value);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.moreMessage = function() {
      this.isMore = !this.isMore;
      if (this.isMore) {
        return this.info = '隐藏信息';
      } else {
        return this.info = '更多信息';
      }
    };

    ComponentDevicemonitorHmu2500Directive.prototype.saveValue = function(value) {
      return this.oldValue = value;
    };

    ComponentDevicemonitorHmu2500Directive.prototype.checkValue = function(value) {
      if (this.oldValue === value) {

      } else {
        return this.saveEquipment();
      }
    };

    ComponentDevicemonitorHmu2500Directive.prototype.setYScale = function() {
      var k, setting, v, _ref;
      setting = {};
      _ref = this.signalSetting;
      for (k in _ref) {
        v = _ref[k];
        setting[k] = v;
      }
      setting.yScale = this.yScale;
      this.signalSetting = setting;
      return this.modelEngine.storage.set('yScale', this.yScale);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.resize = function(scope) {
      return this.$timeout((function(_this) {
        return function() {
          if ($("#graphicparamter").width() > 1600) {
            return $("component-devicemonitor .graphic-height-equipment .box-content").css("height", "94vh");
          } else {
            return $("component-devicemonitor .graphic-height-equipment .box-content").css("height", "");
          }
        };
      })(this), 0);
    };

    ComponentDevicemonitorHmu2500Directive.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = this.subStationEquipId) != null) {
        _ref.dispose();
      }
      if ((_ref1 = this.signalSubscription) != null) {
        _ref1.dispose();
      }
      this.signalManager.dispose();
      this.eventManager.dispose();
      this.commandManager.dispose();
      return clearInterval(scope.timer);
    };

    sortFunction = function(a, b) {
      var aIndex, bIndex, sortList;
      sortList = ['ups', '空调', '机柜'];
      aIndex = sortList.indexOf(a.name);
      bIndex = sortList.indexOf(b.name);
      if (aIndex === -1) {
        aIndex = 999;
      }
      if (bIndex === -1) {
        bIndex = 999;
      }
      if (aIndex < bIndex) {
        return -1;
      } else if (aIndex > bIndex) {
        return 1;
      } else if (aIndex === bIndex) {
        return 0;
      }
    };

    ComponentDevicemonitorHmu2500Directive.prototype.pan = function(dx, dy, scope) {
      return setTimeout((function(_this) {
        return function() {
          var _ref, _ref1;
          return (_ref = scope.controller.player.renderer) != null ? (_ref1 = _ref.transformControl) != null ? _ref1.pan(dx, dy) : void 0 : void 0;
        };
      })(this), 800);
    };

    return ComponentDevicemonitorHmu2500Directive;

  })(base.BaseDirective);
  return exports = {
    ComponentDevicemonitorHmu2500Directive: ComponentDevicemonitorHmu2500Directive
  };
});
