// Generated by IcedCoffeeScript 108.0.13

/*
* File: component-pie-directive
* User: James
* Date: 2019/04/18
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts", "jquery.ui"], function(base, css, view, _, moment, echarts) {
  var ComponentPieDirective, exports;
  ComponentPieDirective = (function(_super) {
    __extends(ComponentPieDirective, _super);

    function ComponentPieDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "component-pie";
      ComponentPieDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ComponentPieDirective.prototype.setScope = function() {};

    ComponentPieDirective.prototype.setCSS = function() {
      return css;
    };

    ComponentPieDirective.prototype.setTemplate = function() {
      return view;
    };

    ComponentPieDirective.prototype.show = function(scope, element, attrs) {
      var chartelement, createChartOption, _ref;
      if ((_ref = this.menuSubscribe) != null) {
        _ref.dispose();
      }
      this.menuSubscribe = this.subscribeEventBus('menuState', (function(_this) {
        return function(d) {
          return _this.$timeout(function() {
            var _ref1;
            return (_ref1 = _this.mychart) != null ? _ref1.resize() : void 0;
          }, 0);
        };
      })(this));
      scope.chartValue = scope.parameters.chartValue;
      this.mychart = null;
      chartelement = element.find('.chart-pie');
      this.mychart = echarts.init(chartelement[0]);
      this.oldclickdata = null;
      this.mychart.on('click', (function(_this) {
        return function(params) {
          var _ref1;
          if (scope.parameters.legendNames) {
            if (params.name !== _this.oldclickdata) {
              _this.oldclickdata = params.name;
              if ((_.indexOf(scope.parameters.legendNames, params.name)) >= 0) {
                return (_ref1 = _this.commonService) != null ? _ref1.publishEventBus('task-process-statics', {
                  data: params.name
                }) : void 0;
              }
            }
          }
        };
      })(this));
      createChartOption = (function(_this) {
        return function(resscope, value) {
          var colorCount, data, legendColors, legendata, option, serialdata, sortValue, tooltipformatter, valItem, _i, _len;
          sortValue = [];
          if ((value != null ? value.length : void 0) > 0) {
            sortValue = _.sortBy(value, function(vItem) {
              return vItem.orderid;
            });
          }
          data = [];
          legendColors = [
            {
              startcolor: "#db115b",
              stopcolor: "#ff5c00"
            }, {
              startcolor: "#62a89d",
              stopcolor: "#a7d68d"
            }, {
              startcolor: "#5597fc",
              stopcolor: "#7edfd7"
            }
          ];
          if (!_.isEmpty(scope.parameters.piecolors)) {
            legendColors = scope.parameters.piecolors;
          }
          legendata = [];
          colorCount = 0;
          for (_i = 0, _len = sortValue.length; _i < _len; _i++) {
            valItem = sortValue[_i];
            legendata.push(valItem.name);
            serialdata = {
              value: valItem.value,
              name: valItem.name,
              itemStyle: {
                normal: {
                  color: {
                    colorStops: [
                      {
                        offset: 0,
                        color: legendColors[colorCount].startcolor
                      }, {
                        offset: 1,
                        color: legendColors[colorCount].stopcolor
                      }
                    ]
                  }
                },
                label: {
                  show: false
                },
                labelLine: {
                  show: false
                }
              }
            };
            colorCount++;
            data.push(serialdata);
            tooltipformatter = "{a} <br/>{b}: {c} ({d}%)";
          }
          option = {
            title: {
              text: scope.parameters.centertitle || "",
              x: 'center',
              y: 'center',
              textStyle: {
                fontWeight: 'normal',
                color: '#e6283f',
                fontSize: '16'
              }
            },
            tooltip: {
              trigger: 'item',
              formatter: tooltipformatter
            },
            legend: {
              orient: 'horizontal',
              x: 'center',
              bottom: '5%',
              data: legendata,
              itemGap: 22,
              textStyle: {
                color: '#fff'
              }
            },
            series: [
              {
                name: scope.parameters.title,
                type: 'pie',
                radius: ['35%', '50%'],
                itemStyle: {
                  normal: {
                    label: {
                      show: true,
                      color: "white",
                      formatter: '{b} : {c} ({d}%)'
                    },
                    labelLine: {
                      show: true
                    }
                  }
                },
                hoverAnimation: true,
                data: data
              }
            ]
          };
          return option;
        };
      })(this);
      return scope.$watch("chartValue", (function(_this) {
        return function(data) {
          var options, _ref1;
          if (!data) {
            return;
          }
          if ((_ref1 = _this.mychart) != null) {
            _ref1.clear();
          }
          options = createChartOption(scope, data);
          return _this.mychart.setOption(options);
        };
      })(this), true);
    };

    ComponentPieDirective.prototype.resize = function(scope) {
      return this.$timeout((function(_this) {
        return function() {
          var _ref;
          return (_ref = _this.mychart) != null ? _ref.resize() : void 0;
        };
      })(this), 0);
    };

    ComponentPieDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = this.mychart) != null ? _ref.dispose() : void 0;
    };

    return ComponentPieDirective;

  })(base.BaseDirective);
  return exports = {
    ComponentPieDirective: ComponentPieDirective
  };
});
