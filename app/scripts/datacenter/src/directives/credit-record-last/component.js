// Generated by IcedCoffeeScript 108.0.13

/*
* File: credit-record-last-directive
* User: bingo
* Date: 2019/03/27
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CreditRecordLastDirective, exports;
  CreditRecordLastDirective = (function(_super) {
    __extends(CreditRecordLastDirective, _super);

    function CreditRecordLastDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "credit-record-last";
      CreditRecordLastDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CreditRecordLastDirective.prototype.setScope = function() {};

    CreditRecordLastDirective.prototype.setCSS = function() {
      return css;
    };

    CreditRecordLastDirective.prototype.setTemplate = function() {
      return view;
    };

    CreditRecordLastDirective.prototype.show = function($scope, element, attr) {
      var doorEquip, getCardOwner, getOpenDoorResult, loadEquipmentsByType, openDoorResults, queryCreditSignal, simpleData, _ref;
      if (!$scope.firstload) {
        return;
      }
      element.css("display", "block");
      $scope.setting = setting;
      openDoorResults = [
        {
          result: 1,
          name: '开门成功'
        }, {
          result: 2,
          name: '无效的用户卡刷卡'
        }, {
          result: 3,
          name: '用户卡的有效期已过'
        }, {
          result: 4,
          name: '当前时间用户卡无进入权限'
        }
      ];
      $scope.equipments = null;
      doorEquip = [];
      $scope.peopleEquip = [];
      $scope.cardEquip = [];
      $scope.project.loadStations(null, (function(_this) {
        return function(err, stations) {
          if (err || stations.length < 1) {
            return;
          }
          return $scope.stations = stations;
        };
      })(this));
      if ((_ref = $scope.subBus) != null) {
        _ref.dispose();
      }
      $scope.subBus = this.subscribeEventBus('stationId', (function(_this) {
        return function(d) {
          return _this.commonService.loadStation(d.message.stationId, function(err, station) {
            return $scope.station = station;
          });
        };
      })(this));
      $scope.$watch("station", (function(_this) {
        return function(station) {
          if (!station) {
            return;
          }
          return loadEquipmentsByType(function() {
            return queryCreditSignal();
          });
        };
      })(this));
      $scope.loadAllUsers = (function(_this) {
        return function() {
          var fields, filter, userService;
          userService = _this.commonService.modelEngine.modelManager.getService('users');
          filter = {};
          fields = null;
          return userService.query(filter, fields, function(err, data) {
            if (!err) {
              return $scope.userMsg = data;
            }
          });
        };
      })(this);
      $scope.loadAllUsers();
      loadEquipmentsByType = (function(_this) {
        return function(callback) {
          var getStationEquipment, mods;
          $scope.equipments = null;
          doorEquip = [];
          mods = [];
          getStationEquipment = function(station, callback) {
            var err, mod, sta, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref1;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            _ref1 = station.stations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              getStationEquipment(sta);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "F:\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\credit-record-last\\component.coffee"
              });
              _this.commonService.loadEquipmentsByType(station, "access", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return mod = arguments[1];
                  };
                })(),
                lineno: 69
              }), false);
              __iced_deferrals._fulfill();
            })(function() {
              mods = mods.concat(mod);
              return typeof callback === "function" ? callback(mods) : void 0;
            });
          };
          return getStationEquipment($scope.station, function(equips) {
            $scope.equipments = equips;
            _.each(equips, function(equip) {
              equip.loadProperties();
              if (equip.model.template.indexOf("door_") >= 0) {
                doorEquip.push(equip);
              }
              if (equip.model.template.indexOf("people_") >= 0) {
                $scope.peopleEquip.push(equip);
              }
              if (equip.model.template.indexOf("card_") >= 0) {
                return $scope.cardEquip.push(equip);
              }
            });
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this);
      queryCreditSignal = (function(_this) {
        return function() {
          var data, filter;
          $scope.currentCreditInfo = null;
          filter = $scope.station.getIds();
          filter.station = {
            $in: _.map(_this.commonService.loadStationChildren($scope.station, true), function(sta) {
              return sta.model.station;
            })
          };
          filter.signal = "credit-card-info";
          filter.mode = "threshold";
          filter.startTime = moment().startOf('day').subtract(7, 'days');
          data = {
            filter: filter,
            fields: null
          };
          return _this.commonService.reportingService.querySignalRecords(data, function(err, records) {
            var filterRecords;
            if (err || records.length < 1) {
              return;
            }
            filterRecords = [];
            _.map(records, function(record) {
              var currentDoor;
              if (typeof record.value === "string") {
                record.value = JSON.parse(record.value);
              }
              currentDoor = _.find(doorEquip, function(equip) {
                return equip.model.equipment === record.equipment;
              });
              if (currentDoor && currentDoor.getPropertyValue("door-id") === record.value.door) {
                if (!(_.contains(filterRecords, record))) {
                  return filterRecords.push(record);
                }
              }
            });
            return simpleData(filterRecords);
          });
        };
      })(this);
      getOpenDoorResult = (function(_this) {
        return function(result) {
          var openDoorName, openDoorResult;
          openDoorResult = _.find(openDoorResults, function(item) {
            return item.result === result;
          });
          if (openDoorResult) {
            openDoorName = openDoorResult.name;
          } else {
            openDoorName = '未知';
          }
          return openDoorName;
        };
      })(this);
      getCardOwner = function(cardNo) {
        var equip, equipName, userEquip, userId;
        equipName = '未知';
        equip = _.find($scope.cardEquip, (function(_this) {
          return function(equip) {
            return equip.model.equipment === cardNo;
          };
        })(this));
        if (equip) {
          userId = equip.getPropertyValue('card-owner');
          userEquip = _.find($scope.peopleEquip, (function(_this) {
            return function(equip) {
              return equip.model.equipment === userId;
            };
          })(this));
          if (userEquip) {
            equipName = userEquip.model.name;
          }
        }
        return equipName;
      };
      return simpleData = (function(_this) {
        return function(records) {
          var dataRecords;
          $scope.creditRecords = null;
          $scope.currentCreditInfo = null;
          if (records.length < 1) {
            return;
          }
          dataRecords = [];
          _.map(records, function(data) {
            var ownerobj, usernamestr, _ref1, _ref2;
            if (data.value.cardNo === 0) {
              ownerobj = _.find($scope.userMsg, function(userobj) {
                return userobj.user === data.value.operator;
              });
              usernamestr = ownerobj != null ? ownerobj.name : void 0;
            } else {
              usernamestr = getCardOwner(data.value.cardNo);
            }
            return dataRecords.push({
              station: data.station,
              equipment: data.equipment,
              signal: data.signal,
              cardNo: data.value.cardNo,
              cardOwner: usernamestr,
              result: getOpenDoorResult(data.value.result),
              timestamp: moment(data.timestamp).format("YYYY-MM-DD HH:mm:ss"),
              stationName: ((_ref1 = _.find($scope.stations, function(station) {
                return data.station === station.model.station;
              })) != null ? _ref1.model.name : void 0) || "",
              equipmentName: ((_ref2 = _.find($scope.equipments, function(equip) {
                return (data.equipment === equip.model.equipment) && (data.station === equip.model.station);
              })) != null ? _ref2.model.name : void 0) || ""
            });
          });
          $scope.creditRecords = (_.sortBy(dataRecords, function(record) {
            return record.timestamp;
          })).reverse();
          return $scope.currentCreditInfo = $scope.creditRecords[0];
        };
      })(this);
    };

    CreditRecordLastDirective.prototype.resize = function($scope) {};

    CreditRecordLastDirective.prototype.dispose = function($scope) {
      var _ref;
      return (_ref = $scope.subBus) != null ? _ref.dispose() : void 0;
    };

    return CreditRecordLastDirective;

  })(base.BaseDirective);
  return exports = {
    CreditRecordLastDirective: CreditRecordLastDirective
  };
});
