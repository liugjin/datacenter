// Generated by IcedCoffeeScript 108.0.13

/*
* File: custom-header-directive
* User: David
* Date: 2019/02/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var CustomHeaderDirective, exports;
  CustomHeaderDirective = (function(_super) {
    __extends(CustomHeaderDirective, _super);

    function CustomHeaderDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "custom-header";
      CustomHeaderDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CustomHeaderDirective.prototype.setScope = function() {
      return {
        name: '=',
        subtitle: '='
      };
    };

    CustomHeaderDirective.prototype.setCSS = function() {
      return css;
    };

    CustomHeaderDirective.prototype.setTemplate = function() {
      return view;
    };

    CustomHeaderDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1;
      scope.parameters.name = (_ref = (_ref1 = scope.parameters.name) != null ? _ref1 : scope.project.model.setting.name) != null ? _ref : "实时监控平台";
      return scope.fullscreen = (function(_this) {
        return function() {
          if (document.webkitIsFullScreen) {
            return document.webkitExitFullscreen();
          } else {
            $('#container').addClass("full-screen");
            return document.getElementById("container").webkitRequestFullScreen();
          }
        };
      })(this);
    };

    CustomHeaderDirective.prototype.resize = function(scope) {};

    CustomHeaderDirective.prototype.dispose = function(scope) {};

    return CustomHeaderDirective;

  })(base.BaseDirective);
  return exports = {
    CustomHeaderDirective: CustomHeaderDirective
  };
});
