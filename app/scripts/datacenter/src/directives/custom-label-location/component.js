// Generated by IcedCoffeeScript 108.0.12

/*
* File: custom-label-location-directive
* User: David
* Date: 2020/04/24
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "rx"], function(base, css, view, _, moment, Rx) {
  var CustomLabelLocationDirective, exports;
  CustomLabelLocationDirective = (function(_super) {
    __extends(CustomLabelLocationDirective, _super);

    function CustomLabelLocationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.baocun = __bind(this.baocun, this);
      this.getDeviceSpecialSignal = __bind(this.getDeviceSpecialSignal, this);
      this.loadSignals = __bind(this.loadSignals, this);
      this.loadProperties = __bind(this.loadProperties, this);
      this.getSensor = __bind(this.getSensor, this);
      this.show = __bind(this.show, this);
      this.id = "custom-label-location";
      CustomLabelLocationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    CustomLabelLocationDirective.prototype.setScope = function() {};

    CustomLabelLocationDirective.prototype.setCSS = function() {
      return css;
    };

    CustomLabelLocationDirective.prototype.setTemplate = function() {
      return view;
    };

    CustomLabelLocationDirective.prototype.show = function(scope, element, attrs) {
      console.log("scope", scope.station);
      this.token = scope.controller.$rootScope.user.token;
      this.userId = scope.project.model.user;
      this.projectId = scope.project.model.project;
      this.host = this.$window.origin;
      this.Rx = new Rx.Subject;
      this.Rx.debounce(100).subscribe((function(_this) {
        return function() {
          return _this.display("保存成功");
        };
      })(this));
      scope.equips = [];
      scope.equipSubscription = {};
      scope.x = 0;
      scope.y = 0;
      scope.l = 0;
      scope.t = 0;
      scope.isDown = false;
      scope.editStatus = false;
      console.log("321", $(element).find(".humiture-box"));
      scope.ulWidth = $(element).find(".humiture-box").width();
      scope.ulHeight = $(element).find(".humiture-box").height();
      scope.box = null;
      scope.equip = null;
      scope.editName = "编辑";
      this.getSensor(scope);
      scope.edit = (function(_this) {
        return function() {
          scope.editStatus = !scope.editStatus;
          if (!scope.editStatus) {
            scope.editName = "编辑";
            scope.isDown = false;
            console.log('scope.equips', scope.equips);
            return _this.baocun(scope);
          } else {
            return scope.editName = "保存";
          }
        };
      })(this);
      scope.mouseDown = (function(_this) {
        return function(e, index) {
          scope.label = $(element).find(".humiture-label");
          scope.liWidth = scope.label.width();
          scope.liHeight = scope.label.height();
          scope.x = e.clientX;
          scope.y = e.clientY;
          scope.box = scope.label[index];
          scope.box.style.cursor = 'move';
          scope.l = scope.box.offsetLeft;
          scope.t = scope.box.offsetTop;
          if (scope.editStatus) {
            return scope.isDown = true;
          }
        };
      })(this);
      scope.mouseup = (function(_this) {
        return function(index, equip) {
          var event, key;
          scope.isDown = false;
          scope.box.style.cursor = "pointer";
          scope.equip = equip;
          event = scope.project.getIds();
          key = "" + event.user + "." + event.project + "." + scope.station.model.station + "." + scope.equip.model.equipment + ".position";
          return _.each(scope.equip.properties.items, function(properties) {
            if (properties.key === key) {
              return properties.value = scope.box.style.cssText;
            }
          });
        };
      })(this);
      return scope.mousemove = (function(_this) {
        return function(e) {
          var height, nl, nt, nx, ny, width;
          if (!scope.isDown) {
            return;
          }
          nx = e.clientX;
          ny = e.clientY;
          nl = nx - (scope.x - scope.l);
          nt = ny - (scope.y - scope.t);
          width = scope.ulWidth - 34;
          height = scope.ulHeight - scope.liHeight - 20;
          if (nl <= 0) {
            scope.box.style.left = 10 + 'px';
          } else if (nl >= width) {
            scope.box.style.left = width + 'px';
          } else if (nl > 0 && nl < width) {
            scope.box.style.left = nl + 'px';
          }
          if (nt <= 0) {
            return scope.box.style.top = 10 + 'px';
          } else if (nt >= height) {
            return scope.box.style.top = height + 'px';
          } else if (nt > 0 && nt < height) {
            return scope.box.style.top = nt + 'px';
          }
        };
      })(this);
    };

    CustomLabelLocationDirective.prototype.getSensor = function(scope) {
      return this.commonService.loadEquipmentsByType(scope.station, "environmental", (function(_this) {
        return function(err, equips) {
          if (equips && equips.length > 0) {
            return _.each(equips, function(equip) {
              return _this.loadProperties(scope, equip);
            });
          }
        };
      })(this));
    };

    CustomLabelLocationDirective.prototype.loadProperties = function(scope, equip) {
      var event, key;
      event = scope.project.getIds();
      key = "" + event.user + "." + event.project + "." + scope.station.model.station + "." + equip.model.equipment + ".position";
      return equip.loadProperties(null, (function(_this) {
        return function(err, data) {
          return _.each(data, function(properties) {
            if (properties.key === key && properties.model.template === "temperature_humidity_template") {
              scope.equips.push(equip);
              _this.loadSignals(scope, equip);
              return equip.model.position = properties.value;
            }
          });
        };
      })(this), true);
    };

    CustomLabelLocationDirective.prototype.loadSignals = function(scope, equip) {
      return equip.loadSignals(null, (function(_this) {
        return function(err, signals) {
          if (signals && signals.length > 0) {
            return _.each(signals, function(signal) {
              if (signal.model.signal === "temperature") {
                _this.getDeviceSpecialSignal(scope, equip, signal);
              }
              if (signal.model.signal === "humidity") {
                return _this.getDeviceSpecialSignal(scope, equip, signal);
              }
            });
          }
        };
      })(this));
    };

    CustomLabelLocationDirective.prototype.getDeviceSpecialSignal = function(scope, equip, sig) {
      var filter, _ref;
      filter = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        station: scope.station.model.station,
        equipment: equip.model.equipment,
        signal: sig.model.signal
      };
      if ((_ref = scope.equipSubscription[equip.model.equipment + "." + sig.model.signal]) != null) {
        _ref.dispose();
      }
      return scope.equipSubscription[equip.model.equipment + "." + sig.model.signal] = this.commonService.signalLiveSession.subscribeValues(filter, (function(_this) {
        return function(err, signal) {
          if (signal && signal.message) {
            if (sig != null) {
              sig.setValue(signal.message);
            }
            if (equip.model.equipment === signal.message.equipment) {
              return equip.model[signal.message.signal] = signal.message.value;
            }
          }
        };
      })(this));
    };

    CustomLabelLocationDirective.prototype.baocun = function(scope) {
      return _.each(scope.equips, (function(_this) {
        return function(equip) {
          var key, newLocation;
          key = "" + _this.userId + "." + _this.projectId + "." + equip.model.station + "." + equip.model.equipment + ".position";
          newLocation = _.find(equip.properties.items, function(item) {
            return item.key === key;
          });
          return _this.commonService.modelEngine.modelManager.$http.get("" + _this.host + "/model/clc/api/v1/equipments/" + _this.userId + "/" + _this.projectId + "/" + equip.model.station + "/" + equip.model.equipment + "?token=" + _this.token).then(function(res) {
            var equipment, locationProperty, postObj;
            equipment = res.data;
            locationProperty = _.find(equipment.properties, function(item) {
              return item.id === 'position';
            });
            if (_.isEmpty(locationProperty)) {
              equipment.properties.push({
                id: "position",
                value: newLocation.value
              });
            } else {
              if (locationProperty != null) {
                locationProperty.value = newLocation.value;
              }
            }
            postObj = {
              _id: equip.model._id,
              token: _this.token,
              properties: equipment.properties
            };
            return _this.commonService.modelEngine.modelManager.$http.post("" + _this.host + "/model/clc/api/v1/equipments/" + _this.userId + "/" + _this.projectId + "/" + equip.model.station + "/" + equip.model.equipment, postObj).then(function(res) {
              return _this.Rx.onNext();
            });
          });
        };
      })(this));
    };

    CustomLabelLocationDirective.prototype.resize = function(scope) {};

    CustomLabelLocationDirective.prototype.dispose = function(scope) {
      return _.map(scope.equipSubscription, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return CustomLabelLocationDirective;

  })(base.BaseDirective);
  return exports = {
    CustomLabelLocationDirective: CustomLabelLocationDirective
  };
});
