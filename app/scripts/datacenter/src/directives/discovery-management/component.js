// Generated by IcedCoffeeScript 108.0.11

/*
* File: discovery-management-directive
* User: David
* Date: 2020/01/13
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DiscoveryManagementDirective, exports;
  DiscoveryManagementDirective = (function(_super) {
    __extends(DiscoveryManagementDirective, _super);

    function DiscoveryManagementDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.find = __bind(this.find, this);
      this.filter = __bind(this.filter, this);
      this.discovery = __bind(this.discovery, this);
      this.getAllEquipments = __bind(this.getAllEquipments, this);
      this.show = __bind(this.show, this);
      this.id = "discovery-management";
      DiscoveryManagementDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DiscoveryManagementDirective.prototype.setScope = function() {
      return {
        filter: '='
      };
    };

    DiscoveryManagementDirective.prototype.setCSS = function() {
      return css;
    };

    DiscoveryManagementDirective.prototype.setTemplate = function() {
      return view;
    };

    DiscoveryManagementDirective.prototype.show = function(scope, element, attrs) {
      scope.list = [];
      scope.mus = sessionStorage.getItem("discovery");
      scope.mus = scope.mus ? JSON.parse(scope.mus) : {};
      scope.status = {};
      this.getAllEquipments(scope, (function(_this) {
        return function(equips) {
          var filter;
          scope.equipments = equips;
          scope.unlinkEquipments = _.filter(equips, function(equip) {
            var _ref;
            return equip.model.sampleUnits.length === 0 || _.isEmpty((_ref = equip.model.sampleUnits[0]) != null ? _ref.value : void 0);
          });
          filter = JSON.parse(JSON.stringify(scope.parameters.filter));
          return scope.project.loadEquipmentTemplates(filter, null, function(err, templates) {
            var _ref;
            templates = _.filter(templates, function(template) {
              var _ref;
              return template.model.type.substr(0, 1) !== "_" && template.model.template.substr(0, 1) !== "_" && ((_ref = template.model.template) !== "facility_base" && _ref !== "It-base");
            });
            if (!err) {
              scope.templates = templates;
            }
            scope.name = templates.length > 1 ? "设备" : (_ref = templates[0]) != null ? _ref.model.name : void 0;
            return _this.discovery(scope);
          });
        };
      })(this));
      scope.addEquipment = (function(_this) {
        return function(item) {
          var template, _ref, _ref1, _ref2, _ref3;
          scope.item = item;
          template = item.template;
          scope.candidates = _.filter(scope.unlinkEquipments, function(equip) {
            return equip.model.type === template.model.type && equip.model.vendor === template.model.vendor && equip.model.template === template.model.template;
          });
          scope.method = ((_ref = scope.candidates) != null ? _ref.length : void 0) > 0 ? 'link' : 'create';
          scope.equipment = (_ref1 = scope.station) != null ? _ref1.createEquipment({
            type: template.model.type,
            vendor: template.model.vendor,
            template: template.model.template
          }, null) : void 0;
          scope.equipment.model.equipment = template.model.type === "rack" ? item.mu : item.mu + "_" + item.su;
          scope.equipment.model.name = item.template.model.name + scope.equipment.model.equipment;
          if (template.model.type === "rack") {
            scope.equipment.loadProperties(null, function(err, properties) {
              return scope.equipment.setPropertyValue("has-u-locator", "1");
            });
          }
          scope.equipment.model.typeName = (_ref2 = _.find(scope.project.dictionary.equipmenttypes.items, function(item) {
            return item.model.type === template.model.type;
          })) != null ? _ref2.model.name : void 0;
          scope.equipment.model.vendorName = (_ref3 = _.find(scope.project.dictionary.vendors.items, function(item) {
            return item.model.vendor === template.model.vendor;
          })) != null ? _ref3.model.name : void 0;
          scope.equipment.loadEquipmentTemplate(null, function(err, template) {
            var id, keys, mu, su;
            keys = _.keys(scope.equipment.sampleUnits);
            if ((keys != null ? keys.length : void 0) === 1) {
              id = template.model.type === "rack" ? item.mu : item.mu + "/" + item.su;
              return scope.equipment.sampleUnits[keys[0]].value = id;
            } else if ((keys != null ? keys.length : void 0) > 1) {
              su = _.find(keys, function(s) {
                return s.indexOf('su') >= 0;
              });
              if (!su) {
                su = keys[0];
              }
              scope.equipment.sampleUnits[su].value = item.mu + "/" + item.su;
              mu = _.find(keys, function(s) {
                return s.indexOf('mu') >= 0;
              });
              if (mu) {
                return scope.equipment.sampleUnits[mu].value = item.mu + "/_";
              }
            }
          });
          scope.modal = M.Modal.getInstance($("#add-equipment-modal"));
          scope.modal.open();
          return scope.$applyAsync();
        };
      })(this);
      scope.selectLinkEquipment = function(value) {
        var equipment;
        equipment = _.find(scope.candidates, function(equip) {
          return equip.key === value;
        });
        if (equipment != null) {
          equipment.loadEquipmentTemplate(null, (function(_this) {
            return function(err, template) {
              var id, keys, mu, su;
              keys = _.keys(equipment.sampleUnits);
              if ((keys != null ? keys.length : void 0) === 1) {
                id = template.model.type === "rack" ? scope.element.mu : scope.element.mu + "/" + scope.element.su;
                return equipment.sampleUnits[keys[0]].value = id;
              } else if ((keys != null ? keys.length : void 0) > 1) {
                su = _.find(keys, function(s) {
                  return s.indexOf('su') >= 0;
                });
                if (!su) {
                  su = keys[0];
                }
                equipment.sampleUnits[su].value = scope.element.mu + "/" + scope.element.su;
                mu = _.find(keys, function(s) {
                  return s.indexOf('mu') >= 0;
                });
                if (mu) {
                  return equipment.sampleUnits[mu].value = scope.element.mu + "/_";
                }
              }
            };
          })(this));
        }
        return scope.linkEquipment = equipment;
      };
      return scope.saveEquipment = (function(_this) {
        return function() {
          if (scope.method === "link") {
            scope.equipment = scope.linkEquipment;
          }
          return scope.equipment.save(function(err, equip) {
            if (err) {
              _this.display("新增设备失败，因为：" + err);
            }
            scope.modal.close();
            return _this.getAllEquipments(scope, function(equips) {
              scope.equipments = equips;
              return scope.list.splice(scope.list.indexOf(scope.item), 1);
            });
          });
        };
      })(this);
    };

    DiscoveryManagementDirective.prototype.getAllEquipments = function(scope, callback) {
      var equipments, filter, i, station, _i, _len, _ref, _results;
      equipments = [];
      i = 0;
      _ref = scope.project.stations.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        filter = JSON.parse(JSON.stringify(scope.parameters.filter));
        _results.push(station.loadEquipments(filter, null, function(err, equips) {
          equips = _.filter(equips, function(equip) {
            return equip.model.type.substr(0, 1) !== "_" && equip.model.template.substr(0, 1) !== "_" && equip.model.equipment.substr(0, 1) !== "_";
          });
          if (!err) {
            equipments = equipments.concat(equips);
          }
          i++;
          if (i === scope.project.stations.items.length) {
            return typeof callback === "function" ? callback(equipments) : void 0;
          }
        }, true));
      }
      return _results;
    };

    DiscoveryManagementDirective.prototype.discovery = function(scope) {
      var _ref;
      if ((_ref = scope.subscription) != null) {
        _ref.dispose();
      }
      return scope.subscription = this.commonService.liveService.subscribe("sample-values/+/+/_state", (function(_this) {
        return function(err, sample) {
          var label, mu, su, template;
          mu = sample.message.monitoringUnitId;
          su = sample.message.sampleUnitId;
          label = mu + "/" + su;
          scope.status[label] = sample.message.value === 0 ? "通讯正常" : "通讯中断";
          if (scope.status[mu + "/_"] === "通讯中断") {
            scope.status[label] = "通讯中断";
          }
          if (scope.mus.hasOwnProperty(label) || scope.mus.hasOwnProperty(mu)) {
            return;
          }
          scope.mus[label] = 1;
          if (_this.filter(scope, mu, su)) {
            template = _this.find(scope, mu, su);
            if (!template) {
              return console.warn("新设备没有对应的设备类型，请检查model配置有无配置描述", mu, su);
            }
            if (template.model.type === "rack") {
              scope.mus[mu] = 1;
            }
            return scope.list.push({
              template: template,
              mu: mu,
              su: su
            });
          }
        };
      })(this));
    };

    DiscoveryManagementDirective.prototype.filter = function(scope, mu, su) {
      var id;
      id = _.find(scope.equipments, function(equip) {
        var sus, _ref;
        sus = _.pluck(equip.model.sampleUnits, "value");
        return __indexOf.call(sus, mu) >= 0 || (_ref = mu + "/" + su, __indexOf.call(sus, _ref) >= 0);
      });
      if (id) {
        return false;
      }
      return true;
    };

    DiscoveryManagementDirective.prototype.find = function(scope, mu, su) {
      var template;
      template = _.find(scope.templates, function(template) {
        var feature;
        feature = template.model.tag;
        return mu.indexOf(feature) >= 0 || su.indexOf(feature) >= 0;
      });
      return template;
    };

    DiscoveryManagementDirective.prototype.resize = function(scope) {};

    DiscoveryManagementDirective.prototype.dispose = function(scope) {};

    return DiscoveryManagementDirective;

  })(base.BaseDirective);
  return exports = {
    DiscoveryManagementDirective: DiscoveryManagementDirective
  };
});
