// Generated by IcedCoffeeScript 108.0.13

/*
* File: discovery-station-directive
* User: David
* Date: 2019/03/18
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "jszip2", "./jszip-utils"], function(base, css, view, _, moment, zip, util) {
  var DiscoveryStationDirective, exports;
  DiscoveryStationDirective = (function(_super) {
    __extends(DiscoveryStationDirective, _super);

    function DiscoveryStationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.find = __bind(this.find, this);
      this.filter = __bind(this.filter, this);
      this.discovery = __bind(this.discovery, this);
      this.show = __bind(this.show, this);
      this.id = "discovery-station";
      DiscoveryStationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DiscoveryStationDirective.prototype.setScope = function() {};

    DiscoveryStationDirective.prototype.setCSS = function() {
      return css;
    };

    DiscoveryStationDirective.prototype.setTemplate = function() {
      return view;
    };

    DiscoveryStationDirective.prototype.show = function(scope, element, attrs) {
      scope.list = [];
      scope.mus = sessionStorage.getItem("discovery");
      scope.mus = scope.mus ? JSON.parse(scope.mus) : {};
      this.getAllTemplates(scope, (function(_this) {
        return function(err, templates) {
          if (!err) {
            scope.templates = templates;
          }
          return _this.discovery(scope);
        };
      })(this));
      clearInterval(scope.timer);
      scope.timer = setInterval((function(_this) {
        return function() {
          var template;
          if (scope.list.length === 0 || scope["new"]) {
            return;
          }
          scope["new"] = true;
          scope.element = scope.list.shift();
          template = scope.element.template;
          scope.station = scope.project.createStation(null);
          scope.station.model.station = scope.element.mu;
          scope.station.model.name = template.name + scope.element.mu;
          scope.modal = M.Modal.getInstance($("#add-station-modal"));
          scope.modal.open();
          return scope.$applyAsync();
        };
      })(this), 5000);
      scope.saveStation = (function(_this) {
        return function() {
          return scope.station.save(function(err, station) {
            if (err) {
              _this.display("新增站点失败，因为：" + err);
            }
            _this.saveStationEquipments(scope);
            scope["new"] = false;
            scope.modal.close();
            return scope.project.loadStations(null, null, true);
          });
        };
      })(this);
      return scope.cancel = (function(_this) {
        return function() {
          scope["new"] = false;
          return scope.station = null;
        };
      })(this);
    };

    DiscoveryStationDirective.prototype.saveStationEquipments = function(scope) {
      var equip, equipmentsService, _i, _len, _ref, _results;
      equipmentsService = this.commonService.modelEngine.modelManager.getService("equipments");
      _ref = scope.element.template.equipments;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        equip = _ref[_i];
        delete equip._id;
        delete equip._index;
        equip.user = scope.station.model.user;
        equip.project = scope.station.model.project;
        equip.station = scope.station.model.station;
        _.each(equip.sampleUnits, function(su) {
          if (su.value.split("/").length > 1) {
            return su.value = scope.element.mu + "/" + su.value.split("/")[1];
          }
        });
        _results.push(equipmentsService.save(equip));
      }
      return _results;
    };

    DiscoveryStationDirective.prototype.getAllTemplates = function(scope, callback) {
      var n, templates, tps;
      templates = _.filter(scope.project.model.features, function(item) {
        return item.image.indexOf('.zip?') > 0;
      });
      tps = _.map(templates, function(template) {
        var arr;
        arr = template.desc.split(":");
        return {
          id: arr[0],
          name: arr[1],
          zip: template.image
        };
      });
      n = 0;
      return _.each(tps, (function(_this) {
        return function(tp) {
          return _this.getZipContent(tp.zip, function(equips) {
            n++;
            if ((equips == null) || equips.length === 0) {
              console.log("模型" + tp.name + "(" + tp.id + ")未配置任何站点设备");
            }
            tp.equipments = equips;
            if (n === tps.length) {
              return typeof callback === "function" ? callback(null, tps) : void 0;
            }
          });
        };
      })(this));
    };

    DiscoveryStationDirective.prototype.getZipContent = function(filename, callback) {
      var uploadService;
      uploadService = this.commonService.modelEngine.modelManager.getService("uploadUrl");
      return util.getBinaryContent(uploadService.url + "/" + filename, function(err, data) {
        return zip.loadAsync(data).then(function(zfile) {
          var file;
          file = _.find(zfile.files, function(fi) {
            return fi.dir === false && fi.name.indexOf("project/") >= 0;
          });
          return file != null ? file.async("text").then(function(text) {
            var content, equipments;
            content = JSON.parse(text);
            equipments = _.filter(content.data.equipments, function(equipment) {
              return equipment.station === content.data.stations[0].station;
            });
            return typeof callback === "function" ? callback(equipments) : void 0;
          }) : void 0;
        });
      });
    };

    DiscoveryStationDirective.prototype.discovery = function(scope) {
      var _ref;
      if ((_ref = scope.subscription) != null) {
        _ref.dispose();
      }
      return scope.subscription = this.commonService.liveService.subscribe("sample-values/+/_/_state", (function(_this) {
        return function(err, sample) {
          var label, mu, su, template;
          mu = sample.message.monitoringUnitId;
          su = sample.message.sampleUnitId;
          label = mu + "/" + su;
          if (scope.mus.hasOwnProperty(label)) {
            return;
          }
          scope.mus[label] = 1;
          if (_this.filter(scope, mu, su)) {
            template = _this.find(scope, mu, su);
            if (template) {
              return scope.list.push({
                template: template,
                mu: mu,
                su: su
              });
            }
          }
        };
      })(this));
    };

    DiscoveryStationDirective.prototype.filter = function(scope, mu, su) {
      var id;
      id = _.find(scope.project.stations.items, function(station) {
        return station.model.station === mu;
      });
      if (id) {
        return false;
      }
      return true;
    };

    DiscoveryStationDirective.prototype.find = function(scope, mu, su) {
      var template;
      template = _.find(scope.templates, function(template) {
        var key;
        key = template.id;
        return mu.indexOf(key) >= 0;
      });
      return template;
    };

    DiscoveryStationDirective.prototype.resize = function(scope) {};

    DiscoveryStationDirective.prototype.dispose = function(scope) {
      var _ref;
      clearInterval(scope.timer);
      return (_ref = scope.subscription) != null ? _ref.dispose() : void 0;
    };

    return DiscoveryStationDirective;

  })(base.BaseDirective);
  return exports = {
    DiscoveryStationDirective: DiscoveryStationDirective
  };
});
