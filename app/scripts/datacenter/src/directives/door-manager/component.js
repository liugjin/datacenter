// Generated by IcedCoffeeScript 108.0.13

/*
* File: door-manager-directive
* User: bingo
* Date: 2019/03/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DoorManagerDirective, exports;
  DoorManagerDirective = (function(_super) {
    __extends(DoorManagerDirective, _super);

    function DoorManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.initEquipments = __bind(this.initEquipments, this);
      this.show = __bind(this.show, this);
      this.id = "door-manager";
      DoorManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.allAcesses = [];
    }

    DoorManagerDirective.prototype.setScope = function() {};

    DoorManagerDirective.prototype.setCSS = function() {
      return css;
    };

    DoorManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    DoorManagerDirective.prototype.show = function($scope, element, attrs) {
      this.allAcesses = [];
      element.css("display", "block");
      $scope.setting = setting;
      $scope.accessStation = null;
      return this.initEquipments($scope, (function(_this) {
        return function(retFlag) {
          var _ref;
          if (_.has(_this.$routeParams, "station")) {
            $scope.accessStation = _this.$routeParams.station;
          } else if (_this.allAcesses.length > 0) {
            $scope.accessStation = _this.allAcesses[0].model.station;
          }
          if ((_ref = $scope.subBus) != null) {
            _ref.dispose();
          }
          return $scope.subBus = _this.subscribeEventBus('stationId', function(d) {
            if (_.isEmpty($scope.accessStation)) {
              $scope.accessStation = d.message.stationId;
            }
            return _this.commonService.loadStation(d.message.stationId, function(err, station) {
              return $scope.station = station;
            });
          });
        };
      })(this));
    };

    DoorManagerDirective.prototype.resize = function($scope) {};

    DoorManagerDirective.prototype.dispose = function($scope) {
      var _ref;
      return (_ref = $scope.subBus) != null ? _ref.dispose() : void 0;
    };

    DoorManagerDirective.prototype.initEquipments = function(scope, callback) {
      var filter, stationCount, stationItem, stationLen, _i, _len, _ref, _results;
      stationCount = 0;
      stationLen = scope.project.stations.items.length;
      _ref = scope.project.stations.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stationItem = _ref[_i];
        filter = stationItem.getIds();
        filter.type = "access";
        _results.push(stationItem.loadEquipments(filter, null, (function(_this) {
          return function(err, equips) {
            var equip, _j, _len1;
            for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
              equip = equips[_j];
              _this.allAcesses.push(equip);
            }
            stationCount++;
            if (stationCount === stationLen) {
              return typeof callback === "function" ? callback(true) : void 0;
            }
          };
        })(this)));
      }
      return _results;
    };

    return DoorManagerDirective;

  })(base.BaseDirective);
  return exports = {
    DoorManagerDirective: DoorManagerDirective
  };
});
