// Generated by IcedCoffeeScript 108.0.13

/*
* File: door-plan-directive
* User: David
* Date: 2019/04/11
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var DoorPlanDirective, exports;
  DoorPlanDirective = (function(_super) {
    __extends(DoorPlanDirective, _super);

    function DoorPlanDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "door-plan";
      DoorPlanDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    DoorPlanDirective.prototype.setScope = function() {};

    DoorPlanDirective.prototype.setCSS = function() {
      return css;
    };

    DoorPlanDirective.prototype.setTemplate = function() {
      return view;
    };

    DoorPlanDirective.prototype.show = function($scope, element, attrs) {
      var byCardValid, byDoorRight, cardEquips, cardNo, cardType, dataCenters, doorCommands, doorEquips, doorIndex, expireDate, findParent, fingerid, getAuthorizeList, init, loadEquipmentsByType, peopleEquips, selectEquips, setDoorAuthorize, setDoorRight, userId, userPassword, _ref;
      element.css("display", "block");
      $scope.setting = setting;
      $scope.doorImg = this.getComponentPath('image/door-manage.svg');
      $scope.noEquipImg = this.getComponentPath('image/door.png');
      $scope.closeImg = this.getComponentPath('image/close.svg');
      $scope.saveImg = this.getComponentPath('image/save.svg');
      $scope.cancelImg = this.getComponentPath('image/cancel.svg');
      $scope.doorEquips = [];
      $scope.cardEquips = [];
      $scope.peopleEquips = [];
      doorEquips = [];
      peopleEquips = [];
      cardEquips = [];
      $scope.select = false;
      selectEquips = [];
      $scope.pageIndexCard = 1;
      $scope.pageItemsCard = 4;
      $scope.pageIndexAuthorize = 1;
      $scope.pageItemsAuthorize = 12;
      doorCommands = [];
      doorIndex = null;
      cardNo = null;
      userPassword = null;
      userId = null;
      expireDate = null;
      cardType = null;
      byCardValid = null;
      byDoorRight = null;
      fingerid = null;
      findParent = (function(_this) {
        return function($scope, station) {
          var parent;
          parent = _.find($scope.project.stations.items, function(sta) {
            return sta.model.station === station.model.parent;
          });
          if (parent) {
            $scope.parents.push(parent);
            return findParent($scope, parent);
          }
        };
      })(this);
      dataCenters = _.filter($scope.project.stations.items, function(sta) {
        return _.isEmpty(sta.model.parent);
      });
      $scope.datacenters = dataCenters;
      $scope.parents = [];
      findParent($scope, $scope.station);
      $scope.stations = (_ref = $scope.parents[0]) != null ? _ref.stations : void 0;
      $scope.parents = $scope.parents.reverse();
      $scope.project.loadEquipmentTemplates({
        template: "card_template"
      }, 'user project type vendor template name base index image', (function(_this) {
        return function(err, templates) {
          if (err || templates.length < 1) {
            return;
          }
          return templates[0].loadProperties(null, function(err, properties) {
            if (err || properties.length < 1) {
              return;
            }
            return $scope.cardProperties = properties;
          });
        };
      })(this));
      $scope.selectStation = function(station) {
        return $scope.station = station;
      };
      $scope.selectChild = function(station) {
        $scope.stations = $scope.station.stations;
        $scope.parents.push($scope.station);
        return $scope.station = station;
      };
      $scope.selectParent = function(station) {
        var index, _ref1, _ref2;
        index = $scope.parents.indexOf(station);
        $scope.parents.splice(index, $scope.parents.length - index);
        $scope.station = station;
        return $scope.stations = (_ref1 = (_ref2 = station.parentStation) != null ? _ref2.stations : void 0) != null ? _ref1 : $scope.datacenters;
      };
      $scope.$watch("station", (function(_this) {
        return function(station) {
          if (!station) {
            return;
          }
          return loadEquipmentsByType();
        };
      })(this));
      loadEquipmentsByType = (function(_this) {
        return function(callback) {
          var mods, sta, _i, _len, _ref1, _results;
          $scope.currentDoor = null;
          $scope.currentCard = null;
          $scope.cardsData = null;
          $scope.equipments = null;
          $scope.doorEquips = [];
          $scope.cardEquips = [];
          $scope.peopleEquips = [];
          doorEquips = [];
          peopleEquips = [];
          cardEquips = [];
          mods = [];
          _ref1 = $scope.project.stations.items;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            sta = _ref1[_i];
            _results.push(_this.commonService.loadEquipmentsByType(sta, "access", function(err, model) {
              var selectEquip;
              $scope.equipments = _.uniq(model);
              _.each(model, function(equip) {
                equip.loadProperties();
                if (equip.model.template.indexOf("door_") >= 0) {
                  doorEquips.push(equip);
                }
                if (equip.model.template.indexOf("people_") >= 0) {
                  peopleEquips.push(equip);
                }
                if (equip.model.template.indexOf("card_") >= 0) {
                  return cardEquips.push(equip);
                }
              });
              $scope.doorEquips = doorEquips;
              $scope.cardEquips = cardEquips;
              $scope.peopleEquips = peopleEquips;
              if (doorEquips.length > 0) {
                selectEquip = null;
                if (_this.$routeParams.equipment != null) {
                  selectEquip = _.find(doorEquips, function(equip) {
                    return equip.model.equipment === _this.$routeParams.equipment;
                  });
                }
                if (!selectEquip) {
                  selectEquip = doorEquips[0];
                }
                return $scope.selectDoor(selectEquip);
              }
            }, false));
          }
          return _results;
        };
      })(this);
      init = (function(_this) {
        return function() {
          doorCommands = [];
          doorIndex = null;
          cardNo = null;
          userPassword = null;
          userId = null;
          expireDate = null;
          cardType = null;
          byCardValid = null;
          byDoorRight = null;
          return fingerid = null;
        };
      })(this);
      $scope.selectDoor = (function(_this) {
        return function(door) {
          $scope.currentDoor = door;
          $scope.currentDoorSignals = {};
          init();
          getAuthorizeList(door);
          element.find('#equipments').hide();
          if (door != null) {
            door.loadSignals(null, function(err, signals) {
              var filter, _ref1;
              filter = {
                user: $scope.station.model.user,
                project: $scope.station.model.project,
                station: $scope.station.model.station,
                equipment: door.model.equipment
              };
              if ((_ref1 = $scope.oneSubscription2) != null) {
                _ref1.dispose();
              }
              return $scope.oneSubscription2 = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, d) {
                if (!err && d.message) {
                  return $scope.currentDoorSignals[d.message.signal] = d.message;
                }
              });
            });
          }
          return door.loadCommands(null, function(err, commands) {
            var doorAddCards, doorCommandDoorTime, doorCommandRemoteOpen;
            if (err || commands.length < 1) {
              return;
            }
            if (door.model.vendor === "weigeng") {
              doorCommandRemoteOpen = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "remote-open";
                }
              });
              doorIndex = _.find(doorCommandRemoteOpen != null ? doorCommandRemoteOpen.model.parameters : void 0, function(ps) {
                return ps.key === "door";
              });
              doorCommands.push(doorCommandRemoteOpen);
              doorCommandDoorTime = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "door-time";
                }
              });
              doorCommands.push(doorCommandDoorTime);
              doorAddCards = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "add-cards";
                }
              });
              doorCommands.push(doorAddCards);
              cardNo = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "cardNo";
              });
              expireDate = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "expireDate";
              });
              byDoorRight = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "byDoorRight";
              });
            }
            if (door.model.vendor === "hikvision") {
              doorCommandRemoteOpen = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "remote-open";
                }
              });
              doorIndex = _.find(doorCommandRemoteOpen != null ? doorCommandRemoteOpen.model.parameters : void 0, function(ps) {
                return ps.key === "door";
              });
              doorCommands.push(doorCommandRemoteOpen);
              doorCommandDoorTime = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "door-time";
                }
              });
              doorCommands.push(doorCommandDoorTime);
              doorAddCards = _.find(commands, function(cmd) {
                if (!err) {
                  return cmd.model.command === "add-cards";
                }
              });
              doorCommands.push(doorAddCards);
              cardNo = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "cardNo";
              });
              userPassword = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "userPassword";
              });
              userId = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "userId";
              });
              expireDate = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "expireDate";
              });
              cardType = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "cardType";
              });
              byCardValid = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "byCardValid";
              });
              byDoorRight = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "byDoorRight";
              });
              return fingerid = _.find(doorAddCards != null ? doorAddCards.model.parameters : void 0, function(ps) {
                return ps.key === "fingerprint";
              });
            }
          }, false);
        };
      })(this);
      $scope.selectPageAuthorize = (function(_this) {
        return function(page) {
          return $scope.pageIndexAuthorize = page;
        };
      })(this);
      $scope.filterAuthorizeItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!$scope.cardsData) {
            return;
          }
          items = [];
          items = _.filter($scope.cardsData, function(equip) {
            var text, _ref1;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / $scope.pageItemsAuthorize);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      $scope.limitToAuthorize = (function(_this) {
        return function() {
          var aa, result;
          if ($scope.filterAuthorizeItem() && $scope.filterAuthorizeItem().pageCount === $scope.pageIndexAuthorize) {
            aa = $scope.filterAuthorizeItem().items % $scope.pageItemsAuthorize;
            result = -(aa === 0 ? $scope.pageItemsAuthorize : aa);
          } else {
            result = -$scope.pageItemsAuthorize;
          }
          return result;
        };
      })(this);
      $scope.selectPageCard = (function(_this) {
        return function(page) {
          return $scope.pageIndexCard = page;
        };
      })(this);
      $scope.filterCardEquipItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!$scope.cardEquips) {
            return;
          }
          items = [];
          items = _.filter($scope.cardEquips, function(equip) {
            var text, _ref1;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / $scope.pageItemsCard);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      $scope.limitToCardEquip = (function(_this) {
        return function() {
          var aa, result;
          if ($scope.filterCardEquipItem() && $scope.filterCardEquipItem().pageCount === $scope.pageIndexCard) {
            aa = $scope.filterCardEquipItem().items % $scope.pageItemsCard;
            result = -(aa === 0 ? $scope.pageItemsCard : aa);
          } else {
            result = -$scope.pageItemsCard;
          }
          return result;
        };
      })(this);
      $scope.formatValue = (function(_this) {
        return function(propertyId, value) {
          var arr, i, property, val, _i, _len;
          val = '';
          property = _.find($scope.cardProperties, function(property) {
            return property.model.property === propertyId;
          });
          if (property) {
            arr = property.model.format.split(',');
            for (_i = 0, _len = arr.length; _i < _len; _i++) {
              i = arr[_i];
              if (i.split(':')[0] === value) {
                val = i.split(':')[1];
              }
            }
          }
          return val;
        };
      })(this);
      $scope.getOweName = (function(_this) {
        return function(oweId) {
          var namesStr, _ref1;
          namesStr = "";
          namesStr = (_ref1 = _.find(peopleEquips, function(tmp) {
            return tmp.model.equipment === oweId;
          })) != null ? _ref1.model.name : void 0;
          return namesStr;
        };
      })(this);
      $scope.getUserNameByCard = (function(_this) {
        return function(cardId) {
          var nameStr, oweId, _ref1;
          nameStr = "";
          oweId = (_ref1 = _.find(cardEquips, function(tmp) {
            return tmp.model.equipment === cardId;
          })) != null ? _ref1.getPropertyValue('card-owner') : void 0;
          nameStr = $scope.getOweName(oweId);
          return nameStr;
        };
      })(this);
      $scope.getcardtype = (function(_this) {
        return function(cardType) {
          var cardtypesrt;
          cardtypesrt = "1类卡";
          if (cardType != null) {
            switch (cardType) {
              case '1':
                cardtypesrt = "1类卡";
                break;
              case '2':
                cardtypesrt = "2类卡";
                break;
              case '3':
                cardtypesrt = "3类卡";
                break;
              case '4':
                cardtypesrt = "4类卡";
                break;
              default:
                cardtypesrt = "1类卡";
                break;
            }
          }
          return cardtypesrt;
        };
      })(this);
      $scope.getcardstatus = (function(_this) {
        return function(byCardValid) {
          var cardstatusstr;
          cardstatusstr = "正常";
          if (byCardValid != null) {
            switch (byCardValid) {
              case '1':
                cardstatusstr = "正常";
                break;
              case '0':
                cardstatusstr = "挂失";
                break;
              default:
                cardstatusstr = "正常";
                break;
            }
          }
          return cardstatusstr;
        };
      })(this);
      $scope.selectAll = (function(_this) {
        return function() {
          if ($scope.select) {
            _.each($scope.cardEquips, function(equip) {
              equip.checked = true;
              return selectEquips.push(equip.model.equipment);
            });
          } else {
            _.each($scope.cardEquips, function(equip) {
              equip.checked = false;
              return selectEquips = [];
            });
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.selectOne = (function(_this) {
        return function() {
          _.each($scope.cardEquips, function(equip) {
            var index;
            index = _.indexOf(selectEquips, equip.model.equipment);
            if (equip.checked && index === -1) {
              return selectEquips.push(equip.model.equipment);
            } else if (!equip.checked && index !== -1) {
              return selectEquips.splice(index, 1);
            }
          });
          if ($scope.cardEquips.length === selectEquips.length) {
            $scope.select = true;
          } else {
            $scope.select = false;
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.addDoorCardAuthorize = function() {
        var mJson, str;
        mJson = {};
        mJson[$scope.currentDoor.getPropertyValue('door-id')] = 1;
        str = JSON.stringify(mJson);
        return $scope.doorCardAuthorize = {
          cardType: '1',
          cardId: '',
          userPassword: '',
          userId: '',
          expireDate: moment().format("YYYY-MM-DD"),
          byCardValid: '',
          byDoorRight: str,
          fingerid: ''
        };
      };
      $scope.selectCardEquip = (function(_this) {
        return function(card) {
          $scope.currentCard = card;
          $scope.doorCardAuthorize.cardType = card.getPropertyValue('card-type');
          $scope.doorCardAuthorize.cardTypeName = $scope.formatValue('card-type', card.getPropertyValue('card-type'));
          $scope.doorCardAuthorize.cardId = card.getPropertyValue('card-id');
          $scope.doorCardAuthorize.userId = $scope.doorCardAuthorize.cardId.substr(-8);
          $scope.doorCardAuthorize.byCardValid = card.getPropertyValue('card-status');
          $scope.doorCardAuthorize.expireDate = card.getPropertyValue('card-active-end-time');
          return $scope.doorCardAuthorize.fingerid = card.getPropertyValue('finger-id');
        };
      })(this);
      $scope.confirmDoorCardAuthorize = function() {
        if (!$scope.doorCardAuthorize.cardType || !$scope.doorCardAuthorize.cardId || !$scope.doorCardAuthorize.userId) {
          this.display("请选择一个卡");
          return;
        }
        if (!$scope.doorCardAuthorize.userPassword) {
          $scope.doorCardAuthorize.userPassword = "123456";
        }
        return setDoorRight((function(_this) {
          return function() {
            return $scope.executeCommand("add-cards");
          };
        })(this));
      };
      setDoorRight = (function(_this) {
        return function(callback) {
          var authorizeJson, cardAuthorize, currentDoorGroup, currentSampleUnit, doorRightJson;
          byDoorRight = {};
          authorizeJson = null;
          cardAuthorize = $scope.currentCard.getPropertyValue('card-door');
          if (cardAuthorize) {
            if (typeof cardAuthorize === 'string') {
              authorizeJson = JSON.parse(cardAuthorize);
            } else {
              authorizeJson = cardAuthorize;
            }
            currentSampleUnit = _.find($scope.currentDoor.model.sampleUnits, function(sample) {
              return sample.id === "su";
            });
            if (!currentSampleUnit) {
              currentSampleUnit = _.find($scope.currentDoor.model.sampleUnits, function(sample) {
                return sample.id === "su-1";
              });
            }
            if (currentSampleUnit) {
              currentDoorGroup = _.filter(doorEquips, function(door) {
                return door.sampleUnits[currentSampleUnit.id].value === currentSampleUnit.value;
              });
              _.each(currentDoorGroup, function(door) {
                if (authorizeJson && authorizeJson[door.model.equipment]) {
                  return byDoorRight[door.getPropertyValue('door-id')] = 1;
                }
              });
              byDoorRight[$scope.currentDoor.getPropertyValue('door-id')] = 1;
              doorRightJson = JSON.stringify(byDoorRight);
              $scope.doorCardAuthorize.byDoorRight = doorRightJson;
            }
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this);
      $scope.executeCommand = (function(_this) {
        return function(commandId) {
          var commandObj;
          if (!commandId) {
            return;
          }
          commandObj = null;
          if ($scope.currentDoor.model.vendor === "hikvision" && doorCommands) {
            commandObj = _.find(doorCommands, function(cmd) {
              return cmd.model.command === commandId;
            });
            if (!commandObj) {
              return _this.display("模板未配置此命令！");
            }
            switch (commandId) {
              case "remote-open":
                doorIndex.value = 1;
                break;
              case "door-time":
                console.log(commandObj);
                break;
              case "add-cards":
                try {
                  if (cardNo != null) {
                    cardNo.value = $scope.doorCardAuthorize.cardId;
                  }
                  if (userPassword != null) {
                    userPassword.value = $scope.doorCardAuthorize.userPassword;
                  }
                  if (userId != null) {
                    userId.value = $scope.doorCardAuthorize.userId;
                  }
                  if (expireDate != null) {
                    expireDate.value = moment($scope.doorCardAuthorize.expireDate).format("YYYYMMDD");
                  }
                  if (cardType != null) {
                    cardType.value = $scope.doorCardAuthorize.cardType;
                  }
                  if (byCardValid != null) {
                    byCardValid.value = $scope.doorCardAuthorize.byCardValid;
                  }
                  if (byDoorRight != null) {
                    byDoorRight.value = $scope.doorCardAuthorize.byDoorRight;
                  }
                  commandObj.model.parameters[6].value = byDoorRight.value;
                  if (fingerid != null) {
                    fingerid.value = $scope.doorCardAuthorize.fingerid;
                  }
                } catch (_error) {
                  console.log("hikvision-doorCommands-add-cards-参数缺少");
                }
                break;
              default:
                return;
            }
            _this.executeCommand($scope, commandObj);
            setTimeout(function() {
              var filter, _ref1;
              filter = {
                user: $scope.station.model.user,
                project: $scope.station.model.project,
                station: $scope.station.model.station,
                equipment: $scope.currentDoor.model.equipment,
                command: commandObj.model.command
              };
              if ((_ref1 = $scope.oneSubscription) != null) {
                _ref1.dispose();
              }
              return $scope.oneSubscription = _this.commonService.commandLiveSession.subscribeValues(filter, function(err, d) {
                if (!err && d.message) {
                  if (d.message.phase === "complete" && d.message.command === "add-cards") {
                    return setDoorAuthorize(d.message);
                  }
                }
              });
            }, 100);
          }
          if ($scope.currentDoor.model.vendor === "weigeng" && doorCommands) {
            commandObj = _.find(doorCommands, function(cmd) {
              return cmd.model.command === commandId;
            });
            if (!commandObj) {
              return _this.display("模板未配置此命令！");
            }
            switch (commandId) {
              case "remote-open":
                doorIndex.value = 1;
                break;
              case "door-time":
                console.log(commandObj);
                break;
              case "add-cards":
                if (cardNo != null) {
                  cardNo.value = $scope.doorCardAuthorize.cardId;
                }
                if (expireDate != null) {
                  expireDate.value = moment($scope.doorCardAuthorize.expireDate).format("YYYYMMDD");
                }
                if (byDoorRight != null) {
                  byDoorRight.value = $scope.doorCardAuthorize.byDoorRight;
                }
                break;
              default:
                return;
            }
            _this.executeCommand($scope, commandObj);
            return setTimeout(function() {
              var filter, _ref1;
              filter = {
                user: $scope.station.model.user,
                project: $scope.station.model.project,
                station: $scope.station.model.station,
                equipment: $scope.currentDoor.model.equipment,
                command: commandObj.model.command
              };
              if ((_ref1 = $scope.oneSubscription1) != null) {
                _ref1.dispose();
              }
              return $scope.oneSubscription1 = _this.commonService.commandLiveSession.subscribeValues(filter, function(err, d) {
                if (!err && d.message) {
                  if (d.message.phase === "complete" && d.message.command === "add-cards") {
                    return setDoorAuthorize(d.message);
                  }
                }
              });
            }, 100);
          }
        };
      })(this);
      setDoorAuthorize = function(message) {
        var a, cardAuthorize;
        a = {};
        _.each(message.parameters, (function(_this) {
          return function(param) {
            var day, month, year;
            if (param.key === 'expireDate') {
              year = parseInt(param.value.substring(0, 4));
              month = parseInt(param.value.substring(4, 6)) - 1;
              day = parseInt(param.value.substring(6));
              param.value = moment().set({
                'year': year,
                'month': month,
                'date': day
              }).format("YYYY-MM-DD");
            }
            return a[param.key] = param.value;
          };
        })(this));
        cardAuthorize = $scope.currentCard.getPropertyValue('card-door');
        if (!cardAuthorize) {
          cardAuthorize = {};
        }
        cardAuthorize[$scope.currentDoor.model.equipment] = a;
        _.map($scope.currentCard.properties.items, (function(_this) {
          return function(property) {
            if (property.model.property === "card-door") {
              return property.value = cardAuthorize;
            }
          };
        })(this));
        $scope.currentCard.setPropertyValue('card-door', cardAuthorize);
        return $scope.currentCard.save((function(_this) {
          return function(err, model) {
            return getAuthorizeList($scope.currentDoor);
          };
        })(this));
      };
      getAuthorizeList = function(equip) {
        var cardsData;
        $scope.accessData = true;
        cardsData = [];
        _.each(cardEquips, (function(_this) {
          return function(card) {
            var cardDoor, mJson;
            cardDoor = card.getPropertyValue('card-door');
            if (typeof cardDoor === 'string') {
              mJson = JSON.parse(cardDoor);
            } else {
              mJson = cardDoor;
            }
            if ((mJson != null) && mJson[equip.model.equipment]) {
              return cardsData.push(mJson[equip.model.equipment]);
            }
          };
        })(this));
        return $scope.cardsData = cardsData;
      };
      return $scope.closeModal = (function(_this) {
        return function() {
          return $('#door-plan-modal').modal('close');
        };
      })(this);
    };

    DoorPlanDirective.prototype.resize = function($scope) {};

    DoorPlanDirective.prototype.dispose = function($scope) {
      var _ref, _ref1, _ref2;
      if ((_ref = $scope.oneSubscription) != null) {
        _ref.dispose();
      }
      if ((_ref1 = $scope.oneSubscription1) != null) {
        _ref1.dispose();
      }
      return (_ref2 = $scope.oneSubscription2) != null ? _ref2.dispose() : void 0;
    };

    return DoorPlanDirective;

  })(base.BaseDirective);
  return exports = {
    DoorPlanDirective: DoorPlanDirective
  };
});
