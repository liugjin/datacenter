// Generated by IcedCoffeeScript 108.0.11

/*
* File: energy-year-pie-directive
* User: David
* Date: 2019/03/06
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var EnergyYearPieDirective, exports;
  EnergyYearPieDirective = (function(_super) {
    __extends(EnergyYearPieDirective, _super);

    function EnergyYearPieDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "energy-year-pie";
      EnergyYearPieDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EnergyYearPieDirective.prototype.setScope = function() {};

    EnergyYearPieDirective.prototype.setCSS = function() {
      return css;
    };

    EnergyYearPieDirective.prototype.setTemplate = function() {
      return view;
    };

    EnergyYearPieDirective.prototype.show = function(scope, element, attrs) {
      var createPieOption, initData, queryDataBase;
      initData = (function(_this) {
        return function() {
          var chartelement, _ref;
          scope.pieChart = null;
          chartelement = element.find('.charts-pie');
          scope.pieChart = echarts.init(chartelement[0]);
          if ((_ref = scope.pieChart) != null) {
            _ref.clear();
          }
          return scope.energyOption = [
            {
              signal: "power-it-value",
              mode: 'year',
              name: 'IT设备能耗',
              period: moment().format('YYYY')
            }, {
              signal: "power-facility-value",
              mode: 'year',
              name: '总能耗',
              period: moment().format('YYYY')
            }, {
              signal: "power-office-value",
              mode: 'year',
              name: '办公和照明能耗',
              period: moment().format('YYYY')
            }, {
              signal: "other-value",
              mode: 'year',
              name: '制冷和其他能耗',
              period: moment().format('YYYY')
            }
          ];
        };
      })(this);
      queryDataBase = (function(_this) {
        return function(stationId, option, callback) {
          var filter;
          filter = {
            user: _this.$routeParams.user,
            project: _this.$routeParams.project,
            station: stationId,
            equipment: '_station_efficient',
            signal: option.signal,
            period: option.period,
            mode: option.mode
          };
          return _this.commonService.reportingService.querySignalStatistics({
            filter: filter
          }, function(err, records) {
            if (err) {
              return;
            }
            if (!_.isEmpty(records)) {
              return _.mapObject(records, function(val) {
                return typeof callback === "function" ? callback(val.values[0]) : void 0;
              });
            }
          });
        };
      })(this);
      createPieOption = (function(_this) {
        return function(getData) {
          var dataArray, it, legendArray, office, option, other, otherValue, total, _ref, _ref1, _ref2;
          dataArray = [];
          legendArray = [];
          total = _.find(getData, function(signal) {
            return signal.signal === "power-facility-value";
          });
          it = _.find(getData, function(signal) {
            return signal.signal === "power-it-value";
          });
          office = _.find(getData, function(signal) {
            return signal.signal === "power-office-value";
          });
          other = _.find(getData, function(signal) {
            return signal.signal === "other-value";
          });
          otherValue = ((_ref = total.value) != null ? _ref : 0) - ((_ref1 = it.value) != null ? _ref1 : 0) - ((_ref2 = office.value) != null ? _ref2 : 0);
          other.value = otherValue;
          _.map(getData, function(s) {
            if (s.signal !== "power-facility-value") {
              dataArray.push({
                name: s.name,
                value: s.value
              });
              return legendArray.push(s.name);
            }
          });
          option = {
            color: ["#1D94FF", "#10EBF4", "#F4BD0F", "#BBD7F2"],
            tooltip: {
              trigger: 'item',
              formatter: "{a} <br/>{b}: {c} ({d}%)"
            },
            legend: {
              x: 'center',
              y: 'bottom',
              data: legendArray,
              icon: "circle",
              itemGap: 10,
              textStyle: {
                color: "#a2caf8"
              }
            },
            series: [
              {
                name: '访问来源',
                type: 'pie',
                radius: ['50%', '70%'],
                clockwise: false,
                avoidLabelOverlap: false,
                data: dataArray,
                itemStyle: {
                  normal: {
                    label: {
                      show: true,
                      formatter: '{d}%'
                    },
                    labelLine: {
                      show: true
                    }
                  }
                }
              }
            ]
          };
          return option;
        };
      })(this);
      return scope.$watch('parameters.stationId', (function(_this) {
        return function(stationId) {
          initData();
          return _.map(scope.energyOption, function(energyType) {
            return queryDataBase(stationId, energyType, function(value) {
              var options;
              energyType.value = value.value.toFixed(2);
              options = createPieOption(scope.energyOption);
              return scope.pieChart.setOption(options);
            });
          });
        };
      })(this));
    };

    EnergyYearPieDirective.prototype.resize = function(scope) {};

    EnergyYearPieDirective.prototype.dispose = function(scope) {};

    return EnergyYearPieDirective;

  })(base.BaseDirective);
  return exports = {
    EnergyYearPieDirective: EnergyYearPieDirective
  };
});
