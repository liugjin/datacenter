// Generated by IcedCoffeeScript 108.0.13

/*
* File: equip-door-directive
* User: bingo
* Date: 2019/03/28
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var EquipDoorDirective, exports;
  EquipDoorDirective = (function(_super) {
    __extends(EquipDoorDirective, _super);

    function EquipDoorDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "equip-door";
      EquipDoorDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EquipDoorDirective.prototype.setScope = function() {};

    EquipDoorDirective.prototype.setCSS = function() {
      return css;
    };

    EquipDoorDirective.prototype.setTemplate = function() {
      return view;
    };

    EquipDoorDirective.prototype.show = function($scope, element, attrs) {
      var doorEquip, loadEquipmentsByType, _ref;
      element.css("display", "block");
      $scope.setting = setting;
      $scope.noEquipImg = this.getComponentPath('image/door.png');
      $scope.equipments = null;
      $scope.doorEquips = null;
      $scope.pageIndex = 1;
      $scope.pageItems = 6;
      doorEquip = [];
      $scope.project.loadStations(null, (function(_this) {
        return function(err, stations) {
          if (err || stations.length < 1) {
            return;
          }
          return $scope.stations = stations;
        };
      })(this));
      if ((_ref = $scope.subBus) != null) {
        _ref.dispose();
      }
      $scope.subBus = this.subscribeEventBus('stationId', (function(_this) {
        return function(d) {
          return _this.commonService.loadStation(d.message.stationId, function(err, station) {
            return $scope.station = station;
          });
        };
      })(this));
      $scope.$watch("station", (function(_this) {
        return function(station) {
          if (!station) {
            return;
          }
          return loadEquipmentsByType();
        };
      })(this));
      loadEquipmentsByType = (function(_this) {
        return function(callback) {
          var getStationEquipment, mods;
          $scope.equipments = null;
          doorEquip = [];
          mods = [];
          getStationEquipment = function(station, callback) {
            var err, mod, sta, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref1;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            _ref1 = station.stations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              getStationEquipment(sta);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "F:\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\equip-door\\component.coffee"
              });
              _this.commonService.loadEquipmentsByType(station, "access", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return mod = arguments[1];
                  };
                })(),
                lineno: 55
              }), false);
              __iced_deferrals._fulfill();
            })(function() {
              mods = mods.concat(mod);
              return typeof callback === "function" ? callback(mods) : void 0;
            });
          };
          return getStationEquipment($scope.station, function(equips) {
            $scope.equipments = equips;
            _.each(equips, function(equip) {
              if (equip.model.template.indexOf("door_") >= 0) {
                equip.loadProperties();
                equip.loadCommands();
                return doorEquip.push(equip);
              }
            });
            $scope.doorEquips = doorEquip;
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this);
      $scope.selectEquip = (function(_this) {
        return function(equip) {
          var _ref1;
          if ($scope.equipment && $scope.equipment.model.equipment === equip.model.equipment) {
            $scope.equipment = null;
            return _this.commonService.publishEventBus("equipDoorId", {
              equipDoorId: ""
            });
          } else {
            $scope.equipment = equip;
            return _this.commonService.publishEventBus("equipDoorId", {
              equipDoorId: (_ref1 = equip.model) != null ? _ref1.equipment : void 0
            });
          }
        };
      })(this);
      $scope.executeCommand = (function(_this) {
        return function(door) {
          var cmd, doorNum;
          doorNum = door.propertyValues['door-id'];
          cmd = {};
          cmd = _.find(door.commands.items, function(item) {
            return item.model.command === "remote-open";
          });
          if (cmd) {
            return $scope.prompt("执行远程开门确认", "请确认是否执行远程开门命令？", function(ok) {
              if (!ok) {
                return;
              }
              cmd.model.parameters[0].value = doorNum;
              return _this.executeCommand($scope, cmd);
            });
          } else {
            return _this.display("未配置命令");
          }
        };
      })(this);
      $scope.imgString = (function(_this) {
        return function(str) {
          var url;
          url = "";
          if (str) {
            url = "url('" + $scope.setting.urls.uploadUrl + "/" + str + "')";
          } else {
            url = "url('" + $scope.noEquipImg + "')";
          }
          return url;
        };
      })(this);
      $scope.selectPage = (function(_this) {
        return function(page) {
          return $scope.pageIndex = page;
        };
      })(this);
      $scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!$scope.doorEquips) {
            return;
          }
          items = [];
          items = _.filter($scope.doorEquips, function(equip) {
            var text, _ref1;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / $scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      return $scope.limitToEquipment = (function(_this) {
        return function() {
          var aa, result;
          if ($scope.filterEquipmentItem() && $scope.filterEquipmentItem().pageCount === $scope.pageIndex) {
            aa = $scope.filterEquipmentItem().items % $scope.pageItems;
            result = -(aa === 0 ? $scope.pageItems : aa);
          } else {
            result = -$scope.pageItems;
          }
          return result;
        };
      })(this);
    };

    EquipDoorDirective.prototype.resize = function($scope) {};

    EquipDoorDirective.prototype.dispose = function($scope) {
      var _ref;
      return (_ref = $scope.subBus) != null ? _ref.dispose() : void 0;
    };

    return EquipDoorDirective;

  })(base.BaseDirective);
  return exports = {
    EquipDoorDirective: EquipDoorDirective
  };
});
