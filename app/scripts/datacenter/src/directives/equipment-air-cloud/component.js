// Generated by IcedCoffeeScript 108.0.13

/*
* File: equipment-air-cloud-directive
* User: David
* Date: 2020/05/11
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var EquipmentAirCloudDirective, exports;
  EquipmentAirCloudDirective = (function(_super) {
    __extends(EquipmentAirCloudDirective, _super);

    function EquipmentAirCloudDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "equipment-air-cloud";
      EquipmentAirCloudDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EquipmentAirCloudDirective.prototype.setScope = function() {};

    EquipmentAirCloudDirective.prototype.setCSS = function() {
      return css;
    };

    EquipmentAirCloudDirective.prototype.setTemplate = function() {
      return view;
    };

    EquipmentAirCloudDirective.prototype.show = function(scope, element, attrs) {
      var init;
      scope.selectEquipment = (function(_this) {
        return function(equip) {
          var onlineFilter, returnHumidityFilter, returnTemplateFilter, supplyHumidityFilter, supplyTemplateFilter, _ref, _ref1, _ref2, _ref3, _ref4;
          onlineFilter = {
            project: equip.model.project,
            user: equip.model.user,
            station: equip.model.station,
            equipment: equip.model.equipment,
            signal: "communication-status"
          };
          scope.theAirStatu = {
            equipName: equip.model.name,
            equipStatu: "--",
            supplyTemplate: "--",
            returnTemplate: "--",
            supplyHumidity: "--",
            returnHumidity: "--"
          };
          if ((_ref = scope.subscribeOnline) != null) {
            _ref.dispose();
          }
          scope.subscribeOnline = _this.commonService.signalLiveSession.subscribeValues(onlineFilter, function(err, signal) {
            if (signal.message) {
              if (signal.message.value === 0) {
                scope.colorChange = false;
                return scope.theAirStatu.equipStatu = "正常";
              } else {
                scope.colorChange = true;
                return scope.theAirStatu.equipStatu = "断开";
              }
            }
          });
          supplyTemplateFilter = {
            project: equip.model.project,
            user: equip.model.user,
            station: equip.model.station,
            equipment: equip.model.equipment,
            signal: scope.parameters.supplyTemplate || "supply-air-temperature"
          };
          if ((_ref1 = scope.subscribeSupplyTemplate) != null) {
            _ref1.dispose();
          }
          scope.subscribeSupplyTemplate = _this.commonService.signalLiveSession.subscribeValues(supplyTemplateFilter, function(err, signal) {
            return scope.theAirStatu.supplyTemplate = signal.message.value.tofixed(2);
          });
          if (scope.parameters.thShow) {
            returnTemplateFilter = {
              project: equip.model.project,
              user: equip.model.user,
              station: equip.model.station,
              equipment: equip.model.equipment,
              signal: scope.parameters.returnTemplate || "return-air-temperature"
            };
            if ((_ref2 = scope.subscribeReturnTemplate) != null) {
              _ref2.dispose();
            }
            scope.subscribeReturnTemplate = _this.commonService.signalLiveSession.subscribeValues(returnTemplateFilter, function(err, signal) {
              return scope.theAirStatu.returnTemplate = signal.message.value.tofixed(2);
            });
            supplyHumidityFilter = {
              project: equip.model.project,
              user: equip.model.user,
              station: equip.model.station,
              equipment: equip.model.equipment,
              signal: scope.parameters.supplyHumidity || "supply-air-humidity"
            };
            if ((_ref3 = scope.subscribeSupplyHmidity) != null) {
              _ref3.dispose();
            }
            scope.subscribeSupplyHmidity = _this.commonService.signalLiveSession.subscribeValues(supplyHumidityFilter, function(err, signal) {
              return scope.theAirStatu.supplyHumidity = signal.message.value.tofixed(2);
            });
            returnHumidityFilter = {
              project: equip.model.project,
              user: equip.model.user,
              station: equip.model.station,
              equipment: equip.model.equipment,
              signal: scope.parameters.returnTemplate || "return-air-humidity"
            };
            if ((_ref4 = scope.subscribeReturnHmidity) != null) {
              _ref4.dispose();
            }
            return scope.subscribeReturnHmidity = _this.commonService.signalLiveSession.subscribeValues(returnHumidityFilter, function(err, signal) {
              return scope.theAirStatu.returnHumidity = signal.message.value.tofixed(2);
            });
          }
        };
      })(this);
      init = (function(_this) {
        return function() {
          var stationsNum;
          scope.theAirStatu = {
            equipName: "",
            equipStatu: "--",
            supplyTemplate: "--",
            returnTemplate: "--",
            supplyHumidity: "--",
            returnHumidity: "--"
          };
          scope.equipments = [];
          scope.colorChange = false;
          scope.stations = _.each(scope.project.stations.nitems, function(n) {
            return n.model.station;
          });
          stationsNum = scope.project.stations.items.length;
          return _.each(scope.stations, function(station) {
            return station != null ? station.loadEquipments({
              type: "aircondition"
            }, null, function(err, equips) {
              stationsNum--;
              scope.equipments = scope.equipments.concat(equips);
              if (stationsNum === 0) {
                return scope.selectEquipment(scope.equipments[0]);
              }
            }, true) : void 0;
          });
        };
      })(this);
      return init();
    };

    EquipmentAirCloudDirective.prototype.resize = function(scope) {};

    EquipmentAirCloudDirective.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = scope.subscribeOnline) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.subscribeSupplyTemplate) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = scope.subscribeReturnTemplate) != null) {
        _ref2.dispose();
      }
      if ((_ref3 = scope.subscribeSupplyHmidity) != null) {
        _ref3.dispose();
      }
      return (_ref4 = scope.subscribeReturnHmidity) != null ? _ref4.dispose() : void 0;
    };

    return EquipmentAirCloudDirective;

  })(base.BaseDirective);
  return exports = {
    EquipmentAirCloudDirective: EquipmentAirCloudDirective
  };
});
