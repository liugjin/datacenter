// Generated by IcedCoffeeScript 108.0.12

/*
* File: equipment-info-directive
* User: David
* Date: 2019/03/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var EquipmentInfoDirective, exports;
  EquipmentInfoDirective = (function(_super) {
    __extends(EquipmentInfoDirective, _super);

    function EquipmentInfoDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "equipment-info";
      EquipmentInfoDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EquipmentInfoDirective.prototype.setScope = function() {};

    EquipmentInfoDirective.prototype.setCSS = function() {
      return css;
    };

    EquipmentInfoDirective.prototype.setTemplate = function() {
      return view;
    };

    EquipmentInfoDirective.prototype.show = function(scope, element, attrs) {
      var changeEquipment, changeServer, changeStation, parseEnum, setRackInfo, setServerInfo;
      if (!scope.firstload) {
        return;
      }
      if (!scope.rackInfo) {
        scope.rackInfo = [];
      }
      if (!scope.serverInfo) {
        scope.serverInfo = [];
      }
      parseEnum = function(value, enumString) {
        var enumArray, enumObj, i, number, result, val, _i, _len;
        if (!_.isNumber(Number(value))) {
          return value;
        }
        enumArray = enumString.split(',');
        enumObj = {};
        for (_i = 0, _len = enumArray.length; _i < _len; _i++) {
          i = enumArray[_i];
          number = i.split(':')[0];
          val = i.split(':')[1];
          if (!number || !val) {
            return console.error("parseValue", this);
          }
          enumObj[number] = val;
        }
        result = enumObj[value];
        return result;
      };
      setRackInfo = function() {
        if (!scope.equipment) {
          return;
        }
        return scope.equipment.loadProperties(null, (function(_this) {
          return function() {
            var i, m, p, value, _i, _j, _len, _ref, _ref1, _ref2, _results;
            scope.rackInfo = [];
            _ref1 = (_ref = scope.equipment) != null ? _ref.properties.items : void 0;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              p = _ref1[_i];
              m = p != null ? p.model : void 0;
              if ((m != null ? m.index : void 0) && (m != null ? m.index : void 0) > 0 && m.dataType !== 'json') {
                value = m.value;
                if (m.dataType === "date") {
                  value = moment(m.value).format("YYYY-MM-DD");
                }
                if (m.dataType === "enum") {
                  value = parseEnum(m.value, m.format);
                }
                if (p.value) {
                  value = p.value;
                  if (m.dataType === "date") {
                    value = moment(p.value).format("YYYY-MM-DD");
                  }
                  if (m.dataType === "enum") {
                    value = parseEnum(p.value, m.format);
                  }
                }
                scope.rackInfo.push({
                  name: m.name,
                  value: value,
                  index: m.index
                });
              }
            }
            if (scope.rackInfo.length === 0) {
              _results = [];
              for (i = _j = 0; _j <= 8; i = ++_j) {
                p = (_ref2 = scope.equipment) != null ? _ref2.properties.items[i] : void 0;
                m = p != null ? p.model : void 0;
                if (m && m.dataType !== 'json') {
                  value = m.value;
                  if (m.dataType === "date") {
                    value = moment(m.value).format("YYYY-MM-DD");
                  }
                  if (m.dataType === "enum") {
                    value = parseEnum(m.value, m.format);
                  }
                  if (p.value) {
                    value = p.value;
                    if (m.dataType === "date") {
                      value = moment(p.value).format("YYYY-MM-DD");
                    }
                    if (m.dataType === "enum") {
                      value = parseEnum(p.value, m.format);
                    }
                  }
                  _results.push(scope.rackInfo.push({
                    name: m.name,
                    value: value,
                    index: m.index
                  }));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            }
          };
        })(this));
      };
      setServerInfo = (function(_this) {
        return function() {
          if (!scope.server) {
            return;
          }
          return scope.server.loadProperties(null, function() {
            var i, m, p, value, _i, _j, _len, _ref, _ref1, _ref2, _results;
            scope.serverInfo = [];
            _ref1 = (_ref = scope.server) != null ? _ref.properties.items : void 0;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              p = _ref1[_i];
              m = p != null ? p.model : void 0;
              if ((m != null ? m.index : void 0) && m.index > 0 && m.dataType !== 'json') {
                value = m.value;
                if (m.dataType === "date") {
                  value = moment(m.value).format("YYYY-MM-DD");
                }
                if (m.dataType === "enum") {
                  value = p.parseValue(m.value);
                }
                if (p.value) {
                  value = p.value;
                  if (m.dataType === "date") {
                    value = moment(p.value).format("YYYY-MM-DD");
                  }
                  if (m.dataType === "enum") {
                    value = p.parseValue(p.value);
                  }
                }
                scope.serverInfo.push({
                  name: m.name,
                  value: value,
                  index: m.index
                });
              }
            }
            if (scope.serverInfo.length === 0) {
              _results = [];
              for (i = _j = 0; _j <= 8; i = ++_j) {
                p = (_ref2 = scope.server) != null ? _ref2.properties.items[i] : void 0;
                m = p != null ? p.model : void 0;
                if (m && m.dataType !== 'json') {
                  value = m.value;
                  if (m.dataType === "date") {
                    value = moment(m.value).format("YYYY-MM-DD");
                  }
                  if (m.dataType === "enum") {
                    value = p.parseValue(m.value);
                  }
                  if (p.value) {
                    value = p.value;
                    if (m.dataType === "date") {
                      value = moment(p.value).format("YYYY-MM-DD");
                    }
                    if (m.dataType === "enum") {
                      value = p.parseValue(p.value);
                    }
                    _results.push(scope.serverInfo.push({
                      name: m.name,
                      value: value,
                      index: m.index
                    }));
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            }
          });
        };
      })(this);
      changeStation = (function(_this) {
        return function(stationId) {
          var station;
          if (!stationId) {
            return;
          }
          _this.getStation(scope, stationId);
          station = scope.station;
          return station.loadEquipments({
            station: station.model.station,
            project: station.model.project,
            user: station.model.user
          }, null, function(err) {
            var _ref;
            if (err) {
              return console.error(err);
            }
            return scope.equipments = (_ref = station.equipments) != null ? _ref.items : void 0;
          });
        };
      })(this);
      changeEquipment = (function(_this) {
        return function(equipmentId) {
          if (!equipmentId) {
            return;
          }
          return _this.getEquipment(scope, equipmentId, function(err) {
            return setRackInfo();
          });
        };
      })(this);
      changeServer = (function(_this) {
        return function(serverId) {
          var station;
          if (!serverId) {
            return scope.server = null;
          }
          station = scope.station;
          return station.loadEquipment(serverId, null, function(err, equip) {
            if (err) {
              return console.error(err);
            }
            scope.server = equip;
            return setServerInfo();
          });
        };
      })(this);
      scope.$watch('parameters.station', function(stationId) {
        if (!stationId) {
          return;
        }
        return changeStation(stationId);
      });
      scope.$watch('parameters.equipment', (function(_this) {
        return function(equipmentId) {
          if (!equipmentId) {
            return;
          }
          return changeEquipment(equipmentId);
        };
      })(this));
      return scope.$watch('parameters.server', (function(_this) {
        return function(serverId) {
          if (!serverId) {
            return;
          }
          return changeServer(serverId);
        };
      })(this));
    };

    EquipmentInfoDirective.prototype.resize = function(scope) {};

    EquipmentInfoDirective.prototype.dispose = function(scope) {};

    return EquipmentInfoDirective;

  })(base.BaseDirective);
  return exports = {
    EquipmentInfoDirective: EquipmentInfoDirective
  };
});
