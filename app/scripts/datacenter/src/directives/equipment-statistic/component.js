// Generated by IcedCoffeeScript 108.0.11

/*
* File: equipment-statistic-directive
* User: David
* Date: 2019/08/03
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var EquipmentStatisticDirective, exports;
  EquipmentStatisticDirective = (function(_super) {
    __extends(EquipmentStatisticDirective, _super);

    function EquipmentStatisticDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "equipment-statistic";
      EquipmentStatisticDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EquipmentStatisticDirective.prototype.setScope = function() {};

    EquipmentStatisticDirective.prototype.setCSS = function() {
      return css;
    };

    EquipmentStatisticDirective.prototype.setTemplate = function() {
      return view;
    };

    EquipmentStatisticDirective.prototype.show = function(scope, element, attrs) {
      var stations, type, types, _i, _len, _ref;
      scope.types = {};
      types = (_ref = scope.parameters.types) != null ? _ref : [
        {
          name: "UPS",
          type: "ups"
        }, {
          name: "空调",
          type: "aircondition"
        }, {
          name: "传感器",
          type: "environmental"
        }
      ];
      stations = this.commonService.loadStationChildren(scope.station, true);
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        type.type = type.type.toLowerCase();
        scope.types[type.name] = {
          type: type.type,
          count: 0,
          img: this.getTypeImage(type)
        };
        this.getItems(scope, stations, type);
      }
      return scope.getLink = function(type) {
        var ret;
        ret = "#/monitoring/" + scope.project.model.user + "/" + scope.project.model.project + "?type=" + type.type;
        if (type.type === "access") {
          ret = "#/door-manager/" + scope.project.model.user + "/" + scope.project.model.project;
        }
        if (type.type === "video") {
          ret = "#/video/" + scope.project.model.user + "/" + scope.project.model.project;
        }
        return ret;
      };
    };

    EquipmentStatisticDirective.prototype.getTypeImage = function(type) {
      var ret, _ref;
      ret = this.getComponentPath('/images/space.png');
      if ((_ref = type.type) === "ups" || _ref === "UPS") {
        ret = this.getComponentPath('/images/ups.png');
      } else if (type.type === "aircondition" || type.name.indexOf("空调") >= 0) {
        ret = this.getComponentPath('/images/aircondition.png');
      } else if (type.type.indexOf("distributor") >= 0 || type.name.indexOf("配电") >= 0) {
        ret = this.getComponentPath('/images/power-box.png');
      } else if (type.name.indexOf("电池") >= 0) {
        ret = this.getComponentPath('/images/battery.png');
      }
      return ret;
    };

    EquipmentStatisticDirective.prototype.getItems = function(scope, stations, type) {
      var filter, station, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        station = stations[_i];
        filter = _.omit(type, "name");
        _results.push(station.loadEquipments(filter, null, function(err, equips) {
          return scope.types[type.name].count += equips.length;
        }));
      }
      return _results;
    };

    EquipmentStatisticDirective.prototype.resize = function(scope) {};

    EquipmentStatisticDirective.prototype.dispose = function(scope) {};

    return EquipmentStatisticDirective;

  })(base.BaseDirective);
  return exports = {
    EquipmentStatisticDirective: EquipmentStatisticDirective
  };
});
