// Generated by IcedCoffeeScript 108.0.11

/*
* File: equipment-timefilter-directive
* User: David
* Date: 2019/04/24
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'gl-datepicker'], function(base, css, view, _, moment, gl) {
  var EquipmentTimefilterDirective, exports;
  EquipmentTimefilterDirective = (function(_super) {
    __extends(EquipmentTimefilterDirective, _super);

    function EquipmentTimefilterDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "equipment-timefilter";
      EquipmentTimefilterDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EquipmentTimefilterDirective.prototype.setScope = function() {};

    EquipmentTimefilterDirective.prototype.setCSS = function() {
      return css;
    };

    EquipmentTimefilterDirective.prototype.setTemplate = function() {
      return view;
    };

    EquipmentTimefilterDirective.prototype.show = function($scope, element, attrs) {
      var dictToFormat, setGlDatePicker;
      dictToFormat = {
        now: "YYYY-MM-DD HH:mm:ss",
        day: "YYYY-MM-DD",
        week: "YYYY年第WW周",
        month: "YYYY-MM"
      };
      $scope.mode = "now";
      $scope.formatTime = moment().format(dictToFormat[$scope.mode]);
      $scope.tabs = [
        {
          title: "实时",
          key: "now",
          desc: "设备实时数据"
        }, {
          title: "日",
          key: "day",
          desc: "设备日历史数据"
        }, {
          title: "周",
          key: "week",
          desc: "设备周历史数据"
        }, {
          title: "月",
          key: "month",
          desc: "设备月历史数据"
        }
      ];
      $scope.selectMode = (function(_this) {
        return function(tab) {
          $scope.mode = tab;
          $scope.formatTime = moment().format(dictToFormat[tab]);
          _this.commonService.publishEventBus("equipment-time", {
            type: $scope.mode,
            time: $scope.formatTime
          });
          return setGlDatePicker($('.datepicker')[0], $scope.formatTime);
        };
      })(this);
      $scope.refreshTime = (function(_this) {
        return function(type) {
          var time;
          time = null;
          if (type === 0) {
            time = moment().format(dictToFormat[$scope.mode]);
          } else if (type === 1 && $scope.mode !== "week") {
            time = moment($scope.formatTime).add(1, $scope.mode + "s").format(dictToFormat[$scope.mode]);
          } else if (type === -1 && $scope.mode !== "week") {
            time = moment($scope.formatTime).subtract(1, $scope.mode + "s").format(dictToFormat[$scope.mode]);
          } else if (type === 1 && ($scope.mode = "week")) {
            time = moment().day("Monday").year($scope.formatTime.slice(0, 4)).week($scope.formatTime.slice(6, $scope.formatTime.length - 1)).add(1, "weeks").format(dictToFormat[$scope.mode]);
          } else if (type === -1 && ($scope.mode = "week")) {
            time = moment().day("Monday").year($scope.formatTime.slice(0, 4)).week($scope.formatTime.slice(6, $scope.formatTime.length - 1)).subtract(1, "weeks").format(dictToFormat[$scope.mode]);
          }
          $scope.formatTime = time;
          return _this.commonService.publishEventBus("equipment-time", {
            type: $scope.mode,
            time: $scope.formatTime
          });
        };
      })(this);
      $scope.selectDate = (function(_this) {
        return function() {
          return _this.commonService.publishEventBus("equipment-time", {
            type: $scope.mode,
            time: $scope.formatTime
          });
        };
      })(this);
      $scope.showSelect = (function(_this) {
        return function() {
          if ($('.gldp-default:first').offset().left === 0) {
            return $('.gldp-default:first').css({
              "left": $('.datepicker:first').offset().left + "px",
              "top": $('.datepicker:first').offset().top + "px"
            });
          }
        };
      })(this);
      return setGlDatePicker = function(element, value) {
        if (!value) {
          return;
        }
        if (value.indexOf("-") === -1) {
          value = moment().day("Monday").year(value.slice(0, 4)).week(value.slice(6, $scope.formatTime.length - 1));
        }
        return setTimeout((function(_this) {
          return function() {
            return gl = $(element).glDatePicker({
              dowNames: ["日", "一", "二", "三", "四", "五", "六"],
              monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
              selectedDate: moment(value).toDate(),
              onClick: function(target, cell, date, data) {
                return target.val(moment(date).format(dictToFormat[$scope.mode])).trigger("change");
              }
            });
          };
        })(this), 500);
      };
    };

    EquipmentTimefilterDirective.prototype.resize = function(scope) {};

    EquipmentTimefilterDirective.prototype.dispose = function(scope) {};

    return EquipmentTimefilterDirective;

  })(base.BaseDirective);
  return exports = {
    EquipmentTimefilterDirective: EquipmentTimefilterDirective
  };
});
