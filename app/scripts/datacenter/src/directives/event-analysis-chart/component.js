// Generated by IcedCoffeeScript 108.0.11

/*
* File: event-analysis-chart-directive
* User: David
* Date: 2019/11/04
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'echarts'], function(base, css, view, _, moment, echarts) {
  var EventAnalysisChartDirective, exports;
  EventAnalysisChartDirective = (function(_super) {
    __extends(EventAnalysisChartDirective, _super);

    function EventAnalysisChartDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "event-analysis-chart";
      EventAnalysisChartDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EventAnalysisChartDirective.prototype.setScope = function() {};

    EventAnalysisChartDirective.prototype.setCSS = function() {
      return css;
    };

    EventAnalysisChartDirective.prototype.setTemplate = function() {
      return view;
    };

    EventAnalysisChartDirective.prototype.show = function(scope, element, attrs) {
      var createChart, draw, getColors, getLegend, getLegendSelected, getSeries, legendMapping;
      if (!scope.firstload) {
        return;
      }
      legendMapping = {};
      scope.setting = {
        title: "站点告警",
        severities: _.sortBy(scope.project.typeModels.eventseverities.items, 'key')
      };
      scope.statistic = scope.parameters.statistic;
      scope.onWindowResize = (function(_this) {
        return function() {
          var deviceWidth;
          deviceWidth = document.documentElement.clientWidth;
          if (deviceWidth < 1025) {
            return scope.chartSeries = {
              radius: ['35%', '47%'],
              labelLine: {
                normal: {
                  length: -10
                }
              },
              legend: {
                itemGap: 5,
                width: '100%',
                left: '2%',
                right: '0%'
              }
            };
          } else {
            return scope.chartSeries = {
              radius: ['40%', '52%'],
              labelLine: {
                normal: {
                  length: 5
                }
              },
              legend: {
                orient: 'vertical',
                itemGap: 30,
                width: '100%',
                left: '2%',
                right: '10%'
              }
            };
          }
        };
      })(this);
      scope.onWindowResize();
      draw = function() {
        var lastSetting, lastStatistic;
        if (!scope.setting || !scope.statistic || (scope.statistic === lastStatistic && scope.setting === lastSetting)) {
          return;
        }
        lastSetting = scope.setting;
        lastStatistic = scope.statistic;
        scope.mychart.clear();
        scope.option = createChart(scope.setting, scope.statistic);
        return scope.mychart.setOption(scope.option, true);
      };
      getSeries = function(setting, statistic) {
        var d, definition, definitions, result, series, severities, severityData, value, _i, _j, _len, _len1, _ref, _ref1;
        definitions = (_ref = setting.severities) != null ? _ref : {};
        severities = (_ref1 = statistic.severities) != null ? _ref1 : {};
        severityData = [];
        for (_i = 0, _len = definitions.length; _i < _len; _i++) {
          definition = definitions[_i];
          value = severities[definition.model.severity];
          severityData.push({
            key: definition.model.severity,
            name: definition.model.name,
            value: value != null ? value : 0
          });
        }
        for (_j = 0, _len1 = severityData.length; _j < _len1; _j++) {
          d = severityData[_j];
          legendMapping[d != null ? d.name : void 0] = d != null ? d.key : void 0;
        }
        series = [
          {
            name: '告警等级',
            type: 'pie',
            radius: scope.chartSeries.radius,
            center: ['50%', '50%'],
            itemStyle: {
              normal: {
                label: {
                  formatter: "{b}({c})"
                }
              }
            },
            labelLine: scope.chartSeries.labelLine,
            data: severityData
          }
        ];
        return result = {
          severityData: severityData,
          series: series
        };
      };
      getLegend = function(setting) {
        var legend, severity, _i, _len, _ref;
        legend = [];
        _ref = setting != null ? setting.severities : void 0;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          severity = _ref[_i];
          legend.push(severity != null ? severity.model.name : void 0);
        }
        return legend;
      };
      getColors = function(setting) {
        var colors, severity, _i, _len, _ref;
        colors = [];
        _ref = setting != null ? setting.severities : void 0;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          severity = _ref[_i];
          colors.push(severity != null ? severity.model.color : void 0);
        }
        return colors;
      };
      getLegendSelected = function(series) {
        var item, legendSelected, _i, _len, _ref;
        legendSelected = {};
        _ref = series.severityData;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!item.value) {
            legendSelected[item.name] = true;
          }
        }
        return legendSelected;
      };
      createChart = function(setting, statistic) {
        var colors, legend, legendSelected, option, series, _ref;
        legend = getLegend(setting);
        colors = getColors(setting);
        series = getSeries(setting, statistic);
        legendSelected = getLegendSelected(series);
        return option = {
          title: {
            text: (_ref = setting.title) != null ? _ref : '告警统计信息',
            textStyle: {
              color: ["#ffffff"]
            },
            subtextStyle: {
              color: ["#ffffff"],
              align: 'center'
            },
            left: 'center',
            y: 10
          },
          tooltip: {
            trigger: 'item',
            formatter: "{a} <br/>{b} : {c} ({d}%)"
          },
          legend: {
            show: true,
            orient: 'horizontal',
            bottom: 20,
            itemGap: scope.chartSeries.legend.itemGap,
            itemWidth: 24,
            itemHeight: 16,
            width: scope.chartSeries.legend.width,
            left: scope.chartSeries.legend.left,
            right: scope.chartSeries.legend.right,
            formatter: "{name}",
            data: legend,
            selected: legendSelected,
            textStyle: {
              color: []
            }
          },
          toolbox: {
            show: true,
            left: '82%',
            top: '2%',
            feature: {
              mark: {
                show: false
              },
              dataView: {
                show: false,
                readOnly: false
              },
              restore: {
                show: false
              },
              saveAsImage: {
                show: true
              }
            }
          },
          calculable: false,
          color: colors,
          series: series.series
        };
      };
      scope.mychart = echarts.init(element[0]);
      scope.mychart.on('legendselectchanged', (function(_this) {
        return function(evt) {
          var key, legends, name, value, _ref, _ref1;
          legends = {};
          _ref = evt.selected;
          for (name in _ref) {
            value = _ref[name];
            key = legendMapping[name];
            legends[key] = value;
          }
          return (_ref1 = _this.commonService) != null ? _ref1.publishEventBus('event-statistic-phase-severity', {
            data: {
              legends: legends,
              change: evt.name
            }
          }) : void 0;
        };
      })(this));
      return scope.$watch('parameters.statistic', function(statistic) {
        if (!statistic) {
          return;
        }
        scope.statistic = scope.parameters.statistic;
        return draw();
      });
    };

    EventAnalysisChartDirective.prototype.resize = function(scope) {
      var _ref;
      scope.onWindowResize();
      return (_ref = scope.mychart) != null ? _ref.resize() : void 0;
    };

    EventAnalysisChartDirective.prototype.dispose = function(scope) {};

    return EventAnalysisChartDirective;

  })(base.BaseDirective);
  return exports = {
    EventAnalysisChartDirective: EventAnalysisChartDirective
  };
});
