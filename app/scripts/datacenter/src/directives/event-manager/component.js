// Generated by IcedCoffeeScript 108.0.12

/*
* File: event-manager-directive
* User: David
* Date: 2018/11/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'lodash', "moment", 'rx'], function(base, css, view, _, moment, rx) {
  var EventManagerDirective, exports;
  EventManagerDirective = (function(_super) {
    __extends(EventManagerDirective, _super);

    function EventManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      EventManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.id = "event-manager";
    }

    EventManagerDirective.prototype.setScope = function() {};

    EventManagerDirective.prototype.setCSS = function() {
      return css;
    };

    EventManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    EventManagerDirective.prototype.show = function(scope, element, attrs) {
      var ALL_EVENT_STATISTIC, EVENT_COMPLETED, changeStation, eventSeverity, getStatistic, processEvent, queryStationsEvent, statisticAllEvent, statisticAllEventLazy, statisticEvents, statisticEventsLazy, statisticStationEvents, statisticStationEventsLazy, subscribeStationEvent, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (!scope.firstload) {
        return;
      }
      window.debugEventManager = scope;
      getStatistic = function() {
        var statistic;
        return statistic = {
          counts: {
            confirmedEvents: 0,
            startEvents: 0,
            endEvents: 0,
            allEvents: 0
          },
          severities: {},
          severity: 0
        };
      };
      changeStation = (function(_this) {
        return function(stationId) {
          if (!stationId || scope.stationId === stationId) {
            return;
          }
          scope.stationId = stationId;
          scope.statistic = getStatistic();
          _this.getStation(scope, stationId);
          subscribeStationEvent(stationId);
          _this.commonService.publishEventBus("stationId", {
            stationId: stationId
          });
          return scope.$applyAsync();
        };
      })(this);
      scope.project.loadStations(null, (function(_this) {
        return function(err, stations) {
          var dataCenters;
          dataCenters = _.filter(stations, function(sta) {
            return (sta.model.parent === null || sta.model.parent === "") && sta.model.station.charAt(0) !== "_";
          });
          scope.datacenters = dataCenters;
          scope.stations = dataCenters;
          scope.station = dataCenters[0];
          return scope.parents = [];
        };
      })(this));
      scope.selectStation = (function(_this) {
        return function(station) {
          var _ref;
          scope.station = station;
          return changeStation(station != null ? (_ref = station.model) != null ? _ref.station : void 0 : void 0);
        };
      })(this);
      scope.selectChild = (function(_this) {
        return function(station) {
          var _ref;
          scope.stations = scope.station.stations;
          scope.parents.push(scope.station);
          scope.station = station;
          return changeStation(station != null ? (_ref = station.model) != null ? _ref.station : void 0 : void 0);
        };
      })(this);
      scope.selectParent = (function(_this) {
        return function(station) {
          var index, _ref, _ref1, _ref2;
          index = scope.parents.indexOf(station);
          scope.parents.splice(index, scope.parents.length - index);
          scope.station = station;
          changeStation(station != null ? (_ref = station.model) != null ? _ref.station : void 0 : void 0);
          return scope.stations = (_ref1 = (_ref2 = station.parentStation) != null ? _ref2.stations : void 0) != null ? _ref1 : scope.datacenters;
        };
      })(this);
      ALL_EVENT_STATISTIC = 'event-statistic/all';
      EVENT_COMPLETED = 'completed';
      scope.allEventsValue = 0;
      eventSeverity = (_ref = scope.project) != null ? (_ref1 = _ref.typeModels) != null ? (_ref2 = _ref1.eventseverities) != null ? _ref2.items : void 0 : void 0 : void 0;
      scope.selectAllEquipmentTypes = (function(_this) {
        return function() {
          scope.equipmentTypes = {};
          scope.equipmentTypesCount = 0;
          return _this.commonService.publishEventBus('event-list-equipmentTypes', []);
        };
      })(this);
      scope.selectEquipmentType = (function(_this) {
        return function(type) {
          var arr;
          if (scope.equipmentTypes.hasOwnProperty(type.type)) {
            delete scope.equipmentTypes[type.type];
            scope.equipmentTypesCount--;
          } else {
            scope.equipmentTypes[type.type] = type.type;
            scope.equipmentTypesCount++;
          }
          arr = [];
          _.forEach(scope.equipmentTypes, function(type) {
            return arr.push(type);
          });
          return _this.commonService.publishEventBus('event-list-equipmentTypes', arr);
        };
      })(this);
      statisticEvents = function() {
        var all, datacenter, datacenterCounts, datacenterSeverities, datacenterStatistic, event, k, key, station, stationCounts, stationSeverities, stationStatistic, statistic, statisticType, type, v, _i, _j, _len, _len1, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
        all = getStatistic();
        scope.statistics = {};
        scope.statistics[ALL_EVENT_STATISTIC] = all;
        _ref3 = scope.eventsArray;
        for (key in _ref3) {
          event = _ref3[key];
          if (!(event.phase !== EVENT_COMPLETED)) {
            continue;
          }
          key = "event-statistic/" + event.user + "/" + event.project + "/" + event.station;
          statistic = scope.statistics[key];
          if (!statistic) {
            statistic = getStatistic();
            scope.statistics[key] = statistic;
          }
          switch (event.phase) {
            case 'start':
              all.counts.startEvents++;
              statistic.counts.startEvents++;
              break;
            case 'end':
              all.endEvents++;
              statistic.counts.endEvents++;
              break;
            case 'confirm':
              all.confirmedEvents++;
              statistic.counts.confirmedEvents++;
          }
          if (statistic.severities.hasOwnProperty(event.severity)) {
            statistic.severities[event.severity] += 1;
          } else {
            statistic.severities[event.severity] = 1;
          }
          if (all.severities.hasOwnProperty(event.severity)) {
            all.severities[event.severity] += 1;
          } else {
            all.severities[event.severity] = 1;
          }
          if (statistic.severity < event.severity) {
            statistic.severity = event.severity;
          }
          all.counts.allEvents++;
          statistic.counts.allEvents++;
          if (statistic.types == null) {
            statistic.types = {};
          }
          type = event.equipmentType;
          if (statistic.types.hasOwnProperty(type)) {
            statisticType = statistic.types[type];
            statisticType.count++;
            if (event.severity > statisticType.severity) {
              statisticType.severity = event.severity;
            }
          } else {
            statistic.types[type] = {
              name: (_ref4 = _.find(scope.project.dictionary.equipmenttypes.items, function(tp) {
                return tp.key === type;
              })) != null ? _ref4.model.name : void 0,
              type: type,
              count: 1,
              severity: event.severity
            };
          }
        }
        _ref5 = scope.project.stations.items;
        for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
          station = _ref5[_i];
          key = "event-statistic/" + station.model.user + "/" + station.model.project + "/" + station.model.station;
          station.statistic = (_ref6 = scope.statistics[key]) != null ? _ref6 : getStatistic();
        }
        _ref7 = scope.datacenters;
        _results = [];
        for (_j = 0, _len1 = _ref7.length; _j < _len1; _j++) {
          datacenter = _ref7[_j];
          datacenterStatistic = datacenter.statistic;
          datacenterCounts = datacenterStatistic.counts;
          datacenterSeverities = datacenterStatistic.severities;
          if (datacenterStatistic.types == null) {
            datacenterStatistic.types = {};
          }
          _results.push((function() {
            var _k, _len2, _ref8, _ref9, _results1;
            _ref8 = datacenter.stations;
            _results1 = [];
            for (_k = 0, _len2 = _ref8.length; _k < _len2; _k++) {
              station = _ref8[_k];
              stationStatistic = station.statistic;
              stationCounts = stationStatistic.counts;
              datacenterCounts.startEvents += stationCounts.startEvents;
              datacenterCounts.endEvents += stationCounts.endEvents;
              datacenterCounts.confirmedEvents += stationCounts.confirmedEvents;
              datacenterCounts.allEvents += stationCounts.allEvents;
              stationSeverities = stationStatistic.severities;
              for (k in stationSeverities) {
                v = stationSeverities[k];
                datacenterSeverities[k] = ((_ref9 = datacenterSeverities[k]) != null ? _ref9 : 0) + v;
              }
              if (datacenterStatistic.severity < stationStatistic.severity) {
                datacenterStatistic.severity = stationStatistic.severity;
              }
              _results1.push((function() {
                var _ref10, _results2;
                _ref10 = stationStatistic.types;
                _results2 = [];
                for (key in _ref10) {
                  type = _ref10[key];
                  if (datacenterStatistic.types.hasOwnProperty(type.type)) {
                    statisticType = datacenterStatistic.types[type.type];
                    statisticType.count += type.count;
                    if (type.severity > statisticType.severity) {
                      _results2.push(statisticType.severity = type.severity);
                    } else {
                      _results2.push(void 0);
                    }
                  } else {
                    _results2.push(datacenterStatistic.types[type.type] = {
                      type: type.type,
                      count: type.count,
                      severity: type.severity
                    });
                  }
                }
                return _results2;
              })());
            }
            return _results1;
          })());
        }
        return _results;
      };
      statisticEventsLazy = _.throttle(statisticEvents, 200, {
        leading: false
      });
      scope.getEventColor = function(severity) {
        var color, _ref3, _ref4, _ref5, _ref6;
        return color = (_ref3 = scope.project) != null ? (_ref4 = _ref3.dictionary) != null ? (_ref5 = _ref4.eventseverities) != null ? (_ref6 = _ref5.getItem(severity)) != null ? _ref6.model.color : void 0 : void 0 : void 0 : void 0;
      };
      statisticStationEvents = function() {
        var event, n, statistic, statisticType, type, _i, _len, _ref3, _ref4, _ref5, _ref6, _ref7;
        statistic = getStatistic();
        n = 0;
        _ref3 = scope.eventsArray;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          event = _ref3[_i];
          switch (event.phase) {
            case 'start':
              statistic.counts.startEvents++;
              break;
            case 'confirm':
              statistic.counts.confirmedEvents++;
              break;
            case 'end':
              statistic.counts.endEvents++;
              break;
            default:
              console.log(n++, event);
              continue;
          }
          statistic.counts.allEvents++;
          if (statistic.severities.hasOwnProperty(event.severity)) {
            statistic.severities[event.severity] += 1;
          } else {
            statistic.severities[event.severity] = 1;
          }
          if (event.severity > statistic.severity) {
            statistic.severity = event.severity;
          }
          if (statistic.types == null) {
            statistic.types = {};
          }
          type = event.equipmentType;
          if (statistic.types.hasOwnProperty(type)) {
            statisticType = statistic.types[type];
            statisticType.count++;
            if (event.severity > statisticType.severity) {
              statisticType.severity = event.severity;
            }
          } else {
            statistic.types[type] = {
              name: (_ref4 = _.find((_ref5 = scope.project) != null ? (_ref6 = _ref5.dictionary) != null ? (_ref7 = _ref6.equipmenttypes) != null ? _ref7.items : void 0 : void 0 : void 0, function(tp) {
                return tp.key === type;
              })) != null ? _ref4.model.name : void 0,
              type: type,
              count: 1,
              severity: event.severity
            };
          }
        }
        scope.statistic = statistic;
        return scope.$applyAsync();
      };
      statisticStationEventsLazy = _.throttle(statisticStationEvents, 1000, {
        leading: false
      });
      scope.allEvents = {};
      queryStationsEvent = (function(_this) {
        return function() {
          var i, _ref3, _ref4, _ref5, _ref6;
          if (!((_ref3 = scope.project) != null ? (_ref4 = _ref3.stations) != null ? _ref4.items.length : void 0 : void 0) > 0) {
            return;
          }
          i = 0;
          return (_ref5 = scope.project) != null ? (_ref6 = _ref5.stations) != null ? _ref6.items.forEach(function(station) {
            return _this.commonService.reportingService.queryEventRecords({
              filter: station.getIds(),
              padding: null,
              sorting: {
                startTime: 1
              }
            }, function(err, records) {
              var event, _i, _len, _results;
              if (err) {
                return console.log("err:", err);
              }
              i++;
              if (records.length > 0) {
                _results = [];
                for (_i = 0, _len = records.length; _i < _len; _i++) {
                  event = records[_i];
                  _results.push(scope.allEvents["" + event.user + "/" + event.project + "/" + event.station + "/" + event.equipment + "/" + event.event + "/" + event.startTime] = event);
                }
                return _results;
              }
            });
          }) : void 0 : void 0;
        };
      })(this);
      statisticAllEvent = (function(_this) {
        return function() {
          var addStations, id, ids, station, stationsList, _i, _len, _ref3, _ref4, _ref5, _ref6, _ref7;
          if (!((_ref3 = scope.project) != null ? (_ref4 = _ref3.stations) != null ? _ref4.items.length : void 0 : void 0) > 0) {
            return;
          }
          scope.statistic2 = {};
          stationsList = [];
          addStations = function(ids, station) {
            var sta, _i, _len, _ref5, _results;
            ids.push(station.model.station);
            _ref5 = station.stations;
            _results = [];
            for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
              sta = _ref5[_i];
              ids.push(sta.model.station);
              _results.push(addStations(ids, sta));
            }
            return _results;
          };
          _ref7 = (_ref5 = scope.project) != null ? (_ref6 = _ref5.stations) != null ? _ref6.items : void 0 : void 0;
          for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
            station = _ref7[_i];
            id = station.model.station;
            scope.statistic2[id] = {
              ids: [],
              count: 0
            };
            stationsList.push(id);
            ids = [];
            ids.push(id);
            addStations(ids, station);
            scope.statistic2[id].ids = _.uniq(ids);
          }
          return _.forEach(scope.allEvents, function(event) {
            var sta, _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = stationsList.length; _j < _len1; _j++) {
              sta = stationsList[_j];
              if (scope.statistic2[sta].ids.includes(event.station)) {
                if (event.phase !== 'completed') {
                  _results.push(scope.statistic2[sta].count += 1);
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        };
      })(this);
      statisticAllEventLazy = _.throttle(statisticAllEvent, 200, {
        leading: false
      });
      scope.events = {};
      scope.eventsArray = [];
      scope.startEvents = {};
      scope.eventSubscriptionArray = {};
      subscribeStationEvent = (function(_this) {
        return function(stationId) {
          var addChildrenStations, projectName, station, stationIdArray, userName, _ref3, _ref4;
          scope.events = {};
          scope.eventsArray = [];
          scope.startEvents = {};
          queryStationsEvent();
          stationIdArray = [];
          userName = scope.project.model.user;
          projectName = scope.project.model.project;
          stationIdArray.push(stationId);
          station = scope != null ? (_ref3 = scope.project) != null ? (_ref4 = _ref3.stations) != null ? _ref4.getItem(userName + "_" + projectName + "_" + stationId) : void 0 : void 0 : void 0;
          scope.station = station;
          addChildrenStations = function(sta) {
            return sta.stations.forEach(function(s) {
              var _ref5, _ref6;
              if (s != null ? (_ref5 = s.model) != null ? _ref5.station : void 0 : void 0) {
                stationIdArray.push(s.model.station);
              }
              if ((s != null ? (_ref6 = s.stations) != null ? _ref6.length : void 0 : void 0) > 0) {
                return addChildrenStations(s);
              }
            });
          };
          addChildrenStations(station);
          station.stationIdArray = stationIdArray;
          return stationIdArray.forEach(function(id) {
            var eventSubscription, filter, _ref5;
            filter = {
              user: scope.project.model.user,
              project: scope.project.model.project,
              station: id
            };
            if ((_ref5 = scope.eventSubscriptionArray[id]) != null) {
              _ref5.dispose();
            }
            eventSubscription = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, msg) {
              var event;
              if (err) {
                return console.log(err);
              }
              event = msg.message;
              scope.allEvents["" + event.user + "/" + event.project + "/" + event.station + "/" + event.equipment + "/" + event.event + "/" + event.startTime] = event;
              statisticAllEventLazy();
              processEvent(msg);
              statisticStationEventsLazy();
              return statisticEventsLazy();
            });
            return scope.eventSubscriptionArray[id] = eventSubscription;
          });
        };
      })(this);
      processEvent = function(data) {
        var event, k, key, message, v;
        if (!data) {
          return;
        }
        message = data.message;
        key = "" + message.user + "." + message.project + "." + message.station + "." + message.equipment + "." + message.event + "." + message.severity + "." + message.startTime;
        if (scope.events.hasOwnProperty(key)) {
          event = scope.events[key];
          for (k in message) {
            v = message[k];
            event[k] = v;
          }
          if (event.endTime) {
            delete scope.startEvents[key];
          }
        } else {
          event = angular.copy(message);
          scope.events[key] = event;
          if (scope.station.stationIdArray.includes(event.station)) {
            scope.eventsArray.push(event);
          }
          event.color = 'grey';
          eventSeverity.forEach((function(_this) {
            return function(e) {
              var _ref3, _ref4;
              if ((event != null ? event.severity : void 0) === (e != null ? (_ref3 = e.model) != null ? _ref3.severity : void 0 : void 0)) {
                return event.color = e != null ? (_ref4 = e.model) != null ? _ref4.color : void 0 : void 0;
              }
            };
          })(this));
          if (!event.endTime) {
            scope.startEvents[key] = event;
          }
        }
        if (message.phase === 'completed') {
          event = scope.events[key];
          delete scope.events[key];
          delete scope.startEvents[key];
          _.remove(scope.eventsArray, (function(_this) {
            return function(e) {
              return e["_id"] === event["_id"];
            };
          })(this));
          scope.$applyAsync();
        }
        return event;
      };
      scope.selectDatacenter = (function(_this) {
        return function(datacenter) {
          var stationId;
          if (!datacenter) {
            return;
          }
          scope.datacenter = datacenter;
          stationId = datacenter.model.station;
          changeStation(stationId);
          return scope.$applyAsync();
        };
      })(this);
      scope.selectStation = (function(_this) {
        return function(station) {
          var stationId, _ref3;
          if (!station) {
            return;
          }
          stationId = station != null ? (_ref3 = station.model) != null ? _ref3.station : void 0 : void 0;
          return changeStation(stationId);
        };
      })(this);
      scope.selectAllEquipmentTypes();
      if ((_ref3 = scope.busSubscription) != null) {
        _ref3.dispose();
      }
      scope.busSubscription = this.commonService.subscribeEventBus('stationId', (function(_this) {
        return function(msg) {
          var stationId;
          if (!msg) {
            return;
          }
          stationId = msg.message.stationId;
          return changeStation(stationId);
        };
      })(this));
      scope.selectParent(scope.datacenters[0]);
      scope.selectChild(((_ref4 = scope.datacenter) != null ? _ref4.stations[0] : void 0) || ((_ref5 = scope.project) != null ? (_ref6 = _ref5.stations) != null ? _ref6.items[0] : void 0 : void 0));
      return scope.selectDatacenter(scope.datacenters[0]);
    };

    EventManagerDirective.prototype.resize = function(scope) {};

    EventManagerDirective.prototype.dispose = function(scope) {
      var sub, _ref, _ref1;
      for (sub in scope.eventSubscriptionArray) {
        if ((_ref = scope.eventSubscriptionArray[sub]) != null) {
          _ref.dispose();
        }
      }
      scope.eventSubscriptionArray = {};
      return (_ref1 = scope.busSubscription) != null ? _ref1.dispose() : void 0;
    };

    return EventManagerDirective;

  })(base.BaseDirective);
  return exports = {
    EventManagerDirective: EventManagerDirective
  };
});
