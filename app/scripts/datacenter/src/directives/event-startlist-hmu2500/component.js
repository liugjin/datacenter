// Generated by IcedCoffeeScript 108.0.13

/*
* File: event-startlist-hmu2500-directive
* User: David
* Date: 2020/04/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var EventStartlistHmu2500Directive, exports;
  EventStartlistHmu2500Directive = (function(_super) {
    __extends(EventStartlistHmu2500Directive, _super);

    function EventStartlistHmu2500Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "event-startlist-hmu2500";
      EventStartlistHmu2500Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    EventStartlistHmu2500Directive.prototype.setScope = function() {};

    EventStartlistHmu2500Directive.prototype.setCSS = function() {
      return css;
    };

    EventStartlistHmu2500Directive.prototype.setTemplate = function() {
      return view;
    };

    EventStartlistHmu2500Directive.prototype.show = function(scope, element, attrs) {
      var confirmActiveEvent2, confirmEndKeyEvent, confirmStationEvents2, eventSeverity, getPeriod, getSortedEventArray, nextPeriod, previousPeriod, processEvent, subscribeStationEvent, updateDuration, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (!scope.firstload) {
        return;
      }
      window.debugR = scope;
      scope.eventLiveSession = this.commonService.eventLiveSession;
      eventSeverity = (_ref = scope.project) != null ? (_ref1 = _ref.dictionary) != null ? (_ref2 = _ref1.eventseverities) != null ? _ref2.items : void 0 : void 0 : void 0;
      $(element.find('#event-startlist-prompt-modal')).modal();
      scope.prompt = function(title, message, callback, enableComment, comment, password, preCommand) {
        var titleSplit;
        titleSplit = title.split(":");
        scope.modal = {
          tips: titleSplit[0],
          info: titleSplit[1],
          title: title,
          message: message,
          enableComment: enableComment,
          comment: comment,
          passwordFlag: password,
          password: "",
          preCommand: preCommand,
          confirm: function(ok) {
            return typeof callback === "function" ? callback(ok, this.comment, this.password) : void 0;
          },
          preConfirm: function() {
            return typeof callback === "function" ? callback("preCommand", this.comment, this.password) : void 0;
          }
        };
        $('#event-list-prompt-modal').modal('open');
      };
      updateDuration = (function(_this) {
        return function() {
          return scope.timer = setInterval(function() {
            var event, key, progress, _ref3;
            _ref3 = scope.startEvents;
            for (key in _ref3) {
              event = _ref3[key];
              event.duration = new Date() - event.startTime2;
              progress = (event.duration / 3600000 * 100).toFixed(1);
              event.progress = "" + progress + "%";
            }
            return scope.$applyAsync();
          }, 1000);
        };
      })(this);
      scope.confirmActiveEvent = function(event, forceToEnd) {
        var action, message, title;
        if (!event) {
          return;
        }
        scope.modal = {};
        action = forceToEnd ? "强制结束" : "确认";
        title = "" + action + "活动告警: " + event.stationName + " / " + event.equipmentName + " / " + event.eventName;
        message = "请输入备注信息：";
        $('#event-startlist-prompt-modal').modal('open');
        return scope.prompt(title, message, (function(_this) {
          return function(ok, comment) {
            if (!ok) {
              return;
            }
            return confirmActiveEvent2(event, comment, forceToEnd);
          };
        })(this), true, event.comment);
      };
      confirmActiveEvent2 = function(event, comment, forceToEnd) {
        var data;
        data = {
          _id: event._id,
          user: event.user,
          project: event.project,
          station: event.station,
          equipment: event.equipment,
          event: event.event
        };
        scope.confirmData(data, comment, forceToEnd);
        if (forceToEnd) {
          return scope.eventLiveSession.forceEndEvent(data);
        } else {
          return scope.eventLiveSession.confirmEvent(data);
        }
      };
      scope.endKeyEvents = (function(_this) {
        return function(station) {
          var action, filterStation, message, staData, title;
          staData = _.map(_this.commonService.loadStationChildren(station, true), function(mps) {
            return mps.model.station;
          });
          filterStation = _.filter(scope.eventsArray, function(evt) {
            var _ref3;
            return _ref3 = evt.station, __indexOf.call(staData, _ref3) >= 0;
          });
          if (filterStation.length === 0) {
            _this.display("", "当前机房及其子机房暂无告警！", 1200);
            return false;
          }
          action = "一键结束";
          title = "" + action + "机房及其子机房下属所有告警: " + station.model.name;
          message = "请输入备注信息：";
          $('#event-startlist-prompt-modal').modal('open');
          return scope.prompt(title, message, function(ok, comment) {
            if (!ok) {
              return;
            }
            return confirmEndKeyEvent(station, comment, true, filterStation);
          }, true);
        };
      })(this);
      confirmEndKeyEvent = (function(_this) {
        return function(station, comment, forceToEnd, filterStation) {
          return _.each(filterStation, function(event) {
            var data;
            data = {
              _id: event._id,
              user: event.user,
              project: event.project,
              station: event.station,
              equipment: event.equipment,
              event: event.event
            };
            scope.confirmData(data, comment, forceToEnd);
            return scope.eventLiveSession.forceEndEvent(data);
          });
        };
      })(this);
      scope.confirmStationEvents = function(station, forceToEnd) {
        var action, message, title;
        action = forceToEnd ? "强制结束" : "确认";
        title = "" + action + "机房及其子机房下属所有告警: " + station.model.name;
        message = "请输入备注信息：";
        $('#event-startlist-prompt-modal').modal('open');
        return scope.prompt(title, message, (function(_this) {
          return function(ok, comment) {
            if (!ok) {
              return;
            }
            return confirmStationEvents2(station, comment, forceToEnd);
          };
        })(this), true);
      };
      confirmStationEvents2 = function(station, comment, forceToEnd) {
        var data;
        data = station.getIds();
        data.stations = station.stationIds;
        scope.confirmData(data, comment, forceToEnd);
        return scope.eventLiveSession.confirmAllEvents(data);
      };
      scope.confirmData = function(data, comment, forceToEnd) {
        var _ref3, _ref4;
        data.operator = (_ref3 = scope.$root) != null ? _ref3.user.user : void 0;
        data.operatorName = (_ref4 = scope.$root) != null ? _ref4.user.name : void 0;
        data.confirmTime = new Date;
        data.comment = comment;
        data.forceToEnd = forceToEnd;
        return data;
      };
      scope.predicate = "index";
      scope.reverse = false;
      scope.sortBy = function(predicate) {
        if (scope.predicate === predicate) {
          return scope.reverse = !scope.reverse;
        } else {
          scope.predicate = predicate;
          return scope.reverse = true;
        }
      };
      scope.filterEvent = function() {
        return (function(_this) {
          return function(event) {
            var _ref3, _ref4;
            if (scope.statisticLegends[event.phase] === false || scope.statisticLegends[event.severity] === false) {
              return false;
            }
            if (scope.eventType && scope.eventType !== event.eventType) {
              return false;
            }
            if (((_ref3 = scope.equipmentTypes) != null ? _ref3.length : void 0) && ((_ref4 = scope.equipmentTypes) != null ? _ref4.indexOf(event.equipmentType) : void 0) === -1) {
              return false;
            }
            if (scope.search && scope.search !== "" && event.equipmentName.indexOf(scope.search) === -1 && event.stationName.indexOf(scope.search) === -1 && event.title.indexOf(scope.search) === -1) {
              return false;
            }
            return true;
          };
        })(this);
      };
      scope.filterStationEventsResult = null;
      scope.selectedPage = 1;
      scope.filterStationEvents = function() {
        var events, pageCount, result, _i, _results;
        scope.eventsArray;
        events = _.filter(scope.eventsArray, scope.filterEvent());
        pageCount = Math.ceil(events.length / scope.parameters.pageItem);
        if (scope.selectedPage > pageCount) {
          this.changePage(pageCount);
        }
        result = {
          pageCount: pageCount,
          pages: (function() {
            _results = [];
            for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this)
        };
        scope.filterStationEventsResult = result;
        return result;
      };
      getSortedEventArray = (function(_this) {
        return function() {
          var events, f, result;
          f = _.filter(scope.eventsArray, scope.filterEvent());
          events = _.sortBy(f, function(e) {
            return e[scope.predicate];
          });
          if (scope.reverse) {
            result = events.reverse();
          } else {
            result = events;
          }
          return result;
        };
      })(this);
      scope.selectNext = (function(_this) {
        return function() {
          var events, index;
          events = getSortedEventArray();
          index = events.indexOf(scope.selectedEvent);
          if (index + 1 < events.length - 1) {
            return scope.selectEvent(events[index + 1]);
          }
        };
      })(this);
      scope.selectPrevious = (function(_this) {
        return function() {
          var events, index;
          events = getSortedEventArray();
          index = events.indexOf(scope.selectedEvent);
          if (index - 1 >= 0) {
            return scope.selectEvent(events[index - 1]);
          }
        };
      })(this);
      scope.changePage = function(page) {
        if (page < 1 || page > scope.filterStationEventsResult.pageCount) {
          return;
        }
        return scope.selectedPage = page;
      };
      scope.events = {};
      scope.eventsArray = [];
      scope.startEvents = {};
      scope.eventSubscriptionArray = [];
      subscribeStationEvent = (function(_this) {
        return function(stationId) {
          var addChildrenStations, projectName, station, stationIdArray, userName, _ref3, _ref4;
          scope.events = {};
          scope.eventsArray = [];
          scope.startEvents = {};
          scope.eventSubscriptionArray.forEach(function(sub) {
            return sub.dispose();
          });
          stationIdArray = [];
          userName = scope.project.model.user;
          projectName = scope.project.model.project;
          stationIdArray.push(stationId);
          station = scope != null ? (_ref3 = scope.project) != null ? (_ref4 = _ref3.stations) != null ? _ref4.getItem(userName + "_" + projectName + "_" + stationId) : void 0 : void 0 : void 0;
          scope.station = station;
          if (!station) {
            return;
          }
          addChildrenStations = function(sta) {
            return sta.stations.forEach(function(s) {
              var _ref5, _ref6;
              if (s != null ? (_ref5 = s.model) != null ? _ref5.station : void 0 : void 0) {
                stationIdArray.push(s.model.station);
              }
              if ((s != null ? (_ref6 = s.stations) != null ? _ref6.length : void 0 : void 0) > 0) {
                return addChildrenStations(s);
              }
            });
          };
          addChildrenStations(station);
          return stationIdArray.forEach(function(id) {
            var eventSubscription, filter;
            filter = {
              user: scope.project.model.user,
              project: scope.project.model.project,
              station: id
            };
            eventSubscription = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, msg) {
              if (err) {
                return console.log(err);
              }
              return processEvent(msg.message);
            });
            return scope.eventSubscriptionArray.push(eventSubscription);
          });
        };
      })(this);
      processEvent = function(message) {
        var event, key;
        if (!message) {
          return;
        }
        event = angular.copy(message);
        event.color = 'grey';
        event.startTime2 = new Date(event.startTime);
        eventSeverity.forEach((function(_this) {
          return function(e) {
            var _ref3, _ref4;
            if ((event != null ? event.severity : void 0) === (e != null ? (_ref3 = e.model) != null ? _ref3.severity : void 0 : void 0)) {
              return event.color = e != null ? (_ref4 = e.model) != null ? _ref4.color : void 0 : void 0;
            }
          };
        })(this));
        key = "" + message.user + "." + message.project + "." + message.station + "." + message.equipment + "." + message.event + "." + message.severity + "." + message.startTime;
        scope.events[key] = event;
        if (event.endTime) {
          delete scope.events[key];
        }
        scope.eventsArray = _.values(scope.events);
        return event;
      };
      scope.selectedEvent = null;
      scope.selectEvent = function(event) {
        scope.selectedEvent = event;
        return scope.queryEventRecords(event);
      };
      scope.eventRecordTypes = [
        {
          type: '60minutes',
          name: '60分钟事件记录'
        }, {
          type: 'hour',
          name: '小时事件记录'
        }, {
          type: 'day',
          name: '今日事件记录'
        }, {
          type: 'week',
          name: '本周事件记录'
        }, {
          type: 'month',
          name: '本月事件记录'
        }, {
          type: 'year',
          name: '本年事件记录'
        }
      ];
      scope.eventRecordType = scope.eventRecordTypes[2];
      scope.selectEventRecordType = function(type) {
        if (type == null) {
          type = scope.eventRecordType;
        }
        return scope.eventRecordType = type;
      };
      getPeriod = function(type) {
        var endTime, startTime;
        if (type == null) {
          type = scope.eventRecordType;
        }
        switch (type.type) {
          case '60minutes':
            startTime = moment().subtract(60, 'minutes');
            endTime = moment();
            break;
          case 'hour':
            startTime = moment().startOf('hour');
            endTime = moment().endOf('hour');
            break;
          case 'day':
            startTime = moment().startOf('day');
            endTime = moment().endOf('day');
            break;
          case 'week':
            startTime = moment().startOf('week');
            endTime = moment().endOf('week');
            break;
          case 'month':
            startTime = moment().startOf('month');
            endTime = moment().endOf('month');
            break;
          case 'year':
            startTime = moment().startOf('year');
            endTime = moment().endOf('year');
            break;
          default:
            startTime = moment().subtract(60, 'minutes');
            endTime = moment();
        }
        return scope.period = {
          startTime: startTime,
          endTime: endTime,
          type: type.type
        };
      };
      nextPeriod = function() {
        var endTime, startTime;
        if (!scope.period) {
          return getPeriod();
        }
        switch (scope.period.type) {
          case '60minutes':
            startTime = scope.period.endTime;
            endTime = moment(scope.period.endTime).add(60, 'minutes');
            break;
          case 'hour':
            startTime = moment(scope.period.startTime).add(1, 'hour').startOf('hour');
            endTime = moment(scope.period.startTime).add(1, 'hour').endOf('hour');
            break;
          case 'day':
            startTime = moment(scope.period.startTime).add(1, 'day').startOf('day');
            endTime = moment(scope.period.startTime).add(1, 'day').endOf('day');
            break;
          case 'week':
            startTime = moment(scope.period.startTime).add(1, 'week').startOf('week');
            endTime = moment(scope.period.startTime).add(1, 'week').endOf('week');
            break;
          case 'month':
            startTime = moment(scope.period.startTime).add(1, 'month').startOf('month');
            endTime = moment(scope.period.startTime).add(1, 'month').endOf('month');
            break;
          case 'year':
            startTime = moment(scope.period.startTime).add(1, 'year').startOf('year');
            endTime = moment(scope.period.startTime).add(1, 'year').endOf('year');
            break;
          default:
            startTime = scope.period.endTime;
            endTime = moment(scope.period.endTime).add(60, 'minutes');
        }
        return scope.period = {
          startTime: startTime,
          endTime: endTime,
          type: scope.period.type
        };
      };
      previousPeriod = function() {
        var endTime, startTime;
        if (!scope.period) {
          return getPeriod();
        }
        switch (scope.period.type) {
          case '60minutes':
            startTime = moment(scope.period.startTime).subtract(60, 'minutes');
            endTime = scope.period.startTime;
            break;
          case 'hour':
            startTime = moment(scope.period.startTime).subtract(1, 'hour').startOf('hour');
            endTime = moment(scope.period.startTime).subtract(1, 'hour').endOf('hour');
            break;
          case 'day':
            startTime = moment(scope.period.startTime).subtract(1, 'day').startOf('day');
            endTime = moment(scope.period.startTime).subtract(1, 'day').endOf('day');
            break;
          case 'week':
            startTime = moment(scope.period.startTime).subtract(1, 'week').startOf('week');
            endTime = moment(scope.period.startTime).subtract(1, 'week').endOf('week');
            break;
          case 'month':
            startTime = moment(scope.period.startTime).subtract(1, 'month').startOf('month');
            endTime = moment(scope.period.startTime).subtract(1, 'month').endOf('month');
            break;
          case 'year':
            startTime = moment(scope.period.startTime).subtract(1, 'year').startOf('year');
            endTime = moment(scope.period.startTime).subtract(1, 'year').endOf('year');
            break;
          default:
            startTime = moment(scope.period.startTime).subtract(60, 'minutes');
            endTime = scope.period.startTime;
        }
        return scope.period = {
          startTime: startTime,
          endTime: endTime,
          type: scope.period.type
        };
      };
      scope.eventRecords = [];
      scope.queryEventRecords = (function(_this) {
        return function(event, periodType, page, pageItems) {
          var endTime, paging, period, sorting, startTime, _ref3;
          if (page == null) {
            page = 1;
          }
          if (pageItems == null) {
            pageItems = 20;
          }
          switch (periodType) {
            case 'next':
              period = nextPeriod();
              break;
            case 'previous':
              period = previousPeriod();
              break;
            case 'refresh':
              period = (_ref3 = scope.period) != null ? _ref3 : getPeriod();
              break;
            default:
              period = getPeriod();
          }
          event.getIds = function() {
            return {
              user: event.user,
              project: event.project,
              station: event.station,
              equipment: event.equipment,
              event: event.event
            };
          };
          paging = {
            page: page,
            pageItems: pageItems
          };
          sorting = {};
          sorting[scope.predicate] = scope.reverse ? -1 : 1;
          scope.eventRecordsParameters = {
            event: event,
            queryTime: moment(),
            periodType: periodType,
            paging: paging,
            sorting: sorting,
            predicate: "index",
            reverse: false
          };
          scope.eventRecords = [];
          startTime = moment(new Date).format("YYYY-01-01 00:00:00");
          endTime = moment(new Date).format("YYYY-MM-DD hh:mm:ss");
          return _this.commonService.queryEventRecords(event, startTime, endTime, null, function(err, records) {
            var _i, _len;
            if (records) {
              for (_i = 0, _len = records.length; _i < _len; _i++) {
                event = records[_i];
                eventSeverity.forEach(function(e) {
                  var _ref4, _ref5;
                  if ((event != null ? event.severity : void 0) === (e != null ? (_ref4 = e.model) != null ? _ref4.severity : void 0 : void 0)) {
                    return event.color = e != null ? (_ref5 = e.model) != null ? _ref5.color : void 0 : void 0;
                  }
                });
                scope.eventRecords.push(event);
              }
              return scope.$applyAsync();
            }
          });
        };
      })(this);
      updateDuration();
      scope.eventRecordsSort = (function(_this) {
        return function(predicate) {
          if (scope.eventRecordsParameters.predicate === predicate) {
            return scope.eventRecordsParameters.reverse = !scope.eventRecordsParameters.reverse;
          } else {
            scope.eventRecordsParameters.predicate = predicate;
            return scope.eventRecordsParameters.reverse = true;
          }
        };
      })(this);
      scope.statisticLegends = {};
      if ((_ref3 = scope.eventBus1) != null) {
        _ref3.dispose();
      }
      scope.eventBus1 = this.commonService.subscribeEventBus('event-statistic-phase-severity', (function(_this) {
        return function(d) {
          var k, v, _ref4;
          _ref4 = d.message.data.legends;
          for (k in _ref4) {
            v = _ref4[k];
            scope.statisticLegends[k] = v;
          }
          return scope.$applyAsync();
        };
      })(this));
      if ((_ref4 = scope.eventBus2) != null) {
        _ref4.dispose();
      }
      scope.eventBus2 = this.commonService.subscribeEventBus('event-list-eventType', (function(_this) {
        return function(msg) {
          scope.eventType = msg.message;
          return scope.$applyAsync();
        };
      })(this));
      if ((_ref5 = scope.eventBus3) != null) {
        _ref5.dispose();
      }
      scope.eventBus3 = this.commonService.subscribeEventBus('event-list-equipmentTypes', (function(_this) {
        return function(msg) {
          scope.equipmentTypes = msg.message;
          _this.commonService.publishEventBus('event-equipment-scope-publish', true);
          return scope.$applyAsync();
        };
      })(this));
      if ((_ref6 = scope.eventBus4) != null) {
        _ref6.dispose();
      }
      scope.eventBus4 = this.commonService.subscribeEventBus('search', (function(_this) {
        return function(msg) {
          scope.search = msg.message;
          return scope.$applyAsync();
        };
      })(this));
      if ((_ref7 = scope.eventBus5) != null) {
        _ref7.dispose();
      }
      scope.eventBus5 = this.commonService.subscribeEventBus('stationId', (function(_this) {
        return function(msg) {
          var stationId;
          stationId = msg.message.stationId;
          if (!stationId) {
            return;
          }
          subscribeStationEvent(stationId);
          return scope.$applyAsync();
        };
      })(this));
      return scope.$watch("parameters.stationId", (function(_this) {
        return function(stationId) {
          if (!stationId) {
            return;
          }
          return subscribeStationEvent(stationId);
        };
      })(this));
    };

    EventStartlistHmu2500Directive.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      clearInterval(scope.timer);
      scope.eventSubscriptionArray.forEach((function(_this) {
        return function(sub) {
          return sub.dispose();
        };
      })(this));
      if ((_ref = scope.eventBus1) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.eventBus2) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = scope.eventBus3) != null) {
        _ref2.dispose();
      }
      if ((_ref3 = scope.eventBus4) != null) {
        _ref3.dispose();
      }
      return (_ref4 = scope.eventBus5) != null ? _ref4.dispose() : void 0;
    };

    return EventStartlistHmu2500Directive;

  })(base.BaseDirective);
  return exports = {
    EventStartlistHmu2500Directive: EventStartlistHmu2500Directive
  };
});
