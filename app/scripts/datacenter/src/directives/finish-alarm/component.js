// Generated by IcedCoffeeScript 108.0.13

/*
* File: finish-alarm-directive
* User: David
* Date: 2020/01/02
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var FinishAlarmDirective, exports;
  FinishAlarmDirective = (function(_super) {
    __extends(FinishAlarmDirective, _super);

    function FinishAlarmDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "finish-alarm";
      FinishAlarmDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    FinishAlarmDirective.prototype.setScope = function() {};

    FinishAlarmDirective.prototype.setCSS = function() {
      return css;
    };

    FinishAlarmDirective.prototype.setTemplate = function() {
      return view;
    };

    FinishAlarmDirective.prototype.show = function(scope, element, attrs) {
      var checkFilter, checkMsg, esAllStation, paramsType, _ref, _ref1;
      scope.paraName = scope.parameters.name;
      paramsType = scope.parameters.type.split(" ");
      scope.headers = [
        {
          headerName: "告警级别",
          field: "alarmRank"
        }, {
          headerName: "站点名称",
          field: "stationName"
        }, {
          headerName: "设备名称",
          field: "equipName"
        }, {
          headerName: "告警名称",
          field: "alarmName"
        }, {
          headerName: "开始值",
          field: "startVal"
        }, {
          headerName: "结束值",
          field: "endVal"
        }, {
          headerName: "开始时间",
          field: "startTime"
        }, {
          headerName: "结束时间",
          field: "endTime"
        }, {
          headerName: "持续时间",
          field: "sustain"
        }
      ];
      scope.gardAllData = [];
      scope.gardData = [];
      scope.allPageCount = 0;
      scope.thePageNumber = 0;
      esAllStation = [];
      scope.query = {
        startTime: '',
        endTime: ''
      };
      if ((_ref = scope.timeSubscription) != null) {
        _ref.dispose();
      }
      scope.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      if ((_ref1 = scope.selectEquipSubscription) != null) {
        _ref1.dispose();
      }
      scope.selectEquipSubscription = this.commonService.subscribeEventBus("checkEquips", (function(_this) {
        return function(msg) {
          return esAllStation = msg.message;
        };
      })(this));
      checkFilter = (function(_this) {
        return function() {
          if (!esAllStation || (!esAllStation.length)) {
            M.toast({
              html: '请选择设备！'
            });
            return true;
          }
          if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
            M.toast({
              html: '开始时间大于结束时间！'
            });
            return true;
          }
          return false;
        };
      })(this);
      checkMsg = (function(_this) {
        return function(allData, pageNumber) {
          return scope.gardData = (_.chunk(allData, 10))[pageNumber];
        };
      })(this);
      scope.queryReport = (function(_this) {
        return function() {
          var dataFilter, eCall, eEnd, eStart, filterGetPro, levEquip, levSta;
          if (checkFilter()) {
            return;
          }
          levEquip = _.uniq(_.map(_.filter(esAllStation, function(ef) {
            return ef.level !== "station";
          }), function(mf) {
            return mf.id;
          }));
          levSta = _.uniq(_.map(_.filter(esAllStation, function(ef) {
            return ef.level !== "station";
          }), function(mf) {
            return mf.station;
          }));
          filterGetPro = {
            user: scope.project.model.user,
            project: scope.project.model.project,
            station: {
              $in: levSta
            },
            startTime: (moment(scope.query.startTime).format("YYYY-MM-DD")) + " 00:00",
            endTime: (moment(scope.query.endTime).format("YYYY-MM-DD")) + " 23:59",
            phase: {
              $in: paramsType
            }
          };
          dataFilter = {
            filter: filterGetPro,
            paging: null,
            sorting: null
          };
          eStart = "";
          eEnd = "";
          eCall = "";
          return _this.commonService.reportingService.queryEventRecords(dataFilter, function(err, records) {
            var levCords, _ref2;
            if (records) {
              levCords = _.filter(records, function(res) {
                var _ref2;
                return _ref2 = res.equipment, __indexOf.call(levEquip, _ref2) >= 0;
              });
              _.each(levCords, function(lev) {
                var _callTime, _eCall, _eEnd, _eStart, _est;
                _eStart = _.clone(eStart);
                _eEnd = _.clone(eEnd);
                _est = _.clone(lev);
                _eCall = _.clone(eCall);
                _eStart = lev.startTime;
                _eEnd = lev.endTime;
                if (!_eEnd) {
                  _eEnd = "";
                  _eCall = "";
                } else {
                  _eEnd = moment(_eEnd).format("YYYY-MM-DD HH:mm:ss");
                  _callTime = _this.calTimes(moment(_est.endTime, "YYYY-MM-DD HH:mm:ss").diff(moment(_est.startTime, 'YYYY-MM-DD HH:mm:ss'), 'seconds'));
                }
                return scope.gardAllData.push({
                  alarmRank: _est.severityName,
                  stationName: _est.stationName,
                  equipName: _est.equipmentName,
                  alarmName: _est.title,
                  startVal: _est.startValue || "",
                  endVal: _est.endValue || "",
                  startTime: moment(_eStart).format("YYYY-MM-DD HH:mm:ss"),
                  endTime: _eEnd,
                  sustain: _callTime
                });
              });
              scope.allPageCount = scope.gardAllData.length;
              checkMsg(scope.gardAllData, scope.thePageNumber);
              if ((_ref2 = scope.comPageBus) != null) {
                _ref2.dispose();
              }
              return scope.comPageBus = _this.commonService.subscribeEventBus('pageTemplate', function(msg) {
                var message;
                message = msg.message - 1;
                return checkMsg(scope.gardAllData, message);
              });
            } else {
              scope.gardData = [];
              return scope.gardAllData = [];
            }
          });
        };
      })(this);
      return scope.exportReport = (function(_this) {
        return function(paramTitle) {
          var excel, wb;
          if (scope.gardAllData.length === 0) {
            _this.display(null, '暂无数据', 1500);
            return false;
          }
          wb = XLSX.utils.book_new();
          excel = XLSX.utils.json_to_sheet(scope.gardAllData);
          XLSX.utils.book_append_sheet(wb, excel, "Sheet1");
          return XLSX.writeFile(wb, paramTitle + "-" + moment().format('YYYYMMDDHHMMSS') + ".xlsx");
        };
      })(this);
    };

    FinishAlarmDirective.prototype.calTimes = function(refTime) {
      var days, daysY, hours, hoursY, minY, mins, sTime;
      sTime = "";
      days = Math.floor(refTime / 86400);
      daysY = refTime % 86400;
      hours = Math.floor(daysY / 3600);
      hoursY = daysY % 3600;
      mins = Math.floor(hoursY / 60);
      minY = hoursY % 60;
      if (days > 0) {
        sTime = sTime + days + "天 ";
      } else {
        sTime = "0天 ";
      }
      if (hours > 0) {
        sTime = sTime + hours + "时 ";
      } else {
        sTime = sTime + "0时 ";
      }
      if (mins > 0) {
        sTime = sTime + mins + "分 ";
      } else {
        sTime = sTime + "0分 ";
      }
      if (minY > 0) {
        sTime = sTime + minY + "秒";
      } else {
        sTime = sTime + "0秒";
      }
      return sTime;
    };

    FinishAlarmDirective.prototype.resize = function(scope) {};

    FinishAlarmDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.timeSubscription) != null ? _ref.dispose() : void 0;
    };

    return FinishAlarmDirective;

  })(base.BaseDirective);
  return exports = {
    FinishAlarmDirective: FinishAlarmDirective
  };
});
