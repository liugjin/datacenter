// Generated by IcedCoffeeScript 108.0.11

/*
* File: graphic-box-directive
* User: David
* Date: 2018/11/16
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "jquery.ui"], function(base, css, view, _, moment) {
  var GraphicBoxDirective, exports;
  GraphicBoxDirective = (function(_super) {
    __extends(GraphicBoxDirective, _super);

    function GraphicBoxDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "graphic-box";
      GraphicBoxDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    GraphicBoxDirective.prototype.setScope = function() {
      return {
        templateId: "=",
        noBorderStyle: "="
      };
    };

    GraphicBoxDirective.prototype.setCSS = function() {
      return css;
    };

    GraphicBoxDirective.prototype.applyChange = function() {
      return (function(_this) {
        return function() {
          return scope.$applyAsync();
        };
      })(this);
    };

    GraphicBoxDirective.prototype.setTemplate = function() {
      return view;
    };

    GraphicBoxDirective.prototype.show = function(scope, element, attrs) {
      var dom, ele, html, initializeGraphicOptions, initializeView;
      if (!scope.firstload) {
        return;
      }
      if (scope.parameters.templateId) {
        scope.templateId = {
          user: this.$routeParams.user,
          project: this.$routeParams.project,
          template: scope.parameters.templateId
        };
      }
      initializeView = (function(_this) {
        return function() {
          if (_.isNull(document.getElementById('#element-placeholder'))) {
            setTimeout(initializeView, 1000);
            return;
          }
          scope.placeholder = $('#element-placeholder');
          scope.placeholder.draggable();
          return scope.placeholderSize = {
            width: scope.placeholder.width(),
            height: scope.placeholder.height(),
            width2: scope.placeholder.width() / 2,
            height2: scope.placeholder.height() / 2
          };
        };
      })(this);
      initializeGraphicOptions = (function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          return scope.graphicOptions = {
            engineOptions: {
              parameters: _this.$routeParams
            },
            renderOptions: {
              editable: false,
              type: (_ref = (_ref1 = _this.$routeParams.renderer) != null ? _ref1 : (_ref2 = _this.$rootScope) != null ? _ref2.renderType : void 0) != null ? _ref : 'snapsvg',
              uploadUrl: typeof window !== "undefined" && window !== null ? (_ref3 = window.setting) != null ? (_ref4 = _ref3.urls) != null ? _ref4.uploadUrl : void 0 : void 0 : void 0
            }
          };
        };
      })(this);
      scope.movePlaceholderToElement = function(element) {
        var box, x, y;
        if (!element) {
          return;
        }
        box = element._geometry.node.getBoundingClientRect();
        x = box.left + box.width / 2 - scope.placeholderSize.width / 2;
        y = box.top + box.height / 2 - scope.placeholderSize.height / 2;
        scope.placeholder.offset({
          left: x,
          top: y
        });
      };
      scope.applyChange = (function(_this) {
        return function() {
          if (!scope.$$phase) {
            return scope.$apply();
          }
        };
      })(this);
      scope.initializePlaceholder = (function(_this) {
        return function() {
          var template, updatePlaceholder;
          template = scope.template;
          updatePlaceholder = function() {
            var height, image, mode, width, x, y;
            image = template.getPropertyValue('placeholder-image');
            x = template.getPropertyValue('placeholder-x', 50);
            y = template.getPropertyValue('placeholder-y', 50);
            width = template.getPropertyValue('placeholder-width', 20);
            height = template.getPropertyValue('placeholder-height', 20);
            scope.placeholderMode = mode = template.getPropertyValue('placeholder-mode', 'dynamic');
            scope.timelineEnable = template.getPropertyValue('timeline-enable', false);
            css = {
              left: x,
              top: y,
              width: width,
              height: height
            };
            css['background-image'] = image ? "url(" + scope.controller.setting.urls.uploadUrl + "/" + image + ")" : "url(/visualization/res/img/popover.gif)";
            scope.placeholder.css(css);
            if (mode === 'none') {
              scope.placeholder.hide();
            } else if (mode === 'dynamic' || mode === 'element') {
              scope.placeholder.draggable('enable');
              scope.placeholder.show();
            } else {
              scope.placeholder.draggable('disable');
              scope.placeholder.show();
            }
            return scope.placeholderSize = {
              x: x,
              y: y,
              width: width,
              height: height,
              width2: width / 2,
              height2: height / 2
            };
          };
          template.subscribePropertiesValue(['placeholder-image', 'placeholder-x', 'placeholder-y', 'placeholder-width', 'placeholder-height', 'placeholder-mode'], function(d) {
            return updatePlaceholder();
          }, 100);
          return updatePlaceholder();
        };
      })(this);
      html = '<div class=\'box-hexagon\'>\n  <div class=\'{{parameters.noBorderStyle?"":"big-box-border-top"}}\'></div>\n  <div class=\'{{parameters.noBorderStyle?"":"box-content"}} max-height\'>\n    <div id="player" ng-dblclick="controller.showPopover($event)">\n        <div graphic-player="graphic-player" options="graphicOptions" template-id="templateId"\n             controller="controller" on-template-load="controller.onTemplateLoad()"\n             on-element-changed="controller.onElementChanged()" parameters="parameters"\n             class="graphic-viewer"></div>\n        <div id="element-placeholder" ng-show=\'placeholderMode != "none"\'\n           data-activates="placeholder-menu" md-dropdown="md-dropdown" data-hover="false" data-beloworigin="true"\n           title2="信息窗口">\n          <div id="element-placeholder-popover" style="width:100%; height:100%;" ng-click2="togglePopover($event)"\n               element-popover="element-popover" data-style="inverse"\n               data-title="{{element.propertyValues.name || controller.element.id}}"\n               element="element" controller="controller" data-trigger="manual" data-placement="auto"\n               data-closeable="true" data-dismissible="false" data-animation="fade"\n               title2="信息展示：在选中项前双击即可弹出信息窗口"></div>\n        </div>\n    </div>\n  </div>\n  <div class=\'{{parameters.noBorderStyle?"":"big-box-border-bottom"}}\'></div>\n</div>';
      initializeGraphicOptions();
      initializeView();
      ele = this.$compile(html)(scope);
      dom = $(element.find("#graphic")[0]);
      dom.empty();
      scope.updateDomState = setTimeout((function(_this) {
        return function() {
          return dom.append(ele);
        };
      })(this), 100);
      scope.updateLazy = _.throttle((function(_this) {
        return function(template) {
          return scope.templateId = {
            user: _this.$routeParams.user,
            project: _this.$routeParams.project,
            template: template.templateId,
            parameters: template.templateParameters
          };
        };
      })(this), 100, {
        leading: true,
        trailing: true
      });
      return scope.$watch("parameters", (function(_this) {
        return function(template) {
          if (!template.templateId) {
            return;
          }
          return scope.updateLazy(template);
        };
      })(this));
    };

    GraphicBoxDirective.prototype.dispose = function(scope) {
      return window.clearTimeout(scope.updateDomState);
    };

    return GraphicBoxDirective;

  })(base.BaseDirective);
  return exports = {
    GraphicBoxDirective: GraphicBoxDirective
  };
});
