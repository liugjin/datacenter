// Generated by IcedCoffeeScript 108.0.11

/*
* File: graphic-page-directive
* User: David
* Date: 2020/05/25
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var GraphicPageDirective, exports;
  GraphicPageDirective = (function(_super) {
    __extends(GraphicPageDirective, _super);

    function GraphicPageDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "graphic-page";
      GraphicPageDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.stationService = this.commonService.modelEngine.modelManager.getService("stations");
    }

    GraphicPageDirective.prototype.setScope = function() {};

    GraphicPageDirective.prototype.setCSS = function() {
      return css;
    };

    GraphicPageDirective.prototype.setTemplate = function() {
      return view;
    };

    GraphicPageDirective.prototype.show = function(scope, element, attrs) {
      var init, initData, _ref;
      scope.treeData = [];
      scope.stationMap = {};
      scope.stationId = scope.station.model.station;
      initData = (function(_this) {
        return function() {
          if (_this.$routeParams.station) {
            scope.stationId = _this.$routeParams.station;
          }
          console.log(scope.stationId);
          return _this.getStation(scope, scope.stationId, null, true);
        };
      })(this);
      init = (function(_this) {
        return function() {
          scope.stationMap = {};
          return _this.commonService.loadStations(null, function(err, stations) {
            var result, _stations;
            _stations = _.map(stations, function(sta) {
              return sta.model;
            });
            result = _this.setStationTree(_stations);
            scope.treeData = result.treeData;
            _.each(stations, function(d) {
              var _ref, _ref1, _ref2;
              if (((_ref = d.model) != null ? _ref.graphic : void 0) && ((_ref1 = d.model) != null ? _ref1.graphic : void 0) !== "") {
                scope.stationId = d.model.station;
                return scope.stationMap[d.model.station] = (_ref2 = d.model) != null ? _ref2.graphic : void 0;
              }
            });
            return initData();
          }, true);
        };
      })(this);
      init();
      if ((_ref = scope.subStation) != null) {
        _ref.dispose();
      }
      return scope.subStation = this.subscribeEventBus('list-breadcrumbs', (function(_this) {
        return function(d) {
          scope.stationId = d.message[0].key;
          return _this.getStation(scope, scope.stationId, null, true);
        };
      })(this));
    };

    GraphicPageDirective.prototype.setStation = function(data, key) {
      var childs, item, newData, parent, parents, _i, _j, _len, _len1;
      parents = this.group[key - 1];
      childs = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        for (_j = 0, _len1 = parents.length; _j < _len1; _j++) {
          parent = parents[_j];
          if (item.parent === parent.key) {
            childs.push(item);
          }
        }
      }
      if (childs.length !== 0) {
        this.group[key] = childs;
        newData = _.filter(data, (function(_this) {
          return function(d) {
            return !_.find(childs, function(child) {
              return child.key === d.key;
            });
          };
        })(this));
        return this.setStation(newData, key + 1);
      }
    };

    GraphicPageDirective.prototype.setStationTree = function(data, equips) {
      var list, list2, listData, x, _i, _ref;
      this.group = [];
      list = _.map(data, function(d) {
        return {
          key: d.station,
          title: d.name,
          parent: d.parent,
          folder: false,
          type: d.type
        };
      });
      list2 = _.map(equips, function(d) {
        return {
          key: d.equipment,
          title: d.name,
          parent: d.parent,
          folder: false,
          type: d.type
        };
      });
      this.group[0] = _.filter(list, function(d) {
        return d.parent === "";
      });
      this.setStation(_.filter(list, function(d) {
        return d.parent !== "";
      }), 1);
      listData = [];
      for (x = _i = _ref = this.group.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; x = _ref <= 0 ? ++_i : --_i) {
        this.group[x] = _.filter(this.group[x], (function(_this) {
          return function(d) {
            return d.type === "station" || d.folder;
          };
        })(this));
        listData = listData.concat(this.group[x]);
        if (x !== 0) {
          this.group[x - 1] = _.map(this.group[x - 1], (function(_this) {
            return function(item) {
              var arr;
              arr = _.filter(_this.group[x], function(d) {
                return d.parent === item.key;
              });
              if (arr.length !== 0) {
                item.children = arr;
                item.folder = true;
              }
              return item;
            };
          })(this));
        }
      }
      return {
        treeData: this.group,
        listData: listData
      };
    };

    GraphicPageDirective.prototype.resize = function(scope) {};

    GraphicPageDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.subStation) != null ? _ref.dispose() : void 0;
    };

    return GraphicPageDirective;

  })(base.BaseDirective);
  return exports = {
    GraphicPageDirective: GraphicPageDirective
  };
});
