// Generated by IcedCoffeeScript 108.0.11

/*
* File: header-directive
* User: David
* Date: 2019/03/08
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'pushjs'], function(base, css, view, _, moment, Push) {
  var HeaderDirective, exports;
  HeaderDirective = (function(_super) {
    __extends(HeaderDirective, _super);

    function HeaderDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.link = __bind(this.link, this);
      this.id = "header";
      HeaderDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.$routeParams = $routeParams;
      this.projectService = commonService.modelEngine.modelManager.getService("project");
    }

    HeaderDirective.prototype.setScope = function() {};

    HeaderDirective.prototype.setCSS = function() {
      return css;
    };

    HeaderDirective.prototype.setTemplate = function() {
      return view;
    };

    HeaderDirective.prototype.link = function(scope, element, attrs) {
      var calTimes, eventStatisticFun, notifyElement, notifyEvent, project, showNotcify;
      scope.closealarmtime = "";
      scope.ismute = true;
      scope.voiceimg = this.getComponentPath('image/voice.svg');
      scope.muteimg = this.getComponentPath('image/mute.svg');
      scope.setting = setting;
      scope.params = this.$routeParams;
      scope.$watch('$root.user', (function(_this) {
        return function(root) {
          var err;
          try {
            scope.rootUser = root.user;
          } catch (_error) {
            err = _error;
          }
          scope.switchLanguage = function(s) {
            return scope.$parent.mvm.switchLanguage(s);
          };
          return scope.logout = function() {
            return scope.$parent.mvm.logout();
          };
        };
      })(this));
      scope.getEventColor = (function(_this) {
        return function(severity) {
          var color, _ref, _ref1, _ref2, _ref3;
          return color = (_ref = scope.$root.project) != null ? (_ref1 = _ref.dictionary) != null ? (_ref2 = _ref1.eventseverities) != null ? (_ref3 = _ref2.getItem(severity)) != null ? _ref3.model.color : void 0 : void 0 : void 0 : void 0;
        };
      })(this);
      scope.eventShowObj = {};
      calTimes = function(refTime) {
        var days, daysY, hours, hoursY, minY, mins, sTime;
        if (refTime === 0) {
          return "实时告警";
        }
        sTime = "";
        days = Math.floor(refTime / 86400);
        daysY = refTime % 86400;
        hours = Math.floor(daysY / 3600);
        hoursY = daysY % 3600;
        mins = Math.floor(hoursY / 60);
        minY = hoursY % 60;
        if (days > 0) {
          sTime = sTime + days + "天 ";
        } else {
          sTime = "0天 ";
        }
        if (hours > 0) {
          sTime = sTime + hours + "时 ";
        } else {
          sTime = sTime + "0时 ";
        }
        if (mins > 0) {
          sTime = sTime + mins + "分 ";
        } else {
          sTime = sTime + "0分 ";
        }
        if (minY > 0) {
          sTime = sTime + minY + "秒";
        } else {
          sTime = sTime + "0秒";
        }
        return sTime;
      };
      scope.message = [];
      notifyElement = $(element).find(".notify")[0];
      $($(element[0].parentNode)[0]).bind('click', (function(_this) {
        return function() {
          if (scope.ismute) {
            scope.ismute = false;
          }
          return true;
        };
      })(this));
      showNotcify = (function(_this) {
        return function(event, key) {
          var end, endTime, fun, message, start, to_speak;
          if (!((scope.closealarmtime === "") || (moment(event.startTime) > scope.closealarmtime))) {
            return;
          }
          if (scope.message.length === 0) {
            scope.eventShowObj[key] = event;
            start = event.startValue ? event.startValue + ' ~ ' : "-- ~ ";
            end = event.endValue && typeof event.endValue !== "undefined" ? event.endValue : "--";
            endTime = event.endTime && typeof event.endTime !== "undefined" ? moment(event.endTime).format('YYYY-MM-DD HH:MM:SS') : "--";
            message = [null, "[ " + event.stationName + "/" + event.equipmentName + "/" + event.title + " ]", "开始时间：  " + moment(event.startTime).format('YYYY-MM-DD HH:MM:SS'), "结束时间：  " + endTime, "持续时长：  " + calTimes(moment().unix() - moment(event.startTime).unix()), "告警值域：  " + start + end];
            try {
              scope.speechstr = event.stationName + "/" + event.equipmentName + "/" + event.title;
              to_speak = new SpeechSynthesisUtterance();
              to_speak.text = scope.speechstr;
              to_speak.lang = "zh";
              to_speak.rate = 0.8;
              window.speechSynthesis.speak(to_speak);
            } catch (_error) {
              console.log("errot:window.speechSynthesis.speak");
            }
            $(notifyElement).show();
            fun = setTimeout(function() {
              $(notifyElement).hide();
              return scope.message = [];
            }, 5000);
            message[0] = fun;
            return scope.message = message;
          } else {
            return setTimeout(function() {
              return showNotcify(event, key);
            }, 1000);
          }
        };
      })(this);
      scope.setvoice = (function(_this) {
        return function() {
          if (scope.ismute) {
            scope.ismute = false;
          }
          return true;
        };
      })(this);
      scope.close = (function(_this) {
        return function() {
          window.speechSynthesis.cancel();
          scope.message = [];
          $(notifyElement).hide();
          return scope.closealarmtime = moment();
        };
      })(this);
      notifyEvent = function(event) {
        var key;
        if (event.phase !== 'completed' && !event.endTime) {
          key = "" + event.station + ":" + event.equipment + ":" + event.event;
          if ((_.has(scope.eventShowObj, key) && (moment(scope.eventShowObj[key].startTime).unix() - moment(event.startTime).unix() < 0)) || !_.has(scope.eventShowObj, key)) {
            return showNotcify(event, key);
          }
        }
      };
      eventStatisticFun = (function(_this) {
        return function(event) {
          var key;
          key = "" + event.user + "." + event.project + "." + event.station + "." + event.equipment + "." + event.event + "." + event.severity + "." + event.startTime;
          if (scope.statisticsEvents.hasOwnProperty(key)) {
            if (event.endTime && !scope.statisticsEvents[key].endTime) {
              scope.eventStatistic.activeEvents--;
              scope.eventStatistic.eventSeverity.splice(scope.eventStatistic.eventSeverity.indexOf(event.severity), 1);
              scope.statisticsEvents[key] = event;
            }
            if (event.phase === 'completed' && !(scope.statisticsEvents[key].phase === 'completed')) {
              scope.eventStatistic.totalEvents--;
              delete scope.statisticsEvents[key];
            }
          } else if (!(event.phase === 'completed')) {
            scope.statisticsEvents[key] = event;
            if (!event.endTime) {
              scope.eventStatistic.activeEvents++;
              scope.eventStatistic.eventSeverity.push(event.severity);
            }
            scope.eventStatistic.totalEvents++;
          }
          return scope.eventStatistic.severity = _.max(scope.eventStatistic.eventSeverity);
        };
      })(this);
      project = null;
      return scope.$watch('params', (function(_this) {
        return function(params) {
          var projectIds, _ref, _ref1;
          if (scope.project) {
            scope.logo = (_ref = scope.project.model.setting) != null ? _ref.logo : void 0;
          }
          if (params.project) {
            if (project === params.project) {
              return;
            }
            _this.getProject(scope, function() {
              var _ref1;
              return scope.logo = (_ref1 = scope.project.model.setting) != null ? _ref1.logo : void 0;
            });
            project = params.project;
          }
          scope.statisticsEvents = {};
          scope.eventStatistic = {
            activeEvents: 0,
            totalEvents: 0,
            severity: 0,
            eventSeverity: []
          };
          projectIds = {
            user: params.user,
            project: params.project
          };
          if (projectIds.user) {
            if ((_ref1 = _this.statisticSubscription) != null) {
              _ref1.dispose();
            }
            return _this.statisticSubscription = _this.commonService.eventLiveSession.subscribeValues(projectIds, function(err, d) {
              if (d.message) {
                eventStatisticFun(d.message);
                return notifyEvent(d.message);
              }
            });
          }
        };
      })(this), true);
    };

    HeaderDirective.prototype.resize = function(scope) {};

    HeaderDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = this.statisticSubscription) != null ? _ref.dispose() : void 0;
    };

    return HeaderDirective;

  })(base.BaseDirective);
  return exports = {
    HeaderDirective: HeaderDirective
  };
});
