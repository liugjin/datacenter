// Generated by IcedCoffeeScript 108.0.12

/*
* File: heatfield-cloud-directive
* User: David
* Date: 2019/12/03
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var HeatfieldCloudDirective, exports;
  HeatfieldCloudDirective = (function(_super) {
    __extends(HeatfieldCloudDirective, _super);

    function HeatfieldCloudDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "heatfield-cloud";
      HeatfieldCloudDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    HeatfieldCloudDirective.prototype.setScope = function() {};

    HeatfieldCloudDirective.prototype.setCSS = function() {
      return css;
    };

    HeatfieldCloudDirective.prototype.setTemplate = function() {
      return view;
    };

    HeatfieldCloudDirective.prototype.show = function(scope, element, attrs) {
      var getHistoryData, setSubsigs;
      scope.signalIds = _.map([42], function(d) {
        return "u-" + d + "-server-temperature";
      });
      scope.colorList = [
        {
          color: "transparent",
          title: "背景色",
          desc: "没有温度测点, 默认颜色"
        }, {
          color: "green",
          title: "温度正常",
          desc: "温度测点正常, 范围: 20℃ ~ 25℃"
        }, {
          color: "orange",
          title: "温度较高",
          desc: "温度测点正常, 范围: 25℃ ~ 30℃"
        }, {
          color: "red",
          title: "温度过高",
          desc: "温度测点正常, 高于 30℃"
        }, {
          color: "cyan",
          title: "温度较低",
          desc: "温度测点正常, 范围: 15℃ ~ 20℃"
        }, {
          color: "blue",
          title: "温度过低",
          desc: "温度测点正常, 小于 15℃"
        }
      ];
      scope.currentSingal = scope.signalIds[0];
      scope.date = moment().format("YYYY-MM-DD");
      scope.updateTime = 3000;
      scope.stationId = "floor1";
      scope.lowest = 0;
      scope.highest = 100;
      scope.dataType = "0";
      scope.allSignal = {};
      scope.heatSub = {};
      setSubsigs = (function(_this) {
        return function() {
          var filter;
          scope.allSignal = _.mapObject(scope.allSignal, function(d) {
            return {};
          });
          filter = scope.project.getIds();
          filter.station = scope.stationId;
          filter.equipment = "+";
          if (!_.isEmpty(scope.heatSub)) {
            _.each(scope.heatSub, function(sub) {
              return sub != null ? sub.dispose() : void 0;
            });
          }
          return _.each(scope.signalIds, function(d) {
            filter.signal = d;
            return scope.heatSub[d] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, sig) {
              var _ref;
              if (!sig) {
                return;
              }
              if ((sig != null ? (_ref = sig.message) != null ? _ref.equipmentType : void 0 : void 0) !== "rack") {
                return;
              }
              if (!_.has(scope.allSignal, sig.message.signal)) {
                scope.allSignal[sig.message.signal] = {};
              }
              return scope.allSignal[sig.message.signal][scope.equipMap[sig.message.equipment]] = sig.message.value;
            });
          });
        };
      })(this);
      return getHistoryData = (function(_this) {
        return function(date) {
          var filter;
          scope.allSignal[scope.currentSingal] = {};
          filter = scope.project.getIds();
          filter.signal = scope.currentSingal;
          filter.mode = "day";
          filter.period = date;
          return _this.commonService.reportingService.querySignalStatistics({
            filter: filter,
            paging: null,
            sorting: null
          }, function(err, records) {
            if (!records || _.isEmpty(records)) {
              return;
            }
            scope.allSignal[scope.currentSingal] = _.object(_.map(records, function(d) {
              return scope.equipMap[d.equipment];
            }), _.map(records, function(d) {
              return d.values[0].value;
            }));
            return scope.$applyAsync();
          }, true);
        };
      })(this);
    };

    HeatfieldCloudDirective.prototype.resize = function(scope) {};

    HeatfieldCloudDirective.prototype.dispose = function(scope) {};

    return HeatfieldCloudDirective;

  })(base.BaseDirective);
  return exports = {
    HeatfieldCloudDirective: HeatfieldCloudDirective
  };
});
