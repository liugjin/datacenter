// Generated by IcedCoffeeScript 108.0.12

/*
* File: import-assets-directive
* User: David
* Date: 2019/10/22
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ImportAssetsDirective, exports;
  ImportAssetsDirective = (function(_super) {
    __extends(ImportAssetsDirective, _super);

    function ImportAssetsDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "import-assets";
      ImportAssetsDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ImportAssetsDirective.prototype.setScope = function() {};

    ImportAssetsDirective.prototype.setCSS = function() {
      return css;
    };

    ImportAssetsDirective.prototype.setTemplate = function() {
      return view;
    };

    ImportAssetsDirective.prototype.show = function(scope, element, attrs) {
      var createCompareEquipment, init, judgeHasEquipment, listenImportFile, renderExcel;
      scope.ng = {
        xlsx: null,
        reader: null,
        excelTable: [],
        compareEquipment: [],
        service: null,
        allEquiptment: [],
        importProgress: '0%',
        judgeConfirmExecute: true,
        progressShow: false
      };
      scope.addDevice = (function(_this) {
        return function() {
          if (scope.ng.excelTable.length === 0) {
            _this.display("请导入设备信息");
            return;
          }
          if (scope.ng.judgeConfirmExecute === false) {
            return scope.prompt("提示", "是否导入设备", function(result) {
              var nowTime, postData, postDataLength, whetherExecute;
              if (!result) {
                return;
              }
              scope.ng.progressShow = true;
              nowTime = (new Date).toISOString();
              postData = _.map(scope.ng.excelTable, function(item) {
                return {
                  "index": 0,
                  "enable": true,
                  "visible": true,
                  "user": scope.project.model.user,
                  "project": scope.project.model.project,
                  "owner": scope.$root.user.user,
                  "signals": [],
                  "events": [],
                  "commands": [],
                  "traces": [],
                  "createtime": nowTime,
                  "updatetime": nowTime,
                  "parent": item["上级设备"] || "",
                  "station": item["站点ID"],
                  "type": item["设备类型ID"],
                  "template": item["设备模板ID"],
                  "vendor": item["厂商"],
                  "equipment": item["设备ID"],
                  "name": item["设备名"],
                  "tag": item["资产标签序列号"] || "",
                  "properties": [
                    {
                      "id": "row",
                      "value": Number(item["位置"]) || ""
                    }
                  ],
                  "sampleUnits": []
                };
              });
              postDataLength = postData.length;
              whetherExecute = postData.length;
              return _.each(postData, function(item, num) {
                return scope.ng.service.save(item, function(err, data) {
                  var width;
                  width = (num + 1) / postData.length;
                  scope.ng.importProgress = width * 100 + "%";
                  whetherExecute--;
                  if (whetherExecute === 0) {
                    scope.ng.judgeConfirmExecute = true;
                    _.each(scope.ng.excelTable, function(repeat) {
                      return repeat.iserror = true;
                    });
                    _this.display("数据导入成功");
                    init();
                    return setTimeout(function() {
                      scope.ng.progressShow = false;
                      scope.ng.importProgress = "0%";
                      return scope.$applyAsync();
                    }, 500);
                  }
                });
              });
            });
          } else {
            return _this.display("导入设备信息重复,无法导入");
          }
        };
      })(this);
      scope.downloadExcel = (function(_this) {
        return function() {
          var data, excel, wb;
          data = [
            {
              "站点ID": "",
              "设备类型ID": "",
              "设备模板ID": "",
              "厂商": "",
              "设备ID": "",
              "设备名": "",
              "位置": "",
              "上级设备": "",
              "资产标签序列号": ""
            }
          ];
          wb = scope.ng.xlsx.utils.book_new();
          excel = scope.ng.xlsx.utils.json_to_sheet(data);
          scope.ng.xlsx.utils.book_append_sheet(wb, excel, "Sheet1");
          return scope.ng.xlsx.writeFile(wb, "需要导入的信息.xlsx");
        };
      })(this);
      scope.publishBack = (function(_this) {
        return function() {
          return _this.publishEventBus('backList', "backList");
        };
      })(this);
      scope.importExcel = (function(_this) {
        return function() {
          return element.find('.import-file').click();
        };
      })(this);
      judgeHasEquipment = (function(_this) {
        return function() {
          var judgeConfirmExecute;
          _.each(scope.ng.excelTable, function(item) {
            var device, excelRepect, _i, _len, _ref;
            excelRepect = [];
            _ref = scope.ng.excelTable;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              device = _ref[_i];
              if (device["设备ID"] === item["设备ID"]) {
                excelRepect.push(device);
              }
              if (excelRepect.length >= 2) {
                excelRepect = [];
                _.each(scope.ng.excelTable, function(repeat) {
                  if (device["设备ID"] === repeat["设备ID"]) {
                    repeat.iserror = true;
                    return repeat.remark = "导入信息有重复的项" + repeat["设备ID"] + " ";
                  }
                });
              }
            }
            _.find(scope.ng.compareEquipment, function(equipment) {
              if (equipment["设备ID"] === item["设备ID"]) {
                item.iserror = true;
                return item.remark = item.remark ? item.remark : "" + "服务器中已经拥有该设备 ";
              }
            });
            if (item["站点ID"] === void 0 || item["设备类型ID"] === void 0 || item["设备模板ID"] === void 0 || item["厂商"] === void 0 || item["设备ID"] === void 0 || item["设备名"] === void 0) {
              item.iserror = true;
              return item.remark = item.remark ? item.remark : "" + "必填项不能为空 ";
            }
          });
          judgeConfirmExecute = _.filter(scope.ng.excelTable, function(item) {
            return item.iserror === true;
          });
          if (judgeConfirmExecute.length > 0) {
            scope.ng.judgeConfirmExecute = true;
          } else {
            scope.ng.judgeConfirmExecute = false;
          }
          scope.$applyAsync();
          return _this.commonService.$rootScope.executing = false;
        };
      })(this);
      renderExcel = (function(_this) {
        return function() {
          return scope.ng.reader.onload = function(file) {
            var excel, excelTitles, sheet0;
            excel = scope.ng.xlsx.read(file.target.result, {
              type: "binary"
            });
            sheet0 = excel.Sheets[excel.SheetNames[0]];
            scope.ng.excelTable = scope.ng.xlsx.utils.sheet_to_json(sheet0);
            if (scope.ng.excelTable && scope.ng.excelTable.length === 0) {
              _this.display("导入资产信息为空,请重新导入");
              return false;
            } else if (scope.ng.excelTable && scope.ng.excelTable.length > 0) {
              excelTitles = scope.ng.excelTable[0];
              if (excelTitles['站点ID'] && excelTitles['设备类型ID'] && excelTitles['设备模板ID'] && excelTitles['厂商'] && excelTitles['设备ID'] && excelTitles['设备名']) {
                _this.commonService.$rootScope.executing = true;
                return judgeHasEquipment();
              } else {
                _this.display("导入信息格式错误,无法导入");
                scope.ng.excelTable = [];
                return false;
              }
            }
          };
        };
      })(this);
      listenImportFile = (function(_this) {
        return function() {
          return element.find('.import-file').on('change', function(obj) {
            var file;
            file = obj.target.files[0];
            if (!file) {
              return;
            }
            if (file.name.indexOf('xlsx') !== -1) {
              scope.ng.reader.readAsBinaryString(file);
              return obj.target.value = null;
            } else {
              return _this.display("导入文件的格式应为 xlsx");
            }
          });
        };
      })(this);
      createCompareEquipment = (function(_this) {
        return function() {
          return scope.ng.compareEquipment = _.map(scope.ng.allEquiptment, function(equipment) {
            return {
              "设备ID": equipment.model.equipment,
              "设备名": equipment.model.name,
              "设备类型ID": equipment.model.type,
              "设备模板ID": equipment.model.template,
              "厂商": equipment.model.vendor,
              "站点ID": equipment.model.station,
              "iserror": false,
              "remark": ""
            };
          });
        };
      })(this);
      init = (function(_this) {
        return function() {
          var sta, whetherExecute, _i, _len, _ref;
          scope.ng.xlsx = _this.$window.XLSX;
          scope.ng.reader = new FileReader();
          whetherExecute = scope.project.stations.items.length;
          scope.ng.allEquiptment = [];
          scope.ng.service = _this.commonService.modelEngine.modelManager.getService('equipments');
          _ref = scope.project.stations.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sta = _ref[_i];
            sta.loadEquipments({}, null, function(err, equips) {
              whetherExecute--;
              scope.ng.allEquiptment = scope.ng.allEquiptment.concat(equips);
              if (whetherExecute === 0) {
                return createCompareEquipment();
              }
            }, true);
          }
          renderExcel();
          return listenImportFile();
        };
      })(this);
      return init();
    };

    ImportAssetsDirective.prototype.resize = function(scope) {};

    ImportAssetsDirective.prototype.dispose = function(scope) {};

    return ImportAssetsDirective;

  })(base.BaseDirective);
  return exports = {
    ImportAssetsDirective: ImportAssetsDirective
  };
});
