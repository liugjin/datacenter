// Generated by IcedCoffeeScript 108.0.13

/*
* File: ip-setting-directive
* User: David
* Date: 2020/03/18
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var IpSettingDirective, exports;
  IpSettingDirective = (function(_super) {
    __extends(IpSettingDirective, _super);

    function IpSettingDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.start = __bind(this.start, this);
      this.show = __bind(this.show, this);
      this.id = "ip-setting";
      IpSettingDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    IpSettingDirective.prototype.setScope = function() {};

    IpSettingDirective.prototype.setCSS = function() {
      return css;
    };

    IpSettingDirective.prototype.setTemplate = function() {
      return view;
    };

    IpSettingDirective.prototype.show = function(scope, element, attrs) {
      var params, url;
      scope.num = 0;
      scope.strURL = "";
      scope.isStart = false;
      scope.pingDatas = [];
      url = scope.controller.$location.$$absUrl.substr(0, scope.controller.$location.$$absUrl.indexOf("#")) + "rpc/ipSetting";
      params = {
        token: scope.controller.$rootScope.user.token
      };
      this.commonService.uploadService.$http({
        method: 'GET',
        url: url,
        params: params
      }).then((function(_this) {
        return function(res) {
          var _ref;
          return scope.setting = (_ref = res.data) != null ? _ref.data : void 0;
        };
      })(this));
      scope.saveSetting = (function(_this) {
        return function() {
          var data;
          data = {
            parameters: scope.setting
          };
          return _this.commonService.uploadService.$http({
            method: 'POST',
            url: url,
            data: data,
            params: params
          }).then(function(res) {
            var _ref, _ref1;
            if (res._err || !((_ref = res.data) != null ? _ref.data : void 0)) {
              _this.display("保存失败");
            }
            if (((_ref1 = res.data) != null ? _ref1.data : void 0) === "ok") {
              return _this.display("保存成功");
            }
          });
        };
      })(this);
      this.commonService.signalLiveSession.subscribe("ping-callback", (function(_this) {
        return function(err, d) {
          if (d) {
            scope.num++;
            scope.pingDatas.push({
              pingData: d.message.str
            });
            console.log("scope.num", scope.num);
            if (scope.num === 1) {
              scope.pingDatas.splice(0, scope.pingDatas.length);
            }
            return console.log("scope.pingDatas", scope.pingDatas);
          }
        };
      })(this));
      return scope.pingClick = (function(_this) {
        return function(isStart) {
          return _this.start(scope, isStart);
        };
      })(this);
    };

    IpSettingDirective.prototype.start = function(scope, isStart) {
      if (scope.strURL === "") {
        return this.display("测试目标IP不能为空");
      } else {
        scope.parameter = {
          ip: scope.strURL,
          state: isStart,
          number: ""
        };
        if (isStart) {
          scope.pingDatas.splice(0, scope.pingDatas.length);
        }
        return this.commonService.commandLiveSession.publish("ping-network", scope.parameter, {
          qos: 0,
          retain: false
        });
      }
    };

    IpSettingDirective.prototype.resize = function(scope) {};

    IpSettingDirective.prototype.dispose = function(scope) {};

    return IpSettingDirective;

  })(base.BaseDirective);
  return exports = {
    IpSettingDirective: IpSettingDirective
  };
});
