// Generated by IcedCoffeeScript 108.0.13

/*
* File: report-operations-leon-directive
* User: David
* Date: 2019/08/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var LogSystemDirective, exports;
  LogSystemDirective = (function(_super) {
    __extends(LogSystemDirective, _super);

    function LogSystemDirective($timeout, $window, $compile, $routeParams, commonService, $http) {
      this.$http = $http;
      this.show = __bind(this.show, this);
      this.id = "log-system";
      LogSystemDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.configService = commonService.modelEngine.modelManager.getService("configurations");
    }

    LogSystemDirective.prototype.setScope = function() {};

    LogSystemDirective.prototype.setCSS = function() {
      return css;
    };

    LogSystemDirective.prototype.setTemplate = function() {
      return view;
    };

    LogSystemDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      scope.token = (_ref = scope.controller) != null ? (_ref1 = _ref.$rootScope) != null ? (_ref2 = _ref1.user) != null ? _ref2.token : void 0 : void 0 : void 0;
      scope.userLoginTopic = ((_ref3 = scope.controller) != null ? (_ref4 = _ref3.$rootScope) != null ? (_ref5 = _ref4.user) != null ? _ref5.user : void 0 : void 0 : void 0) + "/login/" + ((_ref6 = scope.controller) != null ? (_ref7 = _ref6.$rootScope) != null ? (_ref8 = _ref7.user) != null ? _ref8.token : void 0 : void 0 : void 0);
      scope.pageItems = scope.parameters.pageItems || 10;
      scope.pageIndex = 0;
      scope.actions = [
        {
          action: 'create',
          actionName: '新建'
        }, {
          action: 'update',
          actionName: '修改'
        }, {
          action: 'delete',
          actionName: '删除'
        }
      ];
      scope.currentAction = {
        action: 'all',
        actionName: '全部操作'
      };
      scope.garddatas = [
        {
          index: '',
          type: "暂无数据",
          user: "用户名",
          action: "暂无数据",
          user: "暂无数据",
          project: "暂无数据",
          operation: "暂无数据",
          address: "暂无数据",
          updatetime: "暂无数据"
        }
      ];
      scope.header = [
        {
          headerName: "用户名",
          field: 'user',
          width: 90
        }, {
          headerName: "操作类型",
          field: 'action',
          width: 90
        }, {
          headerName: "操作内容",
          field: 'operation'
        }, {
          headerName: "访问地址",
          field: 'address'
        }, {
          headerName: "时间",
          field: 'updatetime'
        }
      ];
      scope.query = {
        startTime: '',
        endTime: '',
        startTime: moment().subtract(7, "days").startOf('day').format(),
        endTime: moment().endOf('day').format()
      };
      if ((_ref9 = scope.timeSubscription) != null) {
        _ref9.dispose();
      }
      scope.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day').format();
          return scope.query.endTime = moment(d.message.endTime).endOf('day').format();
        };
      })(this));
      scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!scope.garddatas) {
            return;
          }
          items = [];
          items = _.filter(scope.garddatas, function(equipment) {
            if (3 > 2) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      scope.selectPage = (function(_this) {
        return function(page) {
          return scope.pageIndex = page;
        };
      })(this);
      scope.$watch('pageIndex', function(index) {
        var startindex, _ref10;
        startindex = scope.pageItems * (index - 1);
        return scope.garddatas2 = (_ref10 = scope.garddatas) != null ? _ref10.slice(startindex, startindex + scope.pageItems) : void 0;
      });
      scope.checkTime = function() {
        if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
          M.toast({
            html: '开始时间大于结束时间！'
          });
          return true;
        }
        return false;
      };
      scope.initData = function() {
        scope.$root.loading = true;
        scope.pageIndex = 0;
        scope.garddatas = [];
        return scope.garddatas2 = [];
      };
      scope.queryLog = (function(_this) {
        return function(para) {
          var action, options;
          if (scope.checkTime()) {
            return;
          }
          scope.initData();
          if (para.action === 'all') {
            action = {
              $in: ["create", "update", "delete"]
            };
          } else {
            action = para.action;
          }
          options = {
            token: scope.token,
            startTime: scope.query.startTime,
            endTime: scope.query.endTime
          };
          return _this.commonService.rpcGet('getConfigurationInfo', options, function(err, data) {
            var index, records, sortDataArray, _ref10;
            if (err) {
              console.log(err);
            }
            scope.pageIndex = 1;
            records = [];
            index = 0;
            if (data.data.data.length === 0) {
              scope.garddatas2 = [];
              scope.$root.loading = false;
              return;
            }
            _.map(data.data.data, function(item) {
              var action2, operation, type, _ref10, _ref11;
              if (item.type === 'equipment') {
                switch (item.action) {
                  case 'create':
                    action2 = '新建设备';
                    type = '设备';
                    break;
                  case 'update':
                    action2 = '修改设备';
                    type = '设备';
                    break;
                  case 'delete':
                    action2 = '删除设备';
                    type = '设备';
                }
                if (scope.controller.role.stations) {
                  if ((_ref10 = item.topic.split('/')[2], __indexOf.call(scope.controller.role.stations, _ref10) >= 0) || ((_ref11 = scope.controller.role.stations) != null ? _ref11.indexOf('_all') : void 0) > -1) {
                    operation = scope.getStationName(item.topic.split('/')[2]) + "/" + item.message.name;
                    return records.push({
                      type: type,
                      action: action2,
                      user: item.topic.split('/')[0],
                      project: item.topic.split('/')[1],
                      operation: operation,
                      address: item.message.address || "未知地址",
                      updatetime: item.updatetime
                    });
                  }
                }
              } else if (item.type === 'operation') {
                if (scope.controller.$rootScope.user.user === 'admin') {
                  if (item.topic.indexOf('login') !== -1) {
                    type = '登录';
                    action2 = '用户登录';
                    return records.push({
                      type: type,
                      action: action2,
                      user: item.topic.split('/')[0],
                      project: '',
                      operation: '用户登录',
                      address: item.message.address,
                      updatetime: item.updatetime
                    });
                  }
                } else {
                  if (item.topic === scope.userLoginTopic) {
                    type = '登录';
                    action2 = '用户登录';
                    return records.push({
                      type: type,
                      action: action2,
                      user: item.topic.split('/')[0],
                      project: '',
                      operation: '用户登录',
                      address: item.message.address,
                      updatetime: item.updatetime
                    });
                  }
                }
              }
            });
            records = _.filter(records, function(record) {
              return record.user === scope.project.model.user && record.project === scope.project.model.project || record.type === '登录';
            });
            sortDataArray = (_.sortBy(records, function(dataAarrayItem) {
              dataAarrayItem.updatetime = moment(dataAarrayItem.updatetime).format("YYYY-MM-DD HH:mm:ss");
              return dataAarrayItem.updatetime;
            })).reverse();
            scope.garddatas = sortDataArray;
            scope.garddatas2 = (_ref10 = scope.garddatas) != null ? _ref10.slice(0, scope.pageItems) : void 0;
            scope.$root.loading = false;
            return scope.$applyAsync();
          });
        };
      })(this);
      this.$timeout(function() {
        return scope.queryLog(scope.currentAction);
      }, 500);
      scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
      return scope.getStationName = function(stationId) {
        var item, _i, _len, _ref10;
        _ref10 = scope.project.stations.items;
        for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
          item = _ref10[_i];
          if (item.model.station === stationId) {
            return item.model.name;
          }
        }
        return stationId;
      };
    };

    LogSystemDirective.prototype.resize = function(scope) {};

    LogSystemDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.timeSubscription) != null ? _ref.dispose() : void 0;
    };

    return LogSystemDirective;

  })(base.BaseDirective);
  return exports = {
    LogSystemDirective: LogSystemDirective
  };
});
