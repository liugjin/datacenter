// Generated by IcedCoffeeScript 108.0.12

/*
* File: alarm-action-directive
* User: David
* Date: 2020/05/14
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var LogicActionDirective, exports;
  LogicActionDirective = (function(_super) {
    __extends(LogicActionDirective, _super);

    function LogicActionDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.getAllEquipments = __bind(this.getAllEquipments, this);
      this.show = __bind(this.show, this);
      this.id = "alarm-action";
      LogicActionDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    LogicActionDirective.prototype.setScope = function() {};

    LogicActionDirective.prototype.setCSS = function() {
      return css;
    };

    LogicActionDirective.prototype.setTemplate = function() {
      return view;
    };

    LogicActionDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1;
      scope.items = {};
      scope.stas = {};
      scope.equips = {};
      scope.cmds = {};
      scope.sigs = {};
      scope.equipments = [];
      scope.info = (_ref = (_ref1 = scope.project.model.setting) != null ? _ref1.logics : void 0) != null ? _ref : [];
      scope.logics = JSON.parse(JSON.stringify(scope.info));
      this.getAllEquipments(scope, (function(_this) {
        return function() {
          return _this.getLogicsInfo(scope);
        };
      })(this));
      scope.add = (function(_this) {
        return function() {
          scope.logic = {
            id: new Date().getTime(),
            enable: true,
            input: [
              {
                station: "",
                equipment: "",
                event: "",
                value: ""
              }
            ],
            operator: "AND",
            output: [
              {
                station: "",
                equipment: "",
                command: "",
                value: "",
                valueType: ""
              }
            ]
          };
          return scope.index = null;
        };
      })(this);
      scope.editLogic = (function(_this) {
        return function(logic, index) {
          scope.logic = JSON.parse(JSON.stringify(logic));
          return scope.index = index;
        };
      })(this);
      scope.deleteLogic = (function(_this) {
        return function(logic, index) {
          return scope.prompt("联动规则删除确认", "请确认是否删除该联动规则？删除后将从系统中移除不可恢复！", function(ok) {
            var _ref2;
            if (ok) {
              scope.info.splice(index, 1);
              if ((_ref2 = scope.project.model.setting) != null) {
                _ref2.logics = scope.info;
              }
              return scope.project.save(function(err, model) {
                scope.logics = JSON.parse(JSON.stringify(scope.info));
                return _this.getLogicsInfo(scope);
              });
            }
          });
        };
      })(this);
      scope.selectEquipment = (function(_this) {
        return function(sta, equip) {
          var equipment;
          equipment = _.find(scope.equipments, function(item) {
            return item.model.station === sta && item.model.equipment === equip;
          });
          if (!equipment) {
            return;
          }
          if (equipment != null) {
            equipment.loadSignals(null, function(e, d) {
              return scope.$applyAsync();
            });
          }
          if (equipment != null) {
            equipment.loadEvents(null, function(e, d) {
              return scope.$applyAsync();
            });
          }
          if (equipment != null) {
            equipment.loadCommands(null, function(e, d) {
              return scope.$applyAsync();
            });
          }
          return scope.equips[equipment.model.station + "." + equipment.model.equipment] = equipment;
        };
      })(this);
      scope.selectSignal = (function(_this) {
        return function(sta, equip, sig) {
          var parameter, signal;
          signal = _.find(scope.equips[sta + "." + equip].signals.items, function(item) {
            return item.model.signal === sig;
          });
          if (!signal) {
            return;
          }
          parameter = {
            enums: _.map(signal.model.format.split(","), function(item) {
              return {
                id: item.split(":")[0],
                name: item.split(":")[1]
              };
            })
          };
          return scope.sigs[sta + "." + equip + "." + sig] = parameter;
        };
      })(this);
      scope.selectCommand = (function(_this) {
        return function(sta, equip, cmd) {
          var command, parameter;
          command = _.find(scope.equips[sta + "." + equip].commands.items, function(item) {
            return item.model.command === cmd;
          });
          if (!command) {
            return;
          }
          parameter = _.find(command.model.parameters, function(item) {
            return item.key === "value";
          });
          if (parameter == null) {
            parameter = command.model.parameters[0];
          }
          if (parameter != null ? parameter.definition : void 0) {
            parameter.enums = _.map(parameter.definition.split(","), function(item) {
              return {
                id: item.split(":")[0],
                name: item.split(":")[1]
              };
            });
          }
          return scope.cmds[sta + "." + equip + "." + cmd] = parameter != null ? parameter : {
            type: "string"
          };
        };
      })(this);
      scope.saveLogic = (function(_this) {
        return function() {
          var _base, _ref2;
          if (_this.checkInvalidValue(scope.logic.input)) {
            return _this.display("输入项配置有误");
          }
          if (_this.checkInvalidValue(scope.logic.output)) {
            return _this.display("输出项配置有误");
          }
          if ((_base = scope.logic).enable == null) {
            _base.enable = true;
          }
          if (scope.index == null) {
            scope.info.push(scope.logic);
          }
          if (scope.index != null) {
            scope.info[scope.index] = scope.logic;
          }
          if ((_ref2 = scope.project.model.setting) != null) {
            _ref2.logics = scope.info;
          }
          return scope.project.save(function(err, model) {
            M.Modal.getInstance($("#logic-modal")).close();
            scope.logics = JSON.parse(JSON.stringify(scope.info));
            return _this.getLogicsInfo(scope);
          });
        };
      })(this);
      return scope.filterEnumSignal = function() {
        return function(item) {
          return item.model.dataType === "enum";
        };
      };
    };

    LogicActionDirective.prototype.getPhaseName = function(scope, value) {
      var phase, _ref;
      if (value === "+") {
        return "所有状态";
      }
      phase = _.find(scope.project.dictionary.eventphases.items, function(item) {
        return item.model.phase === value;
      });
      return (_ref = phase != null ? phase.model.name : void 0) != null ? _ref : value;
    };

    LogicActionDirective.prototype.getAllEquipments = function(scope, callback) {
      var i, station, _i, _len, _ref, _results;
      scope.stations = scope.project.stations.nitems;
      i = 0;
      _ref = scope.stations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        scope.stas[station.model.station] = station;
        _results.push(station.loadEquipments(null, null, (function(_this) {
          return function(err, equips) {
            scope.equipments = scope.equipments.concat(equips);
            i++;
            if (i === scope.stations.length) {
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this)));
      }
      return _results;
    };

    LogicActionDirective.prototype.getLogicsInfo = function(scope) {
      var id, item, items, _i, _len, _results;
      items = [];
      _.each(scope.logics, function(item) {
        var it, _i, _j, _len, _len1, _ref, _ref1;
        _ref = item.input;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          it = _ref[_i];
          it.id = item.id;
        }
        _ref1 = item.output;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          it = _ref1[_j];
          it.id = item.id;
        }
        return items = items.concat(item.input).concat(item.output);
      });
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        id = item.event ? "event." + item.event : item.command ? "command." + item.command : item.signal ? "signal." + item.signal : void 0;
        item.key = item.id + "." + item.station + "." + item.equipment + "." + id + "." + item.value;
        _results.push(this.getItemInfo(scope, item));
      }
      return _results;
    };

    LogicActionDirective.prototype.getItemInfo = function(scope, item) {
      var eName, equipment, sName, station, _ref, _ref1;
      station = _.find(scope.stations, function(it) {
        return it.model.station === item.station;
      });
      sName = (_ref = station != null ? station.model.name : void 0) != null ? _ref : (item.station === "+" ? "所有站点" : item.station);
      equipment = _.find(scope.equipments, function(it) {
        return it.model.station === item.station && it.model.equipment === item.equipment;
      });
      eName = (_ref1 = equipment != null ? equipment.model.name : void 0) != null ? _ref1 : (item.equipment === "+" ? "所有设备" : item.equipment);
      if (item.event) {
        if (item.event === "+") {
          scope.items[item.key] = {
            stationName: sName,
            equipmentName: eName,
            eventName: "所有告警",
            valueName: this.getPhaseName(scope, item.value)
          };
        } else {
          if (equipment != null) {
            equipment.loadEvents(null, (function(_this) {
              return function(err, events) {
                var event, _ref2;
                event = _.find(events, function(it) {
                  return it.model.event === item.event;
                });
                scope.items[item.key] = {
                  stationName: sName,
                  equipmentName: eName,
                  eventName: (_ref2 = event != null ? event.model.name : void 0) != null ? _ref2 : item.event,
                  valueName: _this.getPhaseName(scope, item.value)
                };
                return scope.equips[equipment.model.station + "." + equipment.model.equipment] = equipment;
              };
            })(this));
          }
        }
      }
      if (item.signal) {
        if (equipment != null) {
          equipment.loadSignals(null, (function(_this) {
            return function(err, signals) {
              var parameter, signal, _ref2;
              signal = _.find(signals, function(it) {
                return it.model.signal === item.signal;
              });
              scope.items[item.key] = {
                stationName: sName,
                equipmentName: eName,
                signalName: (_ref2 = signal != null ? signal.model.name : void 0) != null ? _ref2 : item.signal,
                valueName: _this.parseEnumValue(signal != null ? signal.model.format : void 0, item.value)
              };
              scope.equips[equipment.model.station + "." + equipment.model.equipment] = equipment;
              parameter = {
                enums: _.map(signal.model.format.split(","), function(item) {
                  return {
                    id: item.split(":")[0],
                    name: item.split(":")[1]
                  };
                })
              };
              return scope.sigs[equipment.model.station + "." + equipment.model.equipment + "." + signal.model.signal] = parameter;
            };
          })(this));
        }
      }
      if (item.command) {
        return equipment != null ? equipment.loadCommands(null, (function(_this) {
          return function(err, commands) {
            var command, parameter, _ref2;
            command = _.find(commands, function(it) {
              return it.model.command === item.command;
            });
            parameter = _.find(command != null ? command.model.parameters : void 0, function(item) {
              return item.key === "value";
            });
            if (parameter == null) {
              parameter = command != null ? command.model.parameters[0] : void 0;
            }
            scope.items[item.key] = {
              stationName: sName,
              equipmentName: eName,
              commandName: (_ref2 = command != null ? command.model.name : void 0) != null ? _ref2 : item.command,
              valueName: _this.parseEnumValue(parameter != null ? parameter.definition : void 0, item.value)
            };
            scope.equips[equipment.model.station + "." + equipment.model.equipment] = equipment;
            if (parameter != null ? parameter.definition : void 0) {
              parameter.enums = _.map(parameter.definition.split(","), function(item) {
                return {
                  id: item.split(":")[0],
                  name: item.split(":")[1]
                };
              });
            }
            return scope.cmds[equipment.model.station + "." + equipment.model.equipment + "." + command.model.command] = parameter != null ? parameter : {
              type: "string"
            };
          };
        })(this)) : void 0;
      }
    };

    LogicActionDirective.prototype.parseEnumValue = function(definition, value) {
      var arr, arrs, values, _i, _len;
      if (!definition) {
        return value;
      }
      arrs = definition.split(",");
      for (_i = 0, _len = arrs.length; _i < _len; _i++) {
        arr = arrs[_i];
        values = arr.split(":");
        if (values[0] === value) {
          return values[1];
        }
      }
      return value;
    };

    LogicActionDirective.prototype.checkInvalidValue = function(items) {
      var item, key, val, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        delete item.key;
        delete item.id;
        for (key in item) {
          val = item[key];
          if (_.isEmpty(val)) {
            return true;
          }
          if (key === "cammand" && val === "+") {
            return true;
          }
        }
      }
      return false;
    };

    LogicActionDirective.prototype.resize = function(scope) {};

    LogicActionDirective.prototype.dispose = function(scope) {};

    return LogicActionDirective;

  })(base.BaseDirective);
  return exports = {
    LogicActionDirective: LogicActionDirective
  };
});
