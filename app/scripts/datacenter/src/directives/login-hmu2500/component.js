// Generated by IcedCoffeeScript 108.0.13

/*
* File: login-hmu2500-directive
* User: David
* Date: 2020/05/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "tripledes"], function(base, css, view, _, moment, des) {
  var LoginHmu2500Directive, exports;
  LoginHmu2500Directive = (function(_super) {
    __extends(LoginHmu2500Directive, _super);

    function LoginHmu2500Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.init = __bind(this.init, this);
      this.encrypt = __bind(this.encrypt, this);
      this.restPassword = __bind(this.restPassword, this);
      this.link = __bind(this.link, this);
      this.id = "login-hmu2500";
      LoginHmu2500Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    LoginHmu2500Directive.prototype.setScope = function() {};

    LoginHmu2500Directive.prototype.setCSS = function() {
      return css;
    };

    LoginHmu2500Directive.prototype.setTemplate = function() {
      return view;
    };

    LoginHmu2500Directive.prototype.link = function(scope, element, attrs) {
      this.notificationsService = this.commonService.modelEngine.modelManager.getService("notifications");
      this.token = scope.parameters.token || "fa5d09d0-af61-11e8-acd7-937b5970daac";
      this.host = this.$window.origin;
      this.users = [];
      this.msgEquipment = {};
      this.project = {};
      this.adminUser = {};
      this.password = "";
      scope.resetUser = "";
      scope.appVersion = "";
      scope.hardwareVersion = "";
      scope.systemVersion = "";
      scope.tag = "";
      this.init(scope);
      scope.user = {};
      scope.onKeyUp = (function(_this) {
        return function(event) {
          if (event.keyCode === 13 && scope.user && scope.user.username && scope.user.password) {
            return scope.login();
          }
        };
      })(this);
      scope.login = (function(_this) {
        return function() {
          var user, _ref, _ref1, _ref2, _ref3, _ref4;
          if (!((_ref = scope.user) != null ? _ref.username : void 0)) {
            return _this.display("用户名不能为空");
          }
          if (!((_ref1 = scope.user) != null ? _ref1.password : void 0)) {
            return _this.display("密码不能为空");
          }
          user = {
            username: (_ref2 = scope.user) != null ? _ref2.username : void 0,
            password: _this.encrypt((_ref3 = scope.user) != null ? _ref3.password : void 0, (_ref4 = scope.user) != null ? _ref4.username : void 0)
          };
          return scope.controller.authService.httpService.post(scope.controller.setting.authUrls.login, user, function(err, res) {
            if (err) {
              return _this.display(err);
            }
            scope.controller.$rootScope.user = res;
            scope.controller.storage.set("clc-login-info", user);
            scope.controller.authService.setTokenCookie({
              username: res.user,
              token: res.token
            }, true);
            return scope.controller.redirect("/" + scope.controller.setting.namespace + "/");
          });
        };
      })(this);
      return scope.resetPassword = (function(_this) {
        return function() {
          if (_.isEmpty(_this.adminUser)) {
            return _this.commonService.modelEngine.modelManager.$http.get("" + _this.host + "/model/clc/api/v1/users?token=" + _this.token).then(function(res1) {
              _this.users = res1.data;
              _this.adminUser = _.find(_this.users, function(user) {
                return user.user === "admin";
              });
              return _this.commonService.modelEngine.modelManager.$http.get("" + _this.host + "/model/clc/api/v1/projects/admin?token=" + _this.token).then(function(res2) {
                _this.project = res2.data[0];
                return _this.commonService.modelEngine.modelManager.$http.get("" + _this.host + "/model/clc/api/v1/equipments/admin/" + _this.project.project + "/+/_msg?token=" + _this.token).then(function(res3) {
                  _this.msgEquipment = res3.data;
                  return _this.restPassword(scope);
                });
              });
            });
          } else {
            return _this.restPassword(scope);
          }
        };
      })(this);
    };

    LoginHmu2500Directive.prototype.restPassword = function(scope) {
      var changepPasswordUrl, resetUser, resetUserObj;
      resetUserObj = _.find(this.users, function(user) {
        return user.user === scope.resetUser;
      });
      if (resetUserObj) {
        this.password = String(Math.random()).slice(2, 8);
        changepPasswordUrl = scope.controller.setting.authUrls.changePassword;
        resetUser = {
          user: resetUserObj.user,
          oldPassword: this.encrypt(resetUserObj.phone, resetUserObj.user),
          password: this.encrypt(this.password, resetUserObj.user),
          type: "sms",
          token: resetUserObj.token
        };
        return scope.controller.authService.httpService.post(changepPasswordUrl, resetUser, (function(_this) {
          return function(err, reback) {
            var filter, msgUrl;
            if (err) {
              return _this.display(err);
            }
            filter = {
              notification: {
                user: _this.adminUser.user,
                project: _this.project.project,
                type: "command",
                trigger: "user",
                timeout: 2000,
                notification: "test-notification",
                title: "" + _this.msgEquipment.station + "/" + _this.msgEquipment.equipment + "/SMS-comand",
                content: {
                  phone: '"' + resetUserObj.phone + '"',
                  msg: "【华远云联】你的新密码为：" + _this.password
                },
                phase: "start",
                priority: 0
              }
            };
            msgUrl = _this.notificationsService.url.substr(0, _this.notificationsService.url.indexOf("/:user"));
            return _this.notificationsService.postData(msgUrl, filter, function(err2, data) {
              if (err2 || (data != null ? data.phase : void 0) === "error") {
                _this.display("发送短信失败了");
              }
              if ((data != null ? data.phase : void 0) === "timeout") {
                _this.display("发送超时失败了");
              }
              if ((data != null ? data.phase : void 0) === "completed") {
                return _this.display("新密码已发送至尾号" + (resetUserObj.phone.slice(7, 11)));
              }
            });
          };
        })(this));
      } else {
        return this.display("请输入正确的用户名");
      }
    };

    LoginHmu2500Directive.prototype.encrypt = function(password, username) {
      if (!password || !username) {
        return;
      }
      return des.DES.encrypt(password, username).toString();
    };

    LoginHmu2500Directive.prototype.init = function(scope) {
      return this.commonService.rpcGet("getVersionInfo", null, (function(_this) {
        return function(err, res) {
          scope.appVersion = res.data.appVersion;
          scope.hardwareVersion = res.data.hardwareVersion;
          scope.systemVersion = res.data.systemVersion;
          return scope.tag = res.data.tag;
        };
      })(this));
    };

    LoginHmu2500Directive.prototype.resize = function(scope) {};

    LoginHmu2500Directive.prototype.dispose = function(scope) {};

    return LoginHmu2500Directive;

  })(base.BaseDirective);
  return exports = {
    LoginHmu2500Directive: LoginHmu2500Directive
  };
});
