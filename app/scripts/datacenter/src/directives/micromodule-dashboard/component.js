// Generated by IcedCoffeeScript 108.0.12

/*
* File: micromodule-dashboard-directive
* User: David
* Date: 2019/01/31
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var MicromoduleDashboardDirective, exports;
  MicromoduleDashboardDirective = (function(_super) {
    __extends(MicromoduleDashboardDirective, _super);

    function MicromoduleDashboardDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "micromodule-dashboard";
      MicromoduleDashboardDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    MicromoduleDashboardDirective.prototype.setScope = function() {
      return {
        title: '='
      };
    };

    MicromoduleDashboardDirective.prototype.setCSS = function() {
      return css;
    };

    MicromoduleDashboardDirective.prototype.setTemplate = function() {
      return view;
    };

    MicromoduleDashboardDirective.prototype.show = function(scope, element, attrs) {
      var SubscribeStationEvent, disposeSubscribe, elems, instances, processEvent, subscribeArray, subscribePueValue, topicList, _ref, _ref1;
      window.debugR = scope;
      scope.title = (_ref = scope.parameters.title) != null ? _ref : scope.project.model.setting.name;
      elems = element.find('.dropdown-trigger');
      instances = M.Dropdown.init(elems, {
        hover: true,
        container: element.find('#station-select')[0],
        constrainWidth: false
      });
      scope.document = document;
      subscribePueValue = (function(_this) {
        return function() {
          var efficientFilter, _ref1;
          efficientFilter = {
            user: scope.project.model.user,
            project: scope.project.model.project,
            station: scope.station.model.station,
            equipment: '_station_efficient',
            signal: 'pue-value'
          };
          if ((_ref1 = scope.efficientStatusSubscription) != null) {
            _ref1.dispose();
          }
          return scope.efficientStatusSubscription = _this.commonService.signalLiveSession.subscribeValues(efficientFilter, function(err, d) {
            var _ref2;
            if (d.message.signal === 'pue-value') {
              return scope.pue = (_ref2 = d.message.value) != null ? _ref2.toFixed(2) : void 0;
            }
          });
        };
      })(this);
      scope.severityMap = {};
      topicList = {};
      subscribeArray = [];
      disposeSubscribe = function() {
        var i, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = subscribeArray.length; _i < _len; _i++) {
          i = subscribeArray[_i];
          _results.push(i != null ? i.dispose() : void 0);
        }
        return _results;
      };
      scope.disposeSubscribe = disposeSubscribe;
      processEvent = function(event) {
        var key;
        if (!event) {
          return;
        }
        key = "" + event.user + "." + event.project + "." + event.station + "." + event.equipment + "." + event.event + "." + event.severity + "." + event.startTime;
        if (!topicList[key]) {
          topicList[key] = event;
          if (!topicList[key].endTime) {
            if (!scope.severityMap[event.severity]) {
              return scope.severityMap[event.severity] = 1;
            } else {
              return scope.severityMap[event.severity] += 1;
            }
          }
        } else if (topicList[key] && !topicList[key].endTime && event.endTime) {
          topicList[key] = event;
          return scope.severityMap[event.severity] -= 1;
        }
      };
      SubscribeStationEvent = (function(_this) {
        return function() {
          var filter, project, station, subscribe, user, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
          disposeSubscribe();
          user = scope.project.model.user;
          project = scope.project.model.project;
          if (((_ref1 = scope.station) != null ? (_ref2 = _ref1.stations) != null ? _ref2.length : void 0 : void 0) > 0) {
            _ref4 = (_ref3 = scope.station) != null ? _ref3.stations : void 0;
            _results = [];
            for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
              station = _ref4[_i];
              filter = {
                user: user,
                project: project,
                station: station.model.station
              };
              subscribe = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, d) {
                return processEvent(d.message);
              });
              _results.push(subscribeArray.push(subscribe));
            }
            return _results;
          } else {
            filter = {
              user: user,
              project: project,
              station: (_ref5 = scope.station) != null ? _ref5.model.station : void 0
            };
            subscribe = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, d) {
              return processEvent(d.message);
            });
            return subscribeArray.push(subscribe);
          }
        };
      })(this);
      scope.selectStation = (function(_this) {
        return function(station) {
          var rotateWaitingFlag;
          if (!station) {
            return;
          }
          scope.controller.$location.search('station=' + station.model.station);
          scope.severityMap = {};
          topicList = {};
          subscribeArray = [];
          scope.rotateIndex = 0;
          rotateWaitingFlag = true;
          scope.station = station;
          if (station.model.d3) {
            scope.scene = "/resource/upload/img/public/" + station.model.d3;
          } else {
            setTimeout(function() {
              return scope.scene = "";
            }, 200);
          }
          subscribePueValue();
          return SubscribeStationEvent();
        };
      })(this);
      scope.selectStation(scope.station);
      scope.day = moment().format('YYYY-MM-DD');
      scope.time = moment().format('h:mm:ss');
      scope.date = moment().format('dddd');
      scope.interval = setInterval((function(_this) {
        return function() {
          scope.day = moment().format('YYYY-MM-DD');
          scope.time = moment().format('h:mm:ss');
          scope.date = moment().format('dddd');
          return scope.$applyAsync();
        };
      })(this), 1000);
      scope.showVideo = (function(_this) {
        return function(flag) {
          if (flag) {
            return scope.videos = [scope.equipment];
          } else {
            return scope.videos = [];
          }
        };
      })(this);
      if ((_ref1 = scope.subscribeRoom3dSelectedEquipment) != null) {
        _ref1.dispose();
      }
      return scope.subscribeRoom3dSelectedEquipment = this.commonService.subscribeEventBus("room-3d-select-equipment", (function(_this) {
        return function(m) {
          var equip, _ref2, _ref3, _ref4;
          if ((m != null ? (_ref2 = m.message) != null ? (_ref3 = _ref2.equipment) != null ? _ref3.model.type : void 0 : void 0 : void 0) === "video") {
            equip = m != null ? (_ref4 = m.message) != null ? _ref4.equipment : void 0 : void 0;
            scope.equipment = equip;
            return scope.showVideo(true);
          }
        };
      })(this));
    };

    MicromoduleDashboardDirective.prototype.resize = function(scope) {};

    MicromoduleDashboardDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      clearInterval(scope.interval);
      if ((_ref = scope.efficientStatusSubscription) != null) {
        _ref.dispose();
      }
      scope.disposeSubscribe();
      return (_ref1 = scope.subscribeRoom3dSelectedEquipment) != null ? _ref1.dispose() : void 0;
    };

    return MicromoduleDashboardDirective;

  })(base.BaseDirective);
  return exports = {
    MicromoduleDashboardDirective: MicromoduleDashboardDirective
  };
});
