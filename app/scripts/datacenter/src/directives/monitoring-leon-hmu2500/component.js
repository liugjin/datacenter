// Generated by IcedCoffeeScript 108.0.11

/*
* File: monitoring-leon-hmu2500-directive
* User: David
* Date: 2020/05/30
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var MonitoringLeonHmu2500Directive, exports;
  MonitoringLeonHmu2500Directive = (function(_super) {
    __extends(MonitoringLeonHmu2500Directive, _super);

    function MonitoringLeonHmu2500Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "monitoring-leon-hmu2500";
      MonitoringLeonHmu2500Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    MonitoringLeonHmu2500Directive.prototype.setScope = function() {};

    MonitoringLeonHmu2500Directive.prototype.setCSS = function() {
      return css;
    };

    MonitoringLeonHmu2500Directive.prototype.setTemplate = function() {
      return view;
    };

    MonitoringLeonHmu2500Directive.prototype.show = function(scope, element, attrs) {
      var filter1, filter2, _ref, _ref1, _ref2, _ref3, _ref4;
      if (!scope.firstload) {
        return;
      }
      scope.categories = {};
      scope.equipTypeLists = [];
      scope.status = {};
      scope.alarms = {};
      scope.currentType = null;
      scope.stationCurrentType = null;
      scope.treeEquipmentFlag = false;
      scope.view = false;
      scope.detail = false;
      scope.viewName = '视图';
      scope.pageIndex = 1;
      scope.pageItems = 8;
      scope.groups = [];
      scope.group = "all";
      scope.filterType = (_ref = scope.parameters.filterType) != null ? _ref : false;
      scope.selectEquipType = (function(_this) {
        return function(type) {
          if (!type) {
            return;
          }
          scope.pageIndex = 1;
          scope.detail = false;
          scope.currentType = type;
          scope.treeEquipKey = null;
          _this.selectType(scope, type, null, false);
          return scope.group = "all";
        };
      })(this);
      scope.selectAllTypes = (function(_this) {
        return function() {
          return _this.selectStation(scope, scope.station);
        };
      })(this);
      if ((_ref1 = scope.treeEquipId) != null) {
        _ref1.dispose();
      }
      scope.treeEquipId = this.commonService.subscribeEventBus('treeEquipKey', (function(_this) {
        return function(d) {
          var equip;
          scope.treeEquipKey = d.message.key;
          scope.treeEquipmentFlag = true;
          equip = _.find(scope.equipments, function(item) {
            return item.key === d.message.key;
          });
          return scope.showEquipment(equip);
        };
      })(this));
      scope.filterEquipment = (function(_this) {
        return function() {
          return function(equipment) {
            var text, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
            if (equipment.model.template === 'card-sender' || equipment.model.template === 'card_template' || equipment.model.template === 'people_template') {
              return false;
            }
            if (scope.group !== "all" && equipment.model.group !== scope.group) {
              return false;
            }
            if (scope.treeEquipKey && (equipment.key !== scope.treeEquipKey)) {
              return false;
            }
            text = (_ref2 = scope.searchLists) != null ? _ref2.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (((_ref3 = equipment.model.equipment) != null ? _ref3.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref4 = equipment.model.name) != null ? _ref4.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref5 = equipment.model.tag) != null ? _ref5.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref6 = equipment.model.typeName) != null ? _ref6.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref7 = equipment.model.stationName) != null ? _ref7.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref8 = equipment.model.vendorName) != null ? _ref8.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
      scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!scope.equipments) {
            return;
          }
          items = [];
          items = _.filter(scope.equipments, function(equipment) {
            var text, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
            if (equipment.model.template === 'card-sender' || equipment.model.template === 'card_template' || equipment.model.template === 'people_template') {
              return false;
            }
            if (scope.group !== "all" && equipment.model.group !== scope.group) {
              return false;
            }
            text = (_ref2 = scope.searchLists) != null ? _ref2.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (((_ref3 = equipment.model.equipment) != null ? _ref3.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref4 = equipment.model.name) != null ? _ref4.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref5 = equipment.model.tag) != null ? _ref5.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref6 = equipment.model.typeName) != null ? _ref6.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref7 = equipment.model.stationName) != null ? _ref7.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            if (((_ref8 = equipment.model.vendorName) != null ? _ref8.toLowerCase().indexOf(text) : void 0) >= 0) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      scope.limitToEquipment = (function(_this) {
        return function() {
          var aa, result;
          if (scope.filterEquipmentItem() && scope.filterEquipmentItem().pageCount === scope.pageIndex) {
            aa = scope.filterEquipmentItem().items % scope.pageItems;
            result = -(aa === 0 ? scope.pageItems : aa);
          } else {
            result = -scope.pageItems;
          }
          return result;
        };
      })(this);
      scope.selectPage = (function(_this) {
        return function(page) {
          return scope.pageIndex = page;
        };
      })(this);
      scope.switchView = (function(_this) {
        return function() {
          scope.view = !scope.view;
          scope.pageIndex = 1;
          if (scope.view) {
            scope.pageItems = 12;
            return scope.viewName = '表格';
          } else {
            scope.pageItems = 8;
            return scope.viewName = '视图';
          }
        };
      })(this);
      scope.showEquipment = (function(_this) {
        return function(equipment) {
          scope.detail = true;
          if (equipment) {
            return equipment.loadEquipmentTemplate(null, function(err, template) {
              scope.equipment = null;
              return _this.commonService.publishEventBus('equipmentId', {
                equipmentId: {
                  station: equipment.model.station,
                  equipment: equipment.model.equipment
                }
              });
            });
          }
        };
      })(this);
      scope.goBack = (function(_this) {
        return function() {
          return scope.detail = false;
        };
      })(this);
      scope.goAhead = (function(_this) {
        return function() {
          return scope.detail = true;
        };
      })(this);
      scope.selectGroup = (function(_this) {
        return function(group) {
          scope.group = group;
          return scope.treeEquipKey = null;
        };
      })(this);
      scope.getEquipmentImage = (function(_this) {
        return function(equip) {
          var item, _ref2;
          if (!_.isEmpty(equip.model.image)) {
            return equip.model.image;
          }
          item = _.find(scope.templates, function(template) {
            return template.model.type === equip.model.type && template.model.template === equip.model.template;
          });
          return item != null ? (_ref2 = item.model) != null ? _ref2.image : void 0 : void 0;
        };
      })(this);
      scope.project.loadEquipmentTemplates(null, null, (function(_this) {
        return function(err, templates) {
          var n, station, _i, _len, _ref2, _results;
          scope.templates = templates;
          n = 0;
          _ref2 = scope.project.stations.nitems;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            station = _ref2[_i];
            _results.push(_this.loadStationEquipStatistics(scope, station, function() {
              n++;
              if (n === scope.project.stations.nitems.length) {
                _.each(scope.project.stations.nitems, function(sta) {
                  return _this.computeStationStatistic(scope, sta);
                });
                return _this.selectStation(scope, scope.station, true);
              }
            }));
          }
          return _results;
        };
      })(this));
      if ((_ref2 = scope.statusSubscription) != null) {
        _ref2.dispose();
      }
      filter1 = scope.project.getIds();
      filter1.station = "+";
      filter1.equipment = "+";
      filter1.signal = "communication-status";
      scope.statusSubscription = this.commonService.signalLiveSession.subscribeValues(filter1, (function(_this) {
        return function(err, d) {
          return scope.status[d.message.station + "." + d.message.equipment] = d.message.value;
        };
      })(this));
      if ((_ref3 = scope.alarmsSubscription) != null) {
        _ref3.dispose();
      }
      filter2 = scope.project.getIds();
      filter2.station = "+";
      filter2.equipment = "+";
      filter2.signal = "_alarms";
      scope.alarmsSubscription = this.commonService.signalLiveSession.subscribeValues(filter2, (function(_this) {
        return function(err, d) {
          return scope.alarms[d.message.station + "." + d.message.equipment] = d.message.value;
        };
      })(this));
      if ((_ref4 = scope.stationSubscription) != null) {
        _ref4.dispose();
      }
      return scope.stationSubscription = this.commonService.subscribeEventBus("selectStation", (function(_this) {
        return function(msg) {
          var station;
          station = _.find(scope.project.stations.items, function(sta) {
            return sta.model.station === msg.message.id;
          });
          return _this.selectStation(scope, station);
        };
      })(this));
    };

    MonitoringLeonHmu2500Directive.prototype.selectStation = function(scope, station, firstLoad) {
      var all, key, stationEquipCounts, stationTypeArr, type, value, _ref;
      scope.treeEquipKey = null;
      scope.treeEquipmentFlag = false;
      scope.station = station;
      scope.equipTypeLists = _.map(scope.categories[station.model.station], function(value, key) {
        var item;
        item = _.find(scope.project.dictionary.equipmenttypes.items, function(it) {
          return it.model.type === key;
        });
        if (item) {
          value.image = item.model.image;
          value.index = item.model.index;
        }
        return value;
      });
      scope.equipTypeLists = _.sortBy(scope.equipTypeLists, function(item) {
        return 0 - item.index;
      });
      if (this.$routeParams.type) {
        type = _.find(scope.equipTypeLists, (function(_this) {
          return function(item) {
            return item.type === _this.$routeParams.type;
          };
        })(this));
      }
      type = type != null ? type : scope.equipTypeLists[0];
      if (scope.equipment) {
        type = _.find(scope.equipTypeLists, (function(_this) {
          return function(item) {
            return item.type === scope.equipment.model.type;
          };
        })(this));
      }
      stationTypeArr = [];
      stationEquipCounts = 0;
      _ref = scope.categories[station.model.station];
      for (key in _ref) {
        value = _ref[key];
        stationTypeArr.push(key);
        stationEquipCounts += value.count;
      }
      all = {
        type: 'all',
        name: '所有类型',
        count: stationEquipCounts,
        allTypes: stationTypeArr
      };
      scope.stationCurrentType = all;
      if (firstLoad === true) {
        scope.selectEquipType(type, true);
      } else {
        scope.selectEquipType(all);
      }
      if (scope.equipment) {
        setTimeout((function(_this) {
          return function() {
            return scope.showEquipment(scope.equipment);
          };
        })(this), 10);
      }
      return scope.$applyAsync();
    };

    MonitoringLeonHmu2500Directive.prototype.loadStationEquipStatistics = function(scope, station, callback) {
      return station.loadStatisticByEquipmentTypes((function(_this) {
        return function(err, statistic) {
          var value;
          value = JSON.parse(JSON.stringify(statistic.statistic));
          return _this.filterStationStatistic(station, value, function() {
            var key, type, val;
            if (scope.filterType) {
              for (key in value) {
                val = value[key];
                type = _.find(scope.project.dictionary.equipmenttypes.items, function(item) {
                  return item.model.type === key;
                });
                if ((type != null ? type.model.visible : void 0) === false) {
                  delete value[key];
                }
              }
            }
            station.categories = value;
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };

    MonitoringLeonHmu2500Directive.prototype.filterStationStatistic = function(station, statistic, callback) {
      return station.loadEquipments({
        type: "access",
        template: {
          $nin: ['card-sender', 'card_template', 'people_template']
        }
      }, null, (function(_this) {
        return function(err, equips) {
          var _ref;
          if ((_ref = statistic["access"]) != null) {
            _ref.count = equips.length;
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    MonitoringLeonHmu2500Directive.prototype.computeStationStatistic = function(scope, station) {
      var item, sta, stations, _i, _len;
      scope.categories[station.model.station] = item = JSON.parse(JSON.stringify(station.categories));
      stations = this.commonService.loadStationChildren(station, false);
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        sta = stations[_i];
        _.mapObject(sta.categories, function(val, key) {
          return item[key].count += val.count;
        });
      }
      return _.mapObject(item, function(val, key) {
        if (val.count === 0 || key.substr(0, 1) === "_") {
          return delete item[key];
        }
      });
    };

    MonitoringLeonHmu2500Directive.prototype.selectType = function(scope, type, callback, refresh) {
      var filter, len, station, stations, _i, _j, _len, _len1, _results, _results1;
      scope.equipments = [];
      scope.groups = [];
      stations = this.commonService.loadStationChildren(scope.station, true);
      if (type.type === 'all') {
        scope.currentType = type;
        scope.stationCurrentType = type;
        len = 0;
        _results = [];
        for (_i = 0, _len = stations.length; _i < _len; _i++) {
          station = stations[_i];
          filter = {};
          filter.type = {
            $in: type.allTypes
          };
          _results.push(station.loadEquipments(filter, null, (function(_this) {
            return function(err, equips) {
              var equip, _j, _len1, _ref, _ref1, _ref2, _ref3;
              len++;
              for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
                equip = equips[_j];
                equip.model.typeName = (_ref = _.find(scope.project.dictionary.equipmenttypes.items, function(tp) {
                  return tp.key === equip.model.type;
                })) != null ? _ref.model.name : void 0;
                equip.model.templateName = (_ref1 = _.find(scope.templates, function(template) {
                  return template.model.type === equip.model.type && template.model.template === equip.model.template;
                })) != null ? _ref1.model.name : void 0;
                equip.model.vendorName = (_ref2 = _.find(scope.project.dictionary.vendors.items, function(vendor) {
                  return vendor.key === equip.model.vendor;
                })) != null ? _ref2.model.name : void 0;
                equip.model.stationName = (_ref3 = _.find(scope.project.stations.items, function(station) {
                  return station.model.station === equip.model.station;
                })) != null ? _ref3.model.name : void 0;
                if (equip.model.group && scope.groups.indexOf(equip.model.group) === -1) {
                  scope.groups.push(equip.model.group);
                }
              }
              scope.equipments = scope.equipments.concat(equips);
              if (len === stations.length) {
                return typeof callback === "function" ? callback(scope.equipments) : void 0;
              }
            };
          })(this), refresh));
        }
        return _results;
      } else {
        len = 0;
        _results1 = [];
        for (_j = 0, _len1 = stations.length; _j < _len1; _j++) {
          station = stations[_j];
          _results1.push(this.commonService.loadEquipmentsByType(station, type.type, (function(_this) {
            return function(err, equips) {
              var equip, _k, _len2, _ref, _ref1, _ref2, _ref3;
              len++;
              for (_k = 0, _len2 = equips.length; _k < _len2; _k++) {
                equip = equips[_k];
                equip.model.typeName = (_ref = _.find(scope.project.dictionary.equipmenttypes.items, function(tp) {
                  return tp.key === equip.model.type;
                })) != null ? _ref.model.name : void 0;
                equip.model.templateName = (_ref1 = _.find(scope.templates, function(template) {
                  return template.model.type === equip.model.type && template.model.template === equip.model.template;
                })) != null ? _ref1.model.name : void 0;
                equip.model.vendorName = (_ref2 = _.find(scope.project.dictionary.vendors.items, function(vendor) {
                  return vendor.key === equip.model.vendor;
                })) != null ? _ref2.model.name : void 0;
                equip.model.stationName = (_ref3 = _.find(scope.project.stations.items, function(station) {
                  return station.model.station === equip.model.station;
                })) != null ? _ref3.model.name : void 0;
                if (equip.model.group && scope.groups.indexOf(equip.model.group) === -1) {
                  scope.groups.push(equip.model.group);
                }
              }
              scope.equipments = scope.equipments.concat(equips);
              if (len === stations.length) {
                return typeof callback === "function" ? callback(scope.equipments) : void 0;
              }
            };
          })(this), refresh));
        }
        return _results1;
      }
    };

    MonitoringLeonHmu2500Directive.prototype.resize = function(scope) {};

    MonitoringLeonHmu2500Directive.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2, _ref3;
      if ((_ref = scope.statusSubscription) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.alarmsSubscription) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = scope.stationSubscription) != null) {
        _ref2.dispose();
      }
      return (_ref3 = scope.treeEquipId) != null ? _ref3.dispose() : void 0;
    };

    return MonitoringLeonHmu2500Directive;

  })(base.BaseDirective);
  return exports = {
    MonitoringLeonHmu2500Directive: MonitoringLeonHmu2500Directive
  };
});
