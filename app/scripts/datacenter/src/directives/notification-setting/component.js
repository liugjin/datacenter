// Generated by IcedCoffeeScript 108.0.13

/*
* File: notification-setting-directive
* User: David
* Date: 2020/05/25
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var NotificationSettingDirective, exports;
  NotificationSettingDirective = (function(_super) {
    __extends(NotificationSettingDirective, _super);

    function NotificationSettingDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.loadRules = __bind(this.loadRules, this);
      this.show = __bind(this.show, this);
      this.id = "notification-setting";
      NotificationSettingDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    NotificationSettingDirective.prototype.setScope = function() {};

    NotificationSettingDirective.prototype.setCSS = function() {
      return css;
    };

    NotificationSettingDirective.prototype.setTemplate = function() {
      return view;
    };

    NotificationSettingDirective.prototype.show = function(scope, element, attrs) {
      scope.categories = [
        {
          name: '邮件',
          type: 'email',
          checked: false,
          imgUrl: "" + (this.getComponentPath('images/yonghu.svg'))
        }, {
          name: '内置短信',
          type: 'command',
          checked: false,
          imgUrl: "" + (this.getComponentPath('images/duanxin.svg'))
        }, {
          name: '短信猫',
          type: 'sms',
          checked: false,
          imgUrl: "" + (this.getComponentPath('images/duanxin-duanxinmao.svg'))
        }
      ];
      scope.formats = [
        {
          name: "设备名称",
          id: "equipment",
          checked: true,
          disabled: true
        }, {
          name: "告警描述",
          id: "event",
          checked: true,
          disabled: true
        }, {
          name: "告警状态",
          id: "phase",
          checked: true,
          disabled: true
        }, {
          name: "告警时间",
          id: "startTime",
          checked: true,
          disabled: false
        }, {
          name: "告警级别",
          id: "severity",
          checked: true,
          disabled: false
        }, {
          name: "机房名称",
          id: "station",
          checked: true,
          disabled: false
        }
      ];
      scope.innerSms = false;
      scope.cate = scope.categories[0].type;
      this.subscribeNotificationSetting(scope);
      this.getUsers(scope);
      this.loadRules(scope);
      scope.equips = [];
      scope.stations = _.map(scope.project.stations.nitems, (function(_this) {
        return function(item) {
          item.loadEquipments(null, null, function(err, equips) {
            scope.equips = scope.equips.concat(equips);
            scope.smsDevice = _.find(scope.equips, function(item) {
              return item.model.type === "_SMS";
            });
            return console.log("scope.smsDevice", scope.smsDevice);
          });
          return {
            id: item.model.station,
            name: item.model.name,
            checked: false
          };
        };
      })(this));
      scope.types = _.map(scope.project.dictionary.equipmenttypes.items, (function(_this) {
        return function(item) {
          return {
            id: item.model.type,
            name: item.model.name,
            checked: false
          };
        };
      })(this));
      scope.severities = _.map(scope.project.dictionary.eventseverities.items, (function(_this) {
        return function(item) {
          return {
            id: item.model.severity,
            name: item.model.name,
            checked: false
          };
        };
      })(this));
      scope.phases = _.map(scope.project.dictionary.eventphases.items, (function(_this) {
        return function(item) {
          return {
            id: item.model.phase,
            name: item.model.name,
            checked: false
          };
        };
      })(this));
      scope.selectAll = (function(_this) {
        return function(type, flag) {
          return _this.setItemChecked(scope[type], null, scope[flag]);
        };
      })(this);
      scope.checkAll = (function(_this) {
        return function(item, type, flag) {
          if (item.checked === false) {
            return scope[flag] = false;
          } else if (!(_.find(scope[type], function(it) {
            return it.checked === false;
          }))) {
            return scope[flag] = true;
          }
        };
      })(this);
      scope.cates_chan = (function(_this) {
        return function(type) {
          scope.cate = type;
          _this.getUsers(scope);
          return _this.loadRules(scope);
        };
      })(this);
      scope.save = (function(_this) {
        return function() {
          var rule, users;
          rule = {
            allStations: true,
            allEquipments: true,
            allEventTypes: true
          };
          if (scope.allTypes) {
            rule.allEquipmentTypes = true;
          } else {
            rule.equipmentTypes = _.pluck(_.filter(scope.types, function(item) {
              return item.checked;
            }), "id");
            rule.equipmentTypes.push("Facility", "_SMS", "_station_management");
          }
          if (scope.allSeverities) {
            rule.allEventSeverities = true;
          } else {
            rule.eventSeverities = _.pluck(_.filter(scope.severities, function(item) {
              return item.checked;
            }), "id");
          }
          if (scope.allPhases) {
            rule.allEventPhases = true;
          } else {
            rule.eventPhases = _.pluck(_.filter(scope.phases, function(item) {
              return item.checked;
            }), "id");
          }
          if (scope.allUsers) {
            users = ["_all"];
          } else {
            users = _.pluck(_.filter(scope.users, function(item) {
              return item.checked;
            }), "id");
          }
          return _this.removeRules(scope, function() {
            return _this.createRule(scope, rule, users, function() {
              return _this.display("保存成功");
            });
          });
        };
      })(this);
      scope.saveMail = (function(_this) {
        return function() {
          scope.mail.enable = true;
          scope.mail.options.port = parseInt(scope.mail.options.port);
          if (!scope.config) {
            return _this.display("后台配置服务未启动");
          }
          scope.config.version = _this.increaseVersion(scope.config.version);
          _this.publishNotificationSetting(scope, scope.config);
          return _this.display("保存成功");
        };
      })(this);
      scope.saveSMS = (function(_this) {
        return function() {
          scope.sms.enable = true;
          scope.sms.options.baudRate = parseInt(scope.sms.options.baudRate);
          if (!scope.config) {
            return _this.display("后台配置服务未启动");
          }
          _this.publishNotificationSetting(scope, scope.config);
          return _this.display("保存成功");
        };
      })(this);
      return scope.test = (function(_this) {
        return function(address, type) {
          var data, service, url, _ref, _ref1;
          if (type === "email" && !address) {
            return _this.display("请输入收件邮箱地址");
          }
          if ((type === "sms" || type === "phone") && !address) {
            return _this.display("请输入手机号码");
          }
          if (type === "sms" && scope.innerSms) {
            type = "command";
          }
          data = {
            notification: {
              user: scope.project.model.user,
              project: scope.project.model.project,
              type: type,
              trigger: "user",
              receivers: address,
              timeout: 2000,
              notification: "test-notification",
              title: scope.innerSms ? ((_ref = scope.smsDevice) != null ? _ref.model.station : void 0) + "/" + ((_ref1 = scope.smsDevice) != null ? _ref1.model.equipment : void 0) + "/SMS-comand" : "信息发送测试",
              content: scope.innerSms ? {
                phone: address,
                msg: "这是一条测试消息"
              } : "这是一条测试消息",
              phase: "start",
              priority: 0
            }
          };
          service = _this.commonService.modelEngine.modelManager.getService("notifications");
          url = service.url.substr(0, service.url.indexOf("/:user"));
          return service.postData(url, data, function(err, data) {
            if (err || (data != null ? data.phase : void 0) === "error") {
              _this.display("发送失败");
            }
            if ((data != null ? data.phase : void 0) === "timeout") {
              _this.display("发送超时");
            }
            if ((data != null ? data.phase : void 0) === "completed") {
              return _this.display("发送成功");
            }
          });
        };
      })(this);
    };

    NotificationSettingDirective.prototype.increaseVersion = function(version) {
      var nums;
      nums = version.split(".");
      nums[nums.length - 1] = parseInt(nums[nums.length - 1]) + 1;
      return nums.join(".");
    };

    NotificationSettingDirective.prototype.getUsers = function(scope) {
      var users;
      users = this.commonService.modelEngine.modelManager.getService("users");
      return users.get(null, (function(_this) {
        return function(err, users) {
          return scope.users = _.map(users, function(item) {
            return {
              id: item.user,
              name: item.name,
              checked: false,
              phone: item.phone
            };
          });
        };
      })(this));
    };

    NotificationSettingDirective.prototype.setItemChecked = function(items, value, flag) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        item.checked = flag ? true : false;
        if (flag || _.find(value, function(it) {
          return it === item.id;
        })) {
          _results.push(item.checked = true);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    NotificationSettingDirective.prototype.loadRules = function(scope) {
      scope.service = this.commonService.modelEngine.modelManager.getService("notificationrules");
      return scope.service.query({
        user: scope.project.model.user,
        project: scope.project.model.project,
        type: scope.cate
      }, null, (function(_this) {
        return function(err, rules) {
          var formats, rule;
          scope.rules = rules;
          if (rules && rules.length > 0) {
            rule = rules[0].rule;
            scope.allStations = rule.allStation ? true : false;
            _this.setItemChecked(scope.stations, rule.stations, rule.allStations);
            scope.allTypes = rule.allEquipmentTypes ? true : false;
            _this.setItemChecked(scope.types, rule.equipmentTypes, rule.allEquipmentTypes);
            scope.allSeverities = rule.allEventSeverities ? true : false;
            _this.setItemChecked(scope.severities, rule.eventSeverities, rule.allEventSeverities);
            scope.allPhases = rule.allEventPhases ? true : false;
            _this.setItemChecked(scope.phases, rule.eventPhases, rule.allEventPhases);
            scope.allUsers = rules[0].users[0] === "_all" ? true : false;
            _this.setItemChecked(scope.users, rules[0].users, scope.allUsers);
            return _this.setItemChecked(scope.formats, rules[0].desc ? JSON.parse(rules[0].desc) : void 0);
          } else {
            scope.allStations = false;
            _this.setItemChecked(scope.stations, null, null);
            scope.allTypes = false;
            _this.setItemChecked(scope.types, null, null);
            scope.allSeverities = false;
            _this.setItemChecked(scope.severities, null, null);
            scope.allPhases = false;
            _this.setItemChecked(scope.phases, null, null);
            scope.allUsers = false;
            _this.setItemChecked(scope.users, null, null);
            if (scope.cate === "email") {
              formats = ["equipment", "event", "startTime", "severity", "station", "phase"];
            }
            if (scope.cate === "command" || scope.cate === "sms") {
              formats = ["equipment", "event", "phase"];
            }
            return _this.setItemChecked(scope.formats, formats);
          }
        };
      })(this), true);
    };

    NotificationSettingDirective.prototype.removeRules = function(scope, callback) {
      var i, item, length, _i, _len, _ref, _results;
      length = scope.rules.length;
      if (length === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
      i = 0;
      _ref = scope.rules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(scope.service.remove(item, (function(_this) {
          return function(err, rules) {
            i++;
            if (i === length) {
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this)));
      }
      return _results;
    };

    NotificationSettingDirective.prototype.createRule = function(scope, ru, users, callback) {
      var content, rule;
      content = this.getContent(scope, scope.cate);
      rule = {
        user: scope.project.model.user,
        project: scope.project.model.project,
        notification: "notification-" + scope.cate,
        content: content.content,
        contentType: content.contentType,
        delay: 0,
        enable: true,
        events: [],
        index: 0,
        name: scope.cate,
        phase: "start",
        priority: 0,
        repeatPeriod: 0,
        repeatTimes: 0,
        rule: ru,
        ruleType: "complex",
        timeout: 60,
        title: content.title,
        type: scope.cate,
        users: users,
        visible: true,
        desc: JSON.stringify(_.pluck(_.filter(scope.formats, function(item) {
          return item.checked;
        }), "id"))
      };
      return scope.service.save(rule, (function(_this) {
        return function(err, data) {
          return typeof callback === "function" ? callback(err) : void 0;
        };
      })(this));
    };

    NotificationSettingDirective.prototype.getContent = function(scope, type) {
      var result, _ref, _ref1;
      result = {};
      switch (type) {
        case "email":
          result.title = "{{equipmentName}}-{{title}}-{{severityName}}-{{phaseName}}";
          result.content = this.getEmailContent(scope);
          result.contentType = "template";
          break;
        case "sms":
        case "phone":
          result.title = "";
          result.content = this.getSMSContent(scope);
          result.contentType = "script";
          break;
        case "command":
          result.title = ((_ref = scope.smsDevice) != null ? _ref.model.station : void 0) + "/" + ((_ref1 = scope.smsDevice) != null ? _ref1.model.equipment : void 0) + "/SMS-comand";
          result.content = this.getCommandContent(scope);
          result.contentType = "script";
      }
      return result;
    };

    NotificationSettingDirective.prototype.getEmailContent = function(scope) {
      var str;
      str = '<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>告警通知</title> <meta name="viewport" content="width=device-width, initial-scale=1"> </head> <body style="background-color: #e9ecef;"> <table border="0" cellpadding="0" cellspacing="0" width="100%"> <tr> <td align="center" bgcolor="#e9ecef"> <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px;"> <tr> <td align="left" bgcolor="#ffffff" style="padding: 36px 24px 0; font-family: \'Microsoft Yahei\', Arial; border-top: 3px solid #d4dadf;"> <h1 style="margin: 0; font-size: 32px; font-weight: 700; letter-spacing: -1px; line-height: 48px;">{{title}}</h1> </td> </tr> </table> </td> </tr> <tr> <td align="center" bgcolor="#e9ecef"> <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px;">';
      if (scope.formats[2].checked) {
        str = str + '  <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">告警状态</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{phaseName}}</span> </td> </tr>';
      }
      if (scope.formats[4].checked) {
        str = str + '   <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">告警等级</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{severityName}}</span> </td> </tr>';
      }
      if (scope.formats[5].checked) {
        str = str + '   <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">机房名称</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{stationName}}</span> </td> </tr>';
      }
      if (scope.formats[0].checked) {
        str = str + '   <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">设备名称</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{equipmentName}}</span> </td> </tr>';
      }
      if (scope.formats[1].checked) {
        str = str + '   <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">事件名称</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{eventName}}</span> </td> </tr>';
      }
      if (scope.formats[3].checked) {
        str = str + '   <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">开始时间</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{startTimeDisplay}}</span> </td> </tr> <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">结束时间</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{endTimeDisplay}}</span> </td> </tr> <tr> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 12px; line-height: 20px; color: #9e9e9e; border-bottom: 3px solid #d4dadf"> <label style="margin: 0;">确认时间</label> </td> <td align="left" bgcolor="#ffffff" style="padding: 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 16px; line-height: 24px; border-bottom: 3px solid #d4dadf"> <span style="margin: 0;">{{confirmTimeDisplay}}</span> </td> </tr>';
      }
      str = str + ' </table> </td> </tr> <tr> <td align="center" bgcolor="#e9ecef" style="padding: 24px;"> <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px;"> <tr> <td align="center" bgcolor="#e9ecef" style="padding: 12px 24px; font-family: \'Microsoft Yahei\', Arial; font-size: 14px; line-height: 20px; color: #666;"> <p style="margin: 0;">海鸥工业物联网云平台-2019</p> </td> </tr> </table> </td> </tr> </table> </body> </html>';
      return str;
    };

    NotificationSettingDirective.prototype.getSMSContent = function(scope) {
      var content;
      content = '//js \n var str=';
      if (scope.formats[0].checked) {
        content += '$event.equipmentName';
      }
      if (scope.formats[1].checked) {
        content += '+"--"+$event.title';
      }
      if (scope.formats[4].checked) {
        content += '+"--"+$event.severityName';
      }
      if (scope.formats[2].checked) {
        content += '+"--"+($event.phase=="start"?"告警开始":($event.phase=="confirm"?"告警确认":"告警结束"))';
      }
      return content += '; return str';
    };

    NotificationSettingDirective.prototype.getCommandContent = function(scope) {
      var content, phones;
      phones = "";
      _.each(scope.users, function(item) {
        if (item.checked) {
          return phones += "," + item.phone;
        }
      });
      content = '//js \n var str=';
      if (scope.formats[0].checked) {
        content += '$event.equipmentName';
      }
      if (scope.formats[1].checked) {
        content += '+"|"+$event.title';
      }
      if (scope.formats[4].checked) {
        content += '+"|"+$event.severityName';
      }
      if (scope.formats[2].checked) {
        content += '+"|"+($event.phase=="start"?"告警开始":($event.phase=="confirm"?"告警确认":"告警结束"))';
      }
      return content += "; return {phone:\'\"" + phones.substr(1) + "\"\', msg: str}";
    };

    NotificationSettingDirective.prototype.subscribeNotificationSetting = function(scope) {
      var topic;
      topic = "settings/notification-clients/notification-client";
      return this.commonService.subscribe(topic, function(err, data) {
        if (err || !(data != null ? data.message : void 0)) {
          return;
        }
        scope.config = data.message;
        scope.mail = _.find(scope.config.services["notification-client"].processors, function(item) {
          return item.type === "email";
        });
        return scope.sms = _.find(scope.config.services["notification-client"].processors, function(item) {
          return item.type === "sms";
        });
      });
    };

    NotificationSettingDirective.prototype.publishNotificationSetting = function(scope, config) {
      var a, b, c, topic;
      a = Number(config.version.split(".")[0]);
      b = Number(config.version.split(".")[1]);
      c = Number(config.version.split(".")[2]);
      c++;
      config.version = "" + a + "." + b + "." + c;
      topic = "settings/notification-clients/notification-client";
      return this.commonService.liveService.publish(topic, config);
    };

    NotificationSettingDirective.prototype.resize = function(scope) {};

    NotificationSettingDirective.prototype.dispose = function(scope) {};

    return NotificationSettingDirective;

  })(base.BaseDirective);
  return exports = {
    NotificationSettingDirective: NotificationSettingDirective
  };
});
