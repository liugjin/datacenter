// Generated by IcedCoffeeScript 108.0.11

/*
* File: percent-pie-directive
* User: bingo
* Date: 2019/06/04
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var PercentPieDirective, exports;
  PercentPieDirective = (function(_super) {
    __extends(PercentPieDirective, _super);

    function PercentPieDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "percent-pie";
      PercentPieDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    PercentPieDirective.prototype.setScope = function() {};

    PercentPieDirective.prototype.setCSS = function() {
      return css;
    };

    PercentPieDirective.prototype.setTemplate = function() {
      return view;
    };

    PercentPieDirective.prototype.show = function($scope, element, attrs) {
      var createOption, e, option, _ref;
      createOption = (function(_this) {
        return function(value) {
          var data, option, _ref;
          if (!value) {
            data = [
              {
                value: 100,
                itemStyle: {
                  normal: {
                    color: 'transparent'
                  }
                }
              }
            ];
          } else {
            data = [
              {
                value: (100 - value).toFixed(0),
                itemStyle: {
                  normal: {
                    color: 'transparent'
                  }
                }
              }, {
                value: value.toFixed(0),
                label: {
                  normal: {
                    show: true,
                    position: 'center',
                    color: 'white',
                    formatter: '{c}%',
                    textStyle: {
                      fontSize: '18',
                      fontWeight: 'bold'
                    }
                  },
                  emphasis: {
                    show: true,
                    position: 'center',
                    color: 'white',
                    formatter: '{c}%',
                    textStyle: {
                      fontSize: '18',
                      fontWeight: 'bold'
                    }
                  }
                },
                itemStyle: {
                  normal: {
                    color: (_ref = $scope.parameters.color) != null ? _ref : new echarts.graphic.LinearGradient(1, 0, 0, 1, [
                      {
                        offset: 0,
                        color: 'rgb(78,112,234)'
                      }, {
                        offset: 1,
                        color: 'rgb(32,193,244)'
                      }
                    ], false)
                  }
                }
              }
            ];
          }
          option = {
            series: [
              {
                type: 'pie',
                radius: ['80%', '85%'],
                hoverAnimation: false,
                label: {
                  normal: {
                    show: false
                  }
                },
                itemStyle: {
                  normal: {
                    color: 'rgba(158,158,158,0.3)'
                  }
                },
                data: [
                  {
                    value: 100
                  }
                ]
              }, {
                type: 'pie',
                radius: ['75%', '90%'],
                hoverAnimation: false,
                clockwise: false,
                label: {
                  normal: {
                    show: false
                  }
                },
                itemStyle: {
                  normal: {
                    color: 'rgba(158,158,158,0.3)'
                  }
                },
                data: data
              }
            ]
          };
          return option;
        };
      })(this);
      e = element.find('.ratio-pie');
      option = createOption();
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = echarts.init(e[0]);
      $scope.myChart.setOption(option);
      $scope.subscribePercent = null;
      $scope.$watch("equipment", (function(_this) {
        return function(equipment) {
          if (!equipment) {

          }
        };
      })(this));
      return $scope.$watch("signal", (function(_this) {
        return function(signal) {
          var _ref1;
          if (!signal) {
            return;
          }
          if ((_ref1 = $scope.subscribePercent) != null) {
            _ref1.dispose();
          }
          return $scope.subscribePercent = _this.commonService.subscribeSignalValue(signal, function(sig) {
            var _ref2;
            if (!sig || !sig.data.value) {
              return;
            }
            option = createOption(sig.data.value);
            return (_ref2 = $scope.myChart) != null ? _ref2.setOption(option) : void 0;
          });
        };
      })(this));
    };

    PercentPieDirective.prototype.resize = function($scope) {
      var _ref;
      return (_ref = $scope.myChart) != null ? _ref.resize() : void 0;
    };

    PercentPieDirective.prototype.dispose = function($scope) {
      var _ref, _ref1;
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = null;
      return (_ref1 = $scope.subscribePercent) != null ? _ref1.dispose() : void 0;
    };

    return PercentPieDirective;

  })(base.BaseDirective);
  return exports = {
    PercentPieDirective: PercentPieDirective
  };
});
