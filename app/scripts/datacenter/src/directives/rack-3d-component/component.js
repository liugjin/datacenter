// Generated by IcedCoffeeScript 108.0.12

/*
* File: rack-3d-component-directive
* User: David
* Date: 2019/02/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'lodash', "moment", "./room", "./thing", "threejs", "rx"], function(base, css, view, _, moment, Room, Thing, Three, Rx) {
  var Rack3dComponentDirective, exports;
  Rack3dComponentDirective = (function(_super) {
    __extends(Rack3dComponentDirective, _super);

    function Rack3dComponentDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "rack-3d-component";
      Rack3dComponentDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    Rack3dComponentDirective.prototype.setScope = function() {};

    Rack3dComponentDirective.prototype.setCSS = function() {
      return css;
    };

    Rack3dComponentDirective.prototype.setTemplate = function() {
      return view;
    };

    Rack3dComponentDirective.prototype.show = function(scope, element, attrs) {
      var RaycasterClickCallback, changeEquipment, changeStation, getServerByRow, loadChildren, preloadCallback, room, subscribeConfigurationChanges, updateRack3D, updateRack3DLazy, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (!scope.firstload) {
        return;
      }
      window.debugRack3d = scope;
      scope.sceneLoadedCompleted = true;
      room = new Room("rack-3d-room", element.find('.rack-3d-canvas')[0], {
        camera: {
          type: ((_ref = scope.parameters.camera) != null ? _ref.type : void 0) || "PerspectiveCamera",
          fov: ((_ref1 = scope.parameters.camera) != null ? _ref1.fov : void 0) || 50,
          x: ((_ref2 = scope.parameters.camera) != null ? _ref2.x : void 0) || 0,
          y: ((_ref3 = scope.parameters.camera) != null ? _ref3.y : void 0) || 0,
          z: ((_ref4 = scope.parameters.camera) != null ? _ref4.z : void 0) || 0,
          rotationX: ((_ref5 = scope.parameters.camera) != null ? _ref5.rotationX : void 0) || 0,
          rotationY: ((_ref6 = scope.parameters.camera) != null ? _ref6.rotationY : void 0) || 0,
          rotationZ: ((_ref7 = scope.parameters.camera) != null ? _ref7.rotationZ : void 0) || 0
        },
        renderder: {
          alpha: true,
          antialias: true
        },
        orbitControl: true
      });
      scope.room = room;
      loadChildren = (function(_this) {
        return function() {
          var name, _ref8;
          if ((_ref8 = scope.equipment) != null) {
            _ref8.children = [];
          }
          name = scope.equipment.model.equipment;
          return _.forEach(scope.equipments, function(equip) {
            var _ref9;
            if (equip.model.parent === name) {
              return (_ref9 = scope.equipment) != null ? _ref9.children.push(equip) : void 0;
            }
          });
        };
      })(this);
      getServerByRow = function(row) {
        var max, min, result, server, _i, _j, _len, _ref10, _ref8, _ref9, _results;
        result = null;
        if (!((_ref8 = scope.equipment) != null ? _ref8.children : void 0)) {
          return;
        }
        _ref10 = (_ref9 = scope.equipment) != null ? _ref9.children : void 0;
        for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
          server = _ref10[_i];
          min = server.row - server.height + 1;
          max = server.row;
          if (__indexOf.call((function() {
            _results = [];
            for (var _j = min; min <= max ? _j <= max : _j >= max; min <= max ? _j++ : _j--){ _results.push(_j); }
            return _results;
          }).apply(this), row) >= 0) {
            result = server;
          }
        }
        return result;
      };
      RaycasterClickCallback = (function(_this) {
        return function(err, intersects) {
          var thing;
          if (err) {
            return console.error(err);
          }
          thing = room.getThingByObject3D(intersects[0].object);
          return _this.commonService.publishEventBus("selectRow", thing.row);
        };
      })(this);
      room.setRaycasterCallback({
        click: RaycasterClickCallback
      });
      if ((_ref8 = scope.subscribeSelectRow) != null) {
        _ref8.dispose();
      }
      scope.subscribeSelectRow = this.commonService.subscribeEventBus("selectRow", (function(_this) {
        return function(data) {
          var server, thing;
          server = getServerByRow(data.message);
          _this.commonService.publishEventBus("rack-3d-select-server", {
            equipment: server
          });
          thing = room.getThingByName(server != null ? server.key : void 0);
          return room.selectThing(thing);
        };
      })(this));
      updateRack3D = (function(_this) {
        return function() {
          var i, rack, _ref10, _ref11, _ref9;
          if (!_.has(room.thingList, "rack") && ((_ref9 = scope.equipment) != null ? (_ref10 = _ref9.model) != null ? _ref10.equipment : void 0 : void 0)) {
            setTimeout(function() {
              return changeEquipment(scope.equipment.model.equipment);
            }, 1000);
            return;
          }
          rack = room.getThingByName('rack');
          if (!rack) {
            return;
          }
          if (rack != null) {
            rack.removeAllChildren();
          }
          i = 0;
          if (!scope.equipment.model.equipment) {
            return console.warn("空对象", scope.equipment);
          }
          console.log(scope.equipment);
          return _.forEach((_ref11 = scope.equipment) != null ? _ref11.children : void 0, function(equip) {
            return equip.loadProperties(null, function(err, properties) {
              var obj, scene, server, server3d, thing, _ref12, _ref13, _ref14;
              i += 1;
              scene = room.scene;
              server = equip;
              server.row = equip.getPropertyValue("row");
              server.height = equip.getPropertyValue("height");
              server.name = equip.key;
              server.type = equip.model.type;
              thing = null;
              if (!server || !server.row || !server.height || server.row < 1) {
                return console.log('设备参数异常（没有设备、row异常、height异常）：', server, server.row, server.height);
              }
              if (!((_ref12 = room.scene) != null ? (_ref13 = _ref12.children) != null ? _ref13.length : void 0 : void 0) > 0) {
                return console.log("scene 末加载完");
              }
              server3d = equip.getPropertyValue("3d-server");
              if (server.type !== '_server' && server.height) {
                obj = null;
                if (server3d) {
                  obj = scene.getObjectByName(server3d).clone();
                } else {
                  obj = scene.getObjectByName('server-' + server.height + 'u-real').clone();
                }
                thing = new Thing(server.name, obj, rack);
                thing.setPosition({
                  x: 1,
                  y: 4.75 * server.row - 0.5 - 4.35 * server.height,
                  z: 0
                });
                if (thing) {
                  thing.row = server.row;
                  thing.setScale(1);
                  rack.addChild(thing);
                  room.thingList[server.name] = thing;
                }
              } else if (server.type === '_server') {
                switch (server.height) {
                  case 1:
                    obj = scene.getObjectByName('server-1u-virtual').clone();
                    thing = new Thing(server.name, obj, rack);
                    thing.setPosition({
                      x: 1,
                      y: 4.75 * (server.row - 1),
                      z: 0
                    });
                    break;
                  case 2:
                    obj = scene.getObjectByName('server-2u-virtual').clone();
                    thing = new Thing(server.name, obj, rack);
                    thing.setPosition({
                      x: 1,
                      y: 4.65 * (server.row - 1),
                      z: 0
                    });
                    break;
                  default:
                    console.log(server.height, ' is not handle.');
                    break;
                }
                if (thing) {
                  thing.row = server.row;
                  thing.setScale(1);
                  rack.addChild(thing);
                  room.thingList[server.name] = thing;
                }
              } else {
                console.warn(server, 'is not server or _server.');
              }
              if (i >= ((_ref14 = scope.equipment) != null ? _ref14.children.length : void 0)) {
                return room.setRaycasterCheckList(rack != null ? rack.children : void 0, true, room.raycaster.callback);
              }
            });
          });
        };
      })(this);
      updateRack3DLazy = _.throttle(updateRack3D, 200, {
        leading: false
      });
      changeStation = (function(_this) {
        return function(stationId) {
          var station;
          if (!stationId) {
            return;
          }
          _this.getStation(scope, stationId);
          station = scope.station;
          return station.loadEquipments({
            station: station.model.station,
            project: station.model.project,
            user: station.model.user
          }, null, function(err, equipments) {
            if (err) {
              return console.error(err);
            }
            scope.equipments = equipments;
            scope.racks = {};
            scope.racks.items = _.filter(equipments != null ? equipments.items : void 0, function(equipment) {
              return equipment.model.type === 'rack';
            });
            return updateRack3DLazy();
          });
        };
      })(this);
      preloadCallback = (function(_this) {
        return function(preloadValue) {
          return scope.preloadValue = preloadValue;
        };
      })(this);
      changeEquipment = (function(_this) {
        return function(equipmentId) {
          return _this.getEquipment(scope, equipmentId, function(err) {
            var sceneFile, _ref10, _ref11, _ref9;
            if (err) {
              return console.error(err);
            }
            if (!((_ref9 = scope.equipment) != null ? (_ref10 = _ref9.model) != null ? _ref10.equipment : void 0 : void 0)) {
              return console.warn("空对象", equipmentId, scope.equipment);
            }
            sceneFile = null;
            switch ((_ref11 = scope.equipment) != null ? _ref11.model.type : void 0) {
              case "rack":
                sceneFile = _this.getComponentPath("./files/rack.json");
                break;
              default:
                sceneFile = _this.getComponentPath("./files/rack-model.json");
                break;
            }
            if (sceneFile !== scope.sceneFile) {
              scope.sceneFile = sceneFile;
              room.sceneLoaded = false;
              scope.sceneLoadedCompleted = false;
              return room.loadScene(sceneFile, function() {
                scope.sceneLoadedCompleted = true;
                room.sceneLoaded = true;
                loadChildren();
                updateRack3DLazy();
                return room.orbitControl.enabled = false;
              }, preloadCallback);
            } else {
              loadChildren();
              return updateRack3DLazy();
            }
          });
        };
      })(this);
      scope.$watch('parameters.equipmentId', (function(_this) {
        return function(equipmentId) {
          if (!equipmentId) {
            return;
          }
          return changeEquipment(equipmentId);
        };
      })(this));
      if ((_ref9 = scope.subscribeSelectEquipment) != null) {
        _ref9.dispose();
      }
      scope.subscribeSelectEquipment = this.commonService.subscribeEventBus("room-3d-select-equipment", (function(_this) {
        return function(msg) {
          var equipment;
          if (!msg.message.equipment) {
            return;
          }
          equipment = msg.message.equipment;
          return changeEquipment(equipment.model.equipment);
        };
      })(this));
      subscribeConfigurationChanges = (function(_this) {
        return function() {
          var model, station, subject, topic, _ref10;
          model = scope.station.model;
          station = scope.station;
          subject = new Rx.Subject;
          topic = "configuration/equipment/+/" + model.user + "/" + model.project + "/" + model.station + "/+";
          if ((_ref10 = scope.configurationHandle) != null) {
            _ref10.dispose();
          }
          scope.configurationHandle = _this.commonService.signalLiveSession.subscribe(topic, function(err, d) {
            if (err) {
              return;
            }
            return subject.onNext();
          });
          return subject.debounce(500).subscribe(function() {
            var filter;
            filter = {
              station: station.model.station,
              project: station.model.project,
              user: station.model.user
            };
            return station.loadEquipments(filter, null, function(err, equipments) {
              if (err) {
                return;
              }
              scope.equipments = equipments;
              scope.racks = {};
              scope.racks.items = _.filter(equipments != null ? equipments.items : void 0, function(equipment) {
                return equipment.model.type === 'rack';
              });
              loadChildren();
              return updateRack3DLazy();
            }, true);
          });
        };
      })(this);
      subscribeConfigurationChanges();
      return changeStation(scope.station.model.station);
    };

    Rack3dComponentDirective.prototype.resize = function(scope) {};

    Rack3dComponentDirective.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2;
      scope.room.dispose();
      scope.sceneFile = null;
      if ((_ref = scope.subscribeSelectRow) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.subscribeSelectEquipment) != null) {
        _ref1.dispose();
      }
      return (_ref2 = scope.configurationHandle) != null ? _ref2.dispose() : void 0;
    };

    return Rack3dComponentDirective;

  })(base.BaseDirective);
  return exports = {
    Rack3dComponentDirective: Rack3dComponentDirective
  };
});
