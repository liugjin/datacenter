// Generated by IcedCoffeeScript 108.0.11

/*
* File: real-time-pue-directive
* User: David
* Date: 2019/03/05
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var RealTimePueDirective, exports;
  RealTimePueDirective = (function(_super) {
    __extends(RealTimePueDirective, _super);

    function RealTimePueDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createLineCharts = __bind(this.createLineCharts, this);
      this.getPueSignal = __bind(this.getPueSignal, this);
      this.show = __bind(this.show, this);
      this.id = "real-time-pue";
      RealTimePueDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    RealTimePueDirective.prototype.setScope = function() {};

    RealTimePueDirective.prototype.setCSS = function() {
      return css;
    };

    RealTimePueDirective.prototype.setTemplate = function() {
      return view;
    };

    RealTimePueDirective.prototype.show = function(scope, element, attrs) {
      scope.xData = [];
      return this.getPueSignal(scope, (function(_this) {
        return function() {
          var _ref;
          _this.commonService.querySignalHistoryData(scope.signal, moment().startOf("day"), moment().endOf("day"), function(err, records, pageInfo) {
            var record, _i, _len, _ref;
            for (_i = 0, _len = records.length; _i < _len; _i++) {
              record = records[_i];
              scope.xData.push({
                value: [record.timestamp, (_ref = record.value) != null ? _ref.toFixed(2) : void 0]
              });
            }
            return _this.createLineCharts(scope, element);
          });
          if ((_ref = scope.equipSubscriptionrealpue) != null) {
            _ref.dispose();
          }
          return scope.equipSubscriptionrealpue = _this.commonService.subscribeSignalValue(scope.signal, function(sig) {
            var _ref1;
            if (sig.data.timestamp) {
              scope.option.series[0].data.push({
                value: [sig.data.timestamp, sig.data.value.toFixed(2)]
              });
            }
            return (_ref1 = scope.echart) != null ? _ref1.setOption(scope.option) : void 0;
          });
        };
      })(this));
    };

    RealTimePueDirective.prototype.getPueSignal = function(scope, callback) {
      return this.commonService.loadEquipmentById(scope.station, "_station_efficient", (function(_this) {
        return function(err, equip) {
          return equip != null ? equip.loadSignals(null, function(err, sigs) {
            scope.signal = _.find(sigs, function(sig) {
              return sig.model.signal === "pue-value";
            });
            return typeof callback === "function" ? callback() : void 0;
          }) : void 0;
        };
      })(this));
    };

    RealTimePueDirective.prototype.createLineCharts = function(scope, element) {
      var line, _ref, _ref1;
      line = element.find(".signal-line");
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      scope.option = {
        xAxis: {
          type: 'time',
          axisLine: {
            lineStyle: {
              color: "#A2CAF8"
            }
          },
          splitLine: {
            lineStyle: {
              color: "rgba(0,77,160,1)"
            }
          }
        },
        yAxis: {
          type: 'value',
          axisLine: {
            lineStyle: {
              color: "#A2CAF8"
            }
          },
          splitLine: {
            lineStyle: {
              color: "rgba(0,77,160,1)"
            }
          }
        },
        tooltip: {
          trigger: "axis"
        },
        series: [
          {
            data: scope.xData,
            type: 'line',
            smooth: true,
            lineStyle: {
              normal: {
                color: "rgba(67,202,255,1)"
              }
            },
            areaStyle: {
              normal: {
                color: {
                  type: 'linear',
                  x: 1,
                  y: 1,
                  x2: 1,
                  y2: 1,
                  colorStops: [
                    {
                      offset: 0,
                      color: 'rgba(67,202,255,1)'
                    }, {
                      offset: .5,
                      color: 'rgba(67,202,255,.8)'
                    }, {
                      offset: 1,
                      color: 'rgba(67,202,255,.3)'
                    }
                  ]
                }
              }
            }
          }
        ]
      };
      scope.echart = echarts.init(line[0]);
      return (_ref1 = scope.echart) != null ? _ref1.setOption(scope.option) : void 0;
    };

    RealTimePueDirective.prototype.resize = function(scope) {};

    RealTimePueDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.equipSubscriptionrealpue) != null ? _ref.dispose() : void 0;
    };

    return RealTimePueDirective;

  })(base.BaseDirective);
  return exports = {
    RealTimePueDirective: RealTimePueDirective
  };
});
