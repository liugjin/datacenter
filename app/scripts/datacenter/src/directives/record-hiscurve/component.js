// Generated by IcedCoffeeScript 108.0.13

/*
* File: record-hiscurve-directive
* User: David
* Date: 2020/01/03
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var RecordHiscurveDirective, exports;
  RecordHiscurveDirective = (function(_super) {
    __extends(RecordHiscurveDirective, _super);

    function RecordHiscurveDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "record-hiscurve";
      RecordHiscurveDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    RecordHiscurveDirective.prototype.setScope = function() {};

    RecordHiscurveDirective.prototype.setCSS = function() {
      return css;
    };

    RecordHiscurveDirective.prototype.setTemplate = function() {
      return view;
    };

    RecordHiscurveDirective.prototype.show = function(scope, element, attrs) {
      var filter1, filter2, _ref, _ref1, _ref2, _ref3;
      scope.paraName = scope.parameters.name;
      scope.filterType = (_ref = scope.parameters.filterType) != null ? _ref : false;
      scope.categories = {};
      scope.alarms = {};
      scope.equipTypeLists = [];
      scope.signalList = [];
      scope.currentType = null;
      scope.groups = [];
      scope.group = "all";
      scope.selectEquipType = (function(_this) {
        return function(type) {
          if (!type) {
            return;
          }
          scope.currentType = type;
          _this.selectType(scope, type, null, false);
          return scope.group = "all";
        };
      })(this);
      scope.project.loadEquipmentTemplates(null, null, (function(_this) {
        return function(err, templates) {
          var n, station, _i, _len, _ref1, _results;
          scope.templates = templates;
          n = 0;
          _ref1 = scope.project.stations.nitems;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            station = _ref1[_i];
            _results.push(_this.loadStationEquipStatistics(scope, station, function() {
              n++;
              if (n === scope.project.stations.nitems.length) {
                _.each(scope.project.stations.nitems, function(sta) {
                  return _this.computeStationStatistic(scope, sta);
                });
                return _this.selectStation(scope, scope.station);
              }
            }));
          }
          return _results;
        };
      })(this));
      if ((_ref1 = scope.statusSubscription) != null) {
        _ref1.dispose();
      }
      filter1 = scope.project.getIds();
      filter1.station = "+";
      filter1.equipment = "+";
      filter1.signal = "communication-status";
      scope.statusSubscription = this.commonService.signalLiveSession.subscribeValues(filter1, (function(_this) {
        return function(err, d) {
          return scope.status[d.message.station + "." + d.message.equipment] = d.message.value;
        };
      })(this));
      if ((_ref2 = scope.alarmsSubscription) != null) {
        _ref2.dispose();
      }
      filter2 = scope.project.getIds();
      filter2.station = "+";
      filter2.equipment = "+";
      filter2.signal = "alarms";
      scope.alarmsSubscription = this.commonService.signalLiveSession.subscribeValues(filter2, (function(_this) {
        return function(err, d) {
          return scope.alarms[d.message.station + "." + d.message.equipment] = d.message.value;
        };
      })(this));
      if ((_ref3 = scope.stationSubscription) != null) {
        _ref3.dispose();
      }
      return scope.stationSubscription = this.commonService.subscribeEventBus("selectStation", (function(_this) {
        return function(msg) {
          var station;
          scope.equipments = [];
          station = _.find(scope.project.stations.items, function(sta) {
            return sta.model.station === msg.message.id;
          });
          return _this.selectStation(scope, station);
        };
      })(this));
    };

    RecordHiscurveDirective.prototype.selectStation = function(scope, station) {
      var type;
      scope.station = station;
      scope.equipTypeLists = _.map(scope.categories[station.model.station], function(value, key) {
        var item;
        item = _.find(scope.project.dictionary.equipmenttypes.items, function(it) {
          return it.model.type === key;
        });
        if (item) {
          value.image = item.model.image;
          value.index = item.model.index;
        }
        return value;
      });
      scope.equipTypeLists = _.sortBy(scope.equipTypeLists, function(item) {
        return 0 - item.index;
      });
      if (this.$routeParams.type) {
        type = _.find(scope.equipTypeLists, (function(_this) {
          return function(item) {
            return item.type === _this.$routeParams.type;
          };
        })(this));
      }
      type = type != null ? type : scope.equipTypeLists[0];
      if (scope.equipment) {
        type = _.find(scope.equipTypeLists, (function(_this) {
          return function(item) {
            return item.type === scope.equipment.model.type;
          };
        })(this));
      }
      scope.selectEquipType(type);
      if (scope.equipment) {
        this.$timeout((function(_this) {
          return function() {
            return scope.showEquipment(scope.equipment);
          };
        })(this), 10);
      }
      return scope.$applyAsync();
    };

    RecordHiscurveDirective.prototype.loadStationEquipStatistics = function(scope, station, callback) {
      return station.loadStatisticByEquipmentTypes((function(_this) {
        return function(err, statistic) {
          var value;
          station.categories = [];
          value = JSON.parse(JSON.stringify(statistic.statistic));
          return _this.filterStationStatistic(station, value, function() {
            var key, type, val;
            if (scope.filterType) {
              for (key in value) {
                val = value[key];
                type = _.find(scope.project.dictionary.equipmenttypes.items, function(item) {
                  return item.model.type === key;
                });
                if ((type != null ? type.model.visible : void 0) === false) {
                  delete value[key];
                }
              }
            }
            station.categories = value;
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this), true);
    };

    RecordHiscurveDirective.prototype.filterStationStatistic = function(station, statistic, callback) {
      return station.loadEquipments({
        type: "access",
        template: {
          $nin: ['card-sender', 'card_template', 'people_template']
        }
      }, null, (function(_this) {
        return function(err, equips) {
          var _ref;
          if ((_ref = statistic["access"]) != null) {
            _ref.count = equips.length;
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    RecordHiscurveDirective.prototype.computeStationStatistic = function(scope, station) {
      var item, sta, stations, _i, _len;
      item = JSON.parse(JSON.stringify(station.categories));
      scope.categories[station.model.station] = item;
      stations = this.commonService.loadStationChildren(station, false);
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        sta = stations[_i];
        _.mapObject(sta.categories, function(val, key) {
          return item[key].count += val.count;
        });
      }
      return _.mapObject(item, function(val, key) {
        if (val.count === 0 || key.substr(0, 1) === "_") {
          return delete item[key];
        }
      });
    };

    RecordHiscurveDirective.prototype.selectType = function(scope, type, callback, refresh) {
      var station, stations, _i, _len, _results;
      scope.equipments = [];
      scope.groups = [];
      stations = this.commonService.loadStationChildren(scope.station, true);
      _results = [];
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        station = stations[_i];
        _results.push(this.commonService.loadEquipmentsByType(station, type.type, (function(_this) {
          return function(err, equips) {
            var equip, _j, _len1, _ref, _ref1, _ref2, _ref3;
            for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
              equip = equips[_j];
              equip.model.typeName = (_ref = _.find(scope.project.dictionary.equipmenttypes.items, function(tp) {
                return tp.key === equip.model.type;
              })) != null ? _ref.model.name : void 0;
              equip.model.templateName = (_ref1 = _.find(scope.templates, function(template) {
                return template.model.type === equip.model.type && template.model.template === equip.model.template;
              })) != null ? _ref1.model.name : void 0;
              equip.model.vendorName = (_ref2 = _.find(scope.project.dictionary.vendors.items, function(vendor) {
                return vendor.key === equip.model.vendor;
              })) != null ? _ref2.model.name : void 0;
              equip.model.stationName = (_ref3 = _.find(scope.project.stations.items, function(station) {
                return station.model.station === equip.model.station;
              })) != null ? _ref3.model.name : void 0;
              if (equip.model.group && scope.groups.indexOf(equip.model.group) === -1) {
                scope.groups.push(equip.model.group);
              }
            }
            return scope.equipments = scope.equipments.concat(equips);
          };
        })(this), true));
      }
      return _results;
    };

    RecordHiscurveDirective.prototype.resize = function(scope) {};

    RecordHiscurveDirective.prototype.dispose = function(scope) {
      var _ref, _ref1, _ref2;
      if ((_ref = scope.statusSubscription) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.alarmsSubscription) != null) {
        _ref1.dispose();
      }
      return (_ref2 = scope.stationSubscription) != null ? _ref2.dispose() : void 0;
    };

    return RecordHiscurveDirective;

  })(base.BaseDirective);
  return exports = {
    RecordHiscurveDirective: RecordHiscurveDirective
  };
});
