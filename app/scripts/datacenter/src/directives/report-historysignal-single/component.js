// Generated by IcedCoffeeScript 108.0.11

/*
* File: report-historysignal-single-directive
* User: David
* Date: 2020/02/21
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportHistorysignalSingleDirective, exports;
  ReportHistorysignalSingleDirective = (function(_super) {
    __extends(ReportHistorysignalSingleDirective, _super);

    function ReportHistorysignalSingleDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "report-historysignal-single";
      ReportHistorysignalSingleDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ReportHistorysignalSingleDirective.prototype.setScope = function() {};

    ReportHistorysignalSingleDirective.prototype.setCSS = function() {
      return css;
    };

    ReportHistorysignalSingleDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportHistorysignalSingleDirective.prototype.show = function(scope, element, attrs) {
      var checkFilter, getEquipmentName, initHeaders, loadEquipmentAndSignals, processTableData, _ref, _ref1;
      scope.multiflag = null;
      scope.view = false;
      scope.viewName = "报表";
      scope.reportName = "";
      scope.selectSignals = [];
      scope.excelDatas = [];
      scope.signalShow = false;
      scope.selectedPage = 1;
      scope.pagination = null;
      scope.query = {
        startTime: '',
        endTime: ''
      };
      initHeaders = function() {
        return scope.headers = [
          {
            headerName: "序号",
            field: "index"
          }, {
            headerName: "设备名称",
            field: "equipmentName"
          }, {
            headerName: "采集时间",
            field: "sampleTime"
          }
        ];
      };
      initHeaders();
      scope.showSignal = (function(_this) {
        return function() {
          return scope.signalShow = true;
        };
      })(this);
      scope.garddatas = [
        {
          index: "暂无数据",
          stationName: "暂无数据",
          equipmentName: "暂无数据",
          signalName: "",
          unitName: "",
          value: "",
          sampleTime: ""
        }
      ];
      scope.barlinevalue = [];
      scope.initSignalStatus = (function(_this) {
        return function() {
          _.each(scope.signals, function(signal, num) {
            if (num === 0) {
              return signal.checked = true;
            } else {
              return signal != null ? signal.checked = false : void 0;
            }
          });
          return scope.$applyAsync();
        };
      })(this);
      scope.queryPage = function(page) {
        if (page < 1 || page > scope.pagination.pageCount) {
          return;
        }
        scope.selectedPage = page;
        return scope.queryReport(scope.selectedPage);
      };
      scope.switchView = (function(_this) {
        return function(boolean) {
          return scope.view = boolean;
        };
      })(this);
      scope.selectSignal = (function(_this) {
        return function(sig) {
          var deleteUnselectSignal;
          deleteUnselectSignal = function() {
            return scope.selectSignals = _.filter(scope.selectSignals, function(selectSignal) {
              return selectSignal.model.signal !== sig.model.signal;
            });
          };
          if (sig.checked === true) {
            scope.selectSignals.push(sig);
            if (scope.selectSignals.length > 3) {
              deleteUnselectSignal();
              sig.checked = false;
              _this.display("选择的信号不能超过3个！");
              return;
            }
          } else {
            deleteUnselectSignal();
          }
          return scope.queryReport();
        };
      })(this);
      if ((_ref = scope.timeSubscription) != null) {
        _ref.dispose();
      }
      scope.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      if ((_ref1 = scope.selectEquipSubscription) != null) {
        _ref1.dispose();
      }
      scope.selectEquipSubscription = this.commonService.subscribeEventBus('selectEquip', (function(_this) {
        return function(msg) {
          scope.initSignalStatus();
          scope.multiflag = false;
          scope.selectedEquips = [msg.message];
          scope.selectedEquips = _.filter(scope.selectedEquips, function(item) {
            return item.level === 'equipment';
          });
          if (scope.parameters.type === "signal") {
            scope.reportName = "历史信号记录表";
          }
          return loadEquipmentAndSignals(scope.selectedEquips, function(data) {
            scope.signals[0].checked = true;
            scope.selectSignals = [scope.signals[0]];
            if (scope.selectSignals.length) {
              return scope.queryReport();
            }
          });
        };
      })(this));
      scope.$watch('barlinevalue', (function(_this) {
        return function(value) {
          return _this.commonService.publishEventBus('barlinevalue', value);
        };
      })(this));
      loadEquipmentAndSignals = (function(_this) {
        return function(equipments, callback) {
          var equip, equipmentId, station, stationId, _i, _len, _results;
          scope.equipments = [];
          scope.signals = [];
          _results = [];
          for (_i = 0, _len = equipments.length; _i < _len; _i++) {
            equip = equipments[_i];
            if (equip.level === 'equipment') {
              stationId = equip.station;
              equipmentId = equip.id;
              _results.push((function() {
                var _j, _len1, _ref2, _results1;
                _ref2 = scope.project.stations.items;
                _results1 = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  station = _ref2[_j];
                  if ((station != null ? station.model.station : void 0) === stationId) {
                    _results1.push(this.commonService.loadEquipmentById(station, equipmentId, (function(_this) {
                      return function(err, equipment) {
                        if (err) {
                          return console.log("err:", err);
                        }
                        scope.equipments.push(equipment);
                        return equipment.loadSignals(null, function(err, model) {
                          var finalData;
                          if (err) {
                            return console.log("err:", err);
                          }
                          finalData = _.uniq(model);
                          scope.signals = _.filter(finalData, function(sig) {
                            return sig.model.visible === true;
                          });
                          return typeof callback === "function" ? callback(true) : void 0;
                        });
                      };
                    })(this)));
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              }).call(_this));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this);
      checkFilter = function() {
        if (!scope.selectedEquips || (!scope.selectedEquips.length)) {
          M.toast({
            html: '请选择设备'
          });
          return true;
        }
        if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
          M.toast({
            html: '开始时间大于结束时间！'
          });
          return true;
        }
        return false;
      };
      processTableData = (function(_this) {
        return function(allRecords) {
          var equipmentName, excelDatas, lineChartsDatas, sampleTimeArr, selectSignalsName, tableDatas;
          tableDatas = [];
          excelDatas = [];
          sampleTimeArr = [];
          lineChartsDatas = [];
          selectSignalsName = [];
          initHeaders();
          _.each(scope.selectSignals, function(signal) {
            var field, name;
            name = signal.model.name;
            field = signal.model.signal;
            return scope.headers.push({
              headerName: name,
              field: field
            });
          });
          _.each(allRecords, function(record) {
            sampleTimeArr.push(record.timestamp);
            return record.sampleTime = moment(record.timestamp).format("YYYY-MM-DD HH:mm:ss");
          });
          sampleTimeArr = _.sortBy(sampleTimeArr);
          sampleTimeArr = _.map(sampleTimeArr, function(time) {
            return moment(time).format("YYYY-MM-DD HH:mm:ss");
          });
          sampleTimeArr = _.uniq(sampleTimeArr);
          equipmentName = getEquipmentName(scope.selectSignals[0].station.model.station + "." + scope.selectSignals[0].equipment.model.equipment);
          _.each(sampleTimeArr, function(sampleTime, count) {
            tableDatas.push({
              index: count,
              sampleTime: sampleTime,
              equipmentName: equipmentName
            });
            return excelDatas.push({
              "序号": count,
              "设备名称": equipmentName,
              "采集时间": sampleTime
            });
          });
          _.each(tableDatas, function(tableData) {
            return _.each(allRecords, function(record, count) {
              if (record.sampleTime === tableData.sampleTime) {
                if (record.signal === "_alarms" || record.signal === "_severity") {
                  return tableData[record.signal] = record.value;
                } else {
                  if (record.dataType === 'enum') {
                    return tableData[record.signal] = record.value + (record.unitName || "");
                  } else {
                    return tableData[record.signal] = record.value.toFixed(2) + (record.unitName || "");
                  }
                }
              }
            });
          });
          scope.garddatas = tableDatas;
          _.each(excelDatas, function(data) {
            return _.each(allRecords, function(record) {
              var nowSignale, signalName;
              if (record.sampleTime === data["采集时间"]) {
                nowSignale = _.find(scope.selectSignals, function(signal) {
                  var _ref2;
                  return record.signal === (signal != null ? (_ref2 = signal.model) != null ? _ref2.signal : void 0 : void 0);
                });
                if (nowSignale) {
                  signalName = nowSignale.model.name;
                  if (record.signal === "_alarms" || record.signal === "_severity") {
                    data[signalName] = record.value;
                    return data[signalName + "(图表)"] = record.value;
                  } else {
                    data[signalName] = record.value.toFixed(2) + (record.unitName || "");
                    return data[signalName + "(图表)"] = record.value.toFixed(2);
                  }
                }
              }
            });
          });
          scope.excelDatas = excelDatas;
          _.each(scope.selectSignals, function(signal) {
            return selectSignalsName.push(signal.model.name);
          });
          _.each(selectSignalsName, function(selectSignalName) {
            return _.each(sampleTimeArr, function(sampleTime) {
              return lineChartsDatas.push({
                name: selectSignalName,
                key: sampleTime,
                value: "",
                type: "line",
                unitName: ""
              });
            });
          });
          _.each(lineChartsDatas, function(lineChartsData) {
            return _.each(excelDatas, function(data) {
              var dataName, dataTime;
              dataName = lineChartsData.name;
              dataTime = data["采集时间"];
              if (lineChartsData.key === dataTime && lineChartsData.name === dataName) {
                return lineChartsData.value = data[dataName + "(图表)"];
              }
            });
          });
          return scope.barlinevalue = lineChartsDatas;
        };
      })(this);
      scope.queryReport = (function(_this) {
        return function(page, pageItems) {
          var data, filter, paging, selectSignalsLength;
          if (page == null) {
            page = 1;
          }
          if (pageItems == null) {
            pageItems = scope.parameters.pageItems;
          }
          if (checkFilter()) {
            return;
          }
          selectSignalsLength = scope.selectSignals.length;
          if (selectSignalsLength === 0) {
            scope.garddatas = [];
            scope.excelDatas = [];
            scope.$applyAsync();
            return;
          }
          filter = scope.project.getIds();
          filter.station = scope.selectedEquips[0].station;
          filter.equipment = scope.selectedEquips[0].id;
          filter.startTime = scope.query.startTime;
          filter.endTime = scope.query.endTime;
          filter.signal = {
            $in: _.map(scope.selectSignals, function(s) {
              return s.model.signal;
            })
          };
          if (pageItems) {
            paging = {
              page: page,
              pageItems: pageItems
            };
          }
          data = {
            filter: filter,
            sorting: {
              station: 1,
              equipment: 1,
              timestamp: 1
            },
            paging: paging
          };
          return _this.commonService.reportingService.querySignalRecords(data, function(err, records, paging2) {
            var _i, _ref2, _results;
            if (err) {
              return console.log('err:', err);
            }
            scope.pagination = paging2;
            scope.pagination.pages = (function() {
              _results = [];
              for (var _i = 1, _ref2 = paging2.pageCount; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; 1 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this);
            return processTableData(records);
          });
        };
      })(this);
      getEquipmentName = function(equipmentId) {
        var item, tempEquipment, _i, _len, _ref2;
        tempEquipment = equipmentId.split('.');
        _ref2 = scope.equipments;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          item = _ref2[_i];
          if (item.model.equipment === tempEquipment[1] && item.model.station === tempEquipment[0]) {
            return item.model.name;
          }
        }
        return equipmentId;
      };
      return scope.exportReport = (function(_this) {
        return function(headers, garddatas, name) {
          var reportName, wb, ws;
          if (scope.excelDatas.length === 0) {
            return _this.display("暂无数据，无法导出！");
          }
          wb = _this.$window.XLSX.utils.book_new();
          ws = _this.$window.XLSX.utils.json_to_sheet(scope.excelDatas);
          _this.$window.XLSX.utils.book_append_sheet(wb, ws, "Presidents");
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".xlsx";
          return _this.$window.XLSX.writeFile(wb, reportName);
        };
      })(this);
    };

    ReportHistorysignalSingleDirective.prototype.resize = function(scope) {};

    ReportHistorysignalSingleDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      scope.initSignalStatus();
      if ((_ref = scope.timeSubscription) != null) {
        _ref.dispose();
      }
      return (_ref1 = scope.selectEquipSubscription) != null ? _ref1.dispose() : void 0;
    };

    return ReportHistorysignalSingleDirective;

  })(base.BaseDirective);
  return exports = {
    ReportHistorysignalSingleDirective: ReportHistorysignalSingleDirective
  };
});
