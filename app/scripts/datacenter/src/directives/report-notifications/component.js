// Generated by IcedCoffeeScript 108.0.11

/*
* File: report-notifications-directive
* User: David
* Date: 2019/11/15
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportNotificationsDirective, exports;
  ReportNotificationsDirective = (function(_super) {
    __extends(ReportNotificationsDirective, _super);

    function ReportNotificationsDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "report-notifications";
      ReportNotificationsDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.logonUser = commonService.$rootScope.user;
    }

    ReportNotificationsDirective.prototype.setScope = function() {};

    ReportNotificationsDirective.prototype.setCSS = function() {
      return css;
    };

    ReportNotificationsDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportNotificationsDirective.prototype.show = function(scope, element, attrs) {
      var url, _ref, _ref1, _ref2, _ref3, _ref4;
      scope.token = ((_ref = scope.controller) != null ? (_ref1 = _ref.$rootScope) != null ? (_ref2 = _ref1.user) != null ? _ref2.token : void 0 : void 0 : void 0) || setting.adminToken || '0b6703d0-d873-11e9-ab4f-c5a3318c0787';
      if (scope.parameters.pageItems) {
        if (scope.parameters.pageItems > 12) {
          scope.pageItems = 12;
        } else {
          scope.pageItems = scope.parameters.pageItems;
        }
      } else {
        scope.parameters.pageItems = 12;
      }
      scope.types = [
        {
          name: '邮件',
          type: 'email'
        }, {
          name: '微信',
          type: 'wechat'
        }, {
          name: '短信',
          type: 'sms'
        }, {
          name: '云短信',
          type: 'cloudsms'
        }, {
          name: '电话',
          type: 'phone'
        }, {
          name: '语音',
          type: 'tts'
        }
      ];
      scope.msgStatus = [
        {
          id: "completed",
          name: "已完成",
          checked: true
        }, {
          id: "error",
          name: "错误",
          checked: true
        }, {
          id: "timeout",
          name: "超时",
          checked: true
        }
      ];
      scope.allTypes = [];
      scope.selectedTypes = [];
      scope.selectedPhases = ["completed", "error", "timeout"];
      scope.allUsers = [];
      scope.selectedUsers = [];
      scope.header = [
        {
          headerName: "通知类型",
          field: 'typeName',
          width: 90
        }, {
          headerName: "通知人",
          field: 'receivers'
        }, {
          headerName: "通知人名",
          field: 'receiverNames'
        }, {
          headerName: "开始时间",
          field: 'startTime'
        }, {
          headerName: "结束时间",
          field: 'endTime'
        }, {
          headerName: "通知状态",
          field: 'phase'
        }
      ];
      scope.garddatas = [
        {
          typeName: "暂无数据",
          receivers: "暂无数据",
          operation: "暂无数据",
          address: "暂无数据",
          timestamp: "暂无数据"
        }
      ];
      scope.query = {
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().format("YYYY-MM-DD")
      };
      scope.checkAdmin = (function(_this) {
        return function() {
          if (_this.logonUser.user !== 'admin') {
            _this.display("请使用超级管理员访问");
          }
        };
      })(this);
      (scope.queryUsers = (function(_this) {
        return function() {
          var url;
          url = 'http://' + _this.$window.location.host + "/model/clc/api/v1/users";
          return $.get(url, {
            token: scope.token
          }, function(data) {
            var item, signalData, _i, _len, _ref3, _results;
            scope.users = data;
            _ref3 = scope.users;
            _results = [];
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              item = _ref3[_i];
              signalData = {
                id: item.user,
                name: item.name,
                checked: true
              };
              scope.allUsers.push(signalData);
              _results.push(scope.selectedUsers.push(item.user));
            }
            return _results;
          });
        };
      })(this))();
      scope.getUserName = (function(_this) {
        return function(type, info) {
          var item, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref3, _ref4, _ref5, _ref6;
          switch (type) {
            case 'phone':
              _ref3 = scope.users;
              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                item = _ref3[_i];
                if (item.phone === info) {
                  return item.name;
                }
              }
              break;
            case 'wechat':
              _ref4 = scope.users;
              for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
                item = _ref4[_j];
                if (item.openid === info) {
                  return item.name;
                }
              }
              break;
            case 'email':
              _ref5 = scope.users;
              for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
                item = _ref5[_k];
                if (item.email === info) {
                  return item.name;
                }
              }
              break;
            case 'userid':
              _ref6 = scope.users;
              for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {
                item = _ref6[_l];
                if (item.user === info) {
                  return item.name;
                }
              }
          }
          return info;
        };
      })(this);
      scope.getTypeName = function(type) {
        var item, _i, _len, _ref3;
        _ref3 = scope.types;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          item = _ref3[_i];
          if (item.type === type) {
            return item.name;
          }
        }
        return type;
      };
      scope.getPhaseName = function(phase) {
        var item, _i, _len, _ref3;
        _ref3 = scope.msgStatus;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          item = _ref3[_i];
          if (item.id === phase) {
            return item.name;
          }
        }
        return phase;
      };
      scope.getReceiverNames = (function(_this) {
        return function(type, receivers) {
          var item, receiverNames, _i, _j, _k, _l, _len, _len1, _len2, _len3;
          if (receivers === void 0 || receivers.length <= 0) {
            return [];
          }
          receiverNames = [];
          if (type === 'sms' || type === 'cloudsms' || type === 'phone') {
            for (_i = 0, _len = receivers.length; _i < _len; _i++) {
              item = receivers[_i];
              if ((scope.getUserName('phone', item)).length > 0) {
                receiverNames.push(scope.getUserName('phone', item));
              }
            }
            return receiverNames;
          } else if (type === 'command') {
            for (_j = 0, _len1 = receivers.length; _j < _len1; _j++) {
              item = receivers[_j];
              if ((scope.getUserName('userid', item)).length > 0) {
                receiverNames.push(scope.getUserName('userid', item));
              }
            }
            return receiverNames;
          } else if (type === 'wechat') {
            for (_k = 0, _len2 = receivers.length; _k < _len2; _k++) {
              item = receivers[_k];
              if ((scope.getUserName('phone', item)).length > 0) {
                receiverNames.push(scope.getUserName('wechat', item));
              }
            }
            return receiverNames;
          } else if (type === 'email') {
            for (_l = 0, _len3 = receivers.length; _l < _len3; _l++) {
              item = receivers[_l];
              if ((scope.getUserName('phone', item)).length > 0) {
                receiverNames.push(scope.getUserName('email', item));
              }
            }
            return receiverNames;
          } else {
            return receiverNames;
          }
        };
      })(this);
      url = 'http://' + this.$window.location.host + ("/model/clc/api/v1/notificationrules/" + this.$routeParams.user + "/" + this.$routeParams.project) + "?token=" + this.commonService.$rootScope.user.token;
      this.commonService.modelEngine.modelManager.$http.get(url).then((function(_this) {
        return function(data) {
          var iname, item, signalData, _i, _len, _ref3, _ref4, _results;
          _ref3 = data.data;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            item = _ref3[_i];
            iname = scope.getTypeName(item.type);
            if (iname === 'command') {
              iname = '内置短信';
            }
            signalData = {
              id: item.type,
              name: iname,
              checked: true
            };
            if (_ref4 = item.type, __indexOf.call(scope.selectedTypes, _ref4) < 0) {
              scope.selectedTypes.push(item.type);
              _results.push(scope.allTypes.push(signalData));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      if ((_ref3 = this.timeSubscribe) != null) {
        _ref3.dispose();
      }
      this.timeSubscribe = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      if ((_ref4 = scope.dropSubscribe) != null) {
        _ref4.dispose();
      }
      scope.dropSubscribe = this.subscribeEventBus("drop-down-select", (function(_this) {
        return function(d) {
          var msg;
          msg = d.message;
          if (msg.origin === "type") {
            return scope.selectedTypes = msg.selected;
          } else if (msg.origin === "user") {
            return scope.selectedUsers = msg.selected;
          } else if (msg.origin === "phase") {
            return scope.selectedPhases = msg.selected;
          }
        };
      })(this));
      scope.checkFilter = function() {
        if (scope.selectedTypes.length === 0) {
          M.toast({
            html: '通知类型不能为空！'
          });
          return true;
        }
        if (scope.selectedPhases.length === 0) {
          M.toast({
            html: '通知状态不能为空！'
          });
          return true;
        }
        if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
          M.toast({
            html: '开始时间大于结束时间！'
          });
          return true;
        }
        return false;
      };
      scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + "(" + moment(scope.query.startTime).format("YYYY-MM-DD") + "-" + moment(scope.query.endTime).format("YYYY-MM-DD") + ").csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
      scope.getReportData = (function(_this) {
        return function(page, pageItems) {
          var data, filter, paging;
          if (page == null) {
            page = 1;
          }
          if (pageItems == null) {
            pageItems = scope.pageItems;
          }
          scope.checkAdmin();
          if (scope.checkFilter()) {
            return;
          }
          filter = scope.project.getIds();
          filter["$or"] = _.map(scope.selectedTypes, function(type) {
            return {
              type: type
            };
          });
          if (scope.selectedPhases.length > 0) {
            filter.phase = {
              $in: scope.selectedPhases
            };
          }
          filter.startTime = moment(scope.query.startTime).startOf('day');
          filter.endTime = moment(scope.query.endTime).endOf('day');
          paging = {
            page: page,
            pageItems: pageItems
          };
          data = {
            filter: filter,
            fields: null,
            paging: paging,
            sorting: {
              startTime: -1
            },
            token: scope.token
          };
          return _this.commonService.reportingService.queryRecords("reporting.records.notification", data, function(err, records, paging2) {
            var pCount, records2, sortDataArray, _i, _results;
            if (err) {
              return console.log('err:', err);
            }
            pCount = paging2.pageCount;
            if (pCount <= 6) {
              if (paging2 != null) {
                paging2.pages = (function() {
                  _results = [];
                  for (var _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; 1 <= pCount ? _i++ : _i--){ _results.push(_i); }
                  return _results;
                }).apply(this);
              }
            } else if (page > 3 && page < pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
              }
            } else if (page <= 3) {
              if (paging2 != null) {
                paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
              }
            } else if (page >= pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
              }
            }
            scope.pagination = paging2;
            records2 = _.map(records, function(item) {
              var iname;
              iname = scope.getTypeName(item.type);
              if (iname === 'command') {
                iname = '内置短信';
              }
              return _.extend(item, {
                startTime: moment(item.startTime).format("YYYY-MM-DD HH:mm:ss"),
                endTime: moment(item.endTime).format("YYYY-MM-DD HH:mm:ss"),
                typeName: iname,
                phase: scope.getPhaseName(item.phase),
                receiverNames: scope.getReceiverNames(item.type, item.receivers) || ''
              });
            });
            sortDataArray = (_.sortBy(records2, 'startTime')).reverse();
            return scope.garddatas = sortDataArray;
          });
        };
      })(this);
      scope.queryPage = (function(_this) {
        return function(page) {
          var paging;
          paging = scope.pagination;
          if (!paging) {
            return;
          }
          if (page === 'next') {
            page = paging.page + 1;
          } else if (page === 'previous') {
            page = paging.page - 1;
          }
          if (page > paging.pageCount || page < 1) {
            return;
          }
          return scope.getReportData(page, paging.pageItems);
        };
      })(this);
      return this.$timeout(function() {
        return scope.getReportData();
      }, 1000);
    };

    ReportNotificationsDirective.prototype.resize = function(scope) {};

    ReportNotificationsDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = scope.dropSubscribe) != null) {
        _ref.dispose();
      }
      return (_ref1 = this.timeSubscribe) != null ? _ref1.dispose() : void 0;
    };

    return ReportNotificationsDirective;

  })(base.BaseDirective);
  return exports = {
    ReportNotificationsDirective: ReportNotificationsDirective
  };
});
