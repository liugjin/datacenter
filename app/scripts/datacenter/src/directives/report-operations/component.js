// Generated by IcedCoffeeScript 108.0.11

/*
* File: report-operations-leon-directive
* User: David
* Date: 2019/08/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportOperationsDirective, exports;
  ReportOperationsDirective = (function(_super) {
    __extends(ReportOperationsDirective, _super);

    function ReportOperationsDirective($timeout, $window, $compile, $routeParams, commonService, $http) {
      this.$http = $http;
      this.show = __bind(this.show, this);
      this.id = "report-operations";
      ReportOperationsDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ReportOperationsDirective.prototype.setScope = function() {};

    ReportOperationsDirective.prototype.setCSS = function() {
      return css;
    };

    ReportOperationsDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportOperationsDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1, _ref2, _ref3;
      scope.token = (_ref = scope.controller) != null ? (_ref1 = _ref.$rootScope) != null ? (_ref2 = _ref1.user) != null ? _ref2.token : void 0 : void 0 : void 0;
      scope.pageItems = scope.parameters.pageItems || 10;
      scope.pageIndex = 0;
      scope.actions = [
        {
          action: 'create',
          actionName: '新建'
        }, {
          action: 'update',
          actionName: '修改'
        }, {
          action: 'delete',
          actionName: '删除'
        }
      ];
      scope.currentAction = {
        action: 'all',
        actionName: '全部操作'
      };
      scope.garddatas = [
        {
          index: '',
          type: "暂无数据",
          action: "暂无数据",
          user: "暂无数据",
          project: "暂无数据",
          station: "暂无数据",
          equipment: "暂无数据",
          updatetime: "暂无数据"
        }
      ];
      scope.header = [
        {
          headerName: "类型",
          field: 'type',
          width: 90
        }, {
          headerName: "操作",
          field: 'action',
          width: 90
        }, {
          headerName: "站点",
          field: 'station'
        }, {
          headerName: "设备",
          field: 'equipment'
        }, {
          headerName: "时间",
          field: 'updatetime'
        }
      ];
      scope.query = {
        startTime: '',
        endTime: ''
      };
      if ((_ref3 = scope.timeSubscription) != null) {
        _ref3.dispose();
      }
      scope.timeSubscription = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!scope.garddatas) {
            return;
          }
          items = [];
          items = _.filter(scope.garddatas, function(equipment) {
            if (3 > 2) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      scope.selectPage = (function(_this) {
        return function(page) {
          return scope.pageIndex = page;
        };
      })(this);
      scope.$watch('pageIndex', function(index) {
        var startindex, _ref4;
        startindex = scope.pageItems * (index - 1);
        return scope.garddatas2 = (_ref4 = scope.garddatas) != null ? _ref4.slice(startindex, startindex + scope.pageItems) : void 0;
      });
      scope.selectAction = function(d) {
        if (d === 'all') {
          return scope.currentAction = {
            action: 'all',
            actionName: '全部操作'
          };
        } else {
          return scope.currentAction = d;
        }
      };
      scope.queryLog = function(para) {
        var action;
        if (para.action === 'all') {
          action = {
            $in: ["create", "update", "delete"]
          };
        } else {
          action = para.action;
        }
        return $.get('getConfigurationInfo', {
          token: scope.token,
          type: 'equipment',
          action: action
        }, function(data) {
          var index, records, sortDataArray, _ref4;
          scope.pageIndex = 1;
          records = [];
          index = 0;
          _.map(data.data, function(item) {
            var action2, type;
            switch (item.action) {
              case 'create':
                action2 = '新建';
                break;
              case 'update':
                action2 = '修改';
                break;
              case 'delete':
                action2 = '删除';
            }
            if (item.type === 'equipment') {
              type = '设备';
            }
            if (moment(item.message.updatetime).isBetween(scope.query.startTime, scope.query.endTime)) {
              return records.push({
                type: type,
                action: action2,
                user: item.topic.split('/')[0],
                project: item.topic.split('/')[1],
                station: scope.getStationName(item.topic.split('/')[2]),
                equipment: item.message.name,
                updatetime: item.message.updatetime
              });
            }
          });
          records = _.filter(records, function(record) {
            return record.user === scope.project.model.user && record.project === scope.project.model.project;
          });
          sortDataArray = (_.sortBy(records, function(dataAarrayItem) {
            dataAarrayItem.updatetime = moment(dataAarrayItem.updatetime).format("YYYY-MM-DD HH:mm:ss");
            return dataAarrayItem.updatetime;
          })).reverse();
          scope.garddatas = sortDataArray;
          scope.garddatas2 = (_ref4 = scope.garddatas) != null ? _ref4.slice(0, scope.pageItems) : void 0;
          return scope.$applyAsync();
        });
      };
      this.$timeout(function() {
        return scope.queryLog(scope.currentAction);
      }, 500);
      scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
      return scope.getStationName = function(stationId) {
        var item, _i, _len, _ref4;
        _ref4 = scope.project.stations.items;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          item = _ref4[_i];
          if (item.model.station === stationId) {
            return item.model.name;
          }
        }
        return stationId;
      };
    };

    ReportOperationsDirective.prototype.resize = function(scope) {};

    ReportOperationsDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.timeSubscription) != null ? _ref.dispose() : void 0;
    };

    return ReportOperationsDirective;

  })(base.BaseDirective);
  return exports = {
    ReportOperationsDirective: ReportOperationsDirective
  };
});
