// Generated by IcedCoffeeScript 108.0.13

/*
* File: report-operations-directive
* User: David
* Date: 2019/01/05
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportSystemlogDirective, exports;
  ReportSystemlogDirective = (function(_super) {
    __extends(ReportSystemlogDirective, _super);

    function ReportSystemlogDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "report-systemlog";
      ReportSystemlogDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ReportSystemlogDirective.prototype.setScope = function() {};

    ReportSystemlogDirective.prototype.setCSS = function() {
      return css;
    };

    ReportSystemlogDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportSystemlogDirective.prototype.show = function(scope, element, attrs) {
      var checkFilter, _ref;
      scope.query = {
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().format("YYYY-MM-DD")
      };
      scope.garddatas = [
        {
          user: "暂无数据",
          type: "暂无数据",
          operation: "暂无数据",
          address: "暂无数据",
          timestamp: "暂无数据"
        }
      ];
      scope.header = [
        {
          headerName: "用户ID",
          field: 'user',
          width: 90
        }, {
          headerName: "类型",
          field: 'type',
          width: 90
        }, {
          headerName: "操作",
          field: 'operation'
        }, {
          headerName: "访问地址",
          field: 'address'
        }, {
          headerName: "开始时间",
          field: 'timestamp'
        }
      ];
      checkFilter = function() {
        if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
          M.toast({
            html: '开始时间大于结束时间！'
          });
          return true;
        }
        return false;
      };
      scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + "(" + moment(scope.query.startTime).format("YYYY-MM-DD") + "-" + moment(scope.query.endTime).format("YYYY-MM-DD") + ").csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
      if ((_ref = this.timeSubscribe) != null) {
        _ref.dispose();
      }
      this.timeSubscribe = this.commonService.subscribeEventBus('time', (function(_this) {
        return function(d) {
          scope.query.startTime = moment(d.message.startTime).startOf('day');
          return scope.query.endTime = moment(d.message.endTime).endOf('day');
        };
      })(this));
      scope.getReportData = (function(_this) {
        return function(page, pageItems) {
          var data, filter, paging;
          if (page == null) {
            page = 1;
          }
          if (pageItems == null) {
            pageItems = 12;
          }
          if (checkFilter()) {
            return;
          }
          filter = {};
          filter.startTime = moment(scope.query.startTime).startOf('day');
          filter.endTime = moment(scope.query.endTime).endOf('day');
          paging = {
            page: page,
            pageItems: pageItems
          };
          data = {
            filter: filter,
            fields: null,
            paging: paging,
            sorting: {
              timestamp: -1
            }
          };
          return _this.commonService.reportingService.queryRecords("reporting.operationrecords", data, function(err, records, paging2) {
            var pCount, sortDataArray, _i, _results;
            if (err) {
              return console.log('err:', err);
            }
            pCount = paging2.pageCount;
            if (pCount <= 6) {
              if (paging2 != null) {
                paging2.pages = (function() {
                  _results = [];
                  for (var _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; 1 <= pCount ? _i++ : _i--){ _results.push(_i); }
                  return _results;
                }).apply(this);
              }
            } else if (page > 3 && page < pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
              }
            } else if (page <= 3) {
              if (paging2 != null) {
                paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
              }
            } else if (page >= pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
              }
            }
            scope.pagination = paging2;
            sortDataArray = (_.sortBy(records, function(dataAarrayItem) {
              dataAarrayItem.timestamp = moment(dataAarrayItem.timestamp).format("YYYY-MM-DD HH:mm:ss");
              return dataAarrayItem.timestamp;
            })).reverse();
            return scope.garddatas = sortDataArray;
          });
        };
      })(this);
      return scope.queryPage = (function(_this) {
        return function(page) {
          var paging;
          paging = scope.pagination;
          if (!paging) {
            return;
          }
          if (page === 'next') {
            page = paging.page + 1;
          } else if (page === 'previous') {
            page = paging.page - 1;
          }
          if (page > paging.pageCount || page < 1) {
            return;
          }
          return scope.getReportData(page, paging.pageItems);
        };
      })(this);
    };

    ReportSystemlogDirective.prototype.resize = function(scope) {};

    ReportSystemlogDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = this.timeSubscribe) != null ? _ref.dispose() : void 0;
    };

    return ReportSystemlogDirective;

  })(base.BaseDirective);
  return exports = {
    ReportSystemlogDirective: ReportSystemlogDirective
  };
});
