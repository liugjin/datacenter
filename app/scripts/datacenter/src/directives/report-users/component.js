// Generated by IcedCoffeeScript 108.0.13

/*
* File: report-users-directive
* User: David
* Date: 2019/11/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportUsersDirective, exports;
  ReportUsersDirective = (function(_super) {
    __extends(ReportUsersDirective, _super);

    function ReportUsersDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "report-users";
      ReportUsersDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.logonUser = commonService.$rootScope.user;
    }

    ReportUsersDirective.prototype.setScope = function() {};

    ReportUsersDirective.prototype.setCSS = function() {
      return css;
    };

    ReportUsersDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportUsersDirective.prototype.show = function(scope, element, attrs) {
      var _ref, _ref1, _ref2;
      scope.token = ((_ref = scope.controller) != null ? (_ref1 = _ref.$rootScope) != null ? (_ref2 = _ref1.user) != null ? _ref2.token : void 0 : void 0 : void 0) || setting.adminToken || '0b6703d0-d873-11e9-ab4f-c5a3318c0787';
      scope.header = [
        {
          headerName: "用户",
          field: 'user',
          width: 90
        }, {
          headerName: "用户名",
          field: 'name'
        }, {
          headerName: "电话",
          field: 'phone'
        }, {
          headerName: "邮件",
          field: 'email'
        }, {
          headerName: "创建时间",
          field: 'createtime'
        }
      ];
      scope.garddatas = [
        {
          user: "暂无数据",
          name: "暂无数据",
          phone: "暂无数据",
          email: "暂无数据",
          createtime: "暂无数据"
        }
      ];
      scope.pageItems = scope.parameters.pageItems || 12;
      scope.searchFlag = false;
      scope.searchSubscrbe = this.commonService.subscribeEventBus('search', (function(_this) {
        return function(d) {
          var item, text, _data, _i, _len, _ref3;
          console.log(d);
          text = d.message;
          if (!d.message) {
            scope.searchFlag = false;
            return scope.garddatas2 = scope.garddatas;
          } else {
            scope.searchFlag = true;
            _data = [];
            _ref3 = scope.garddatas;
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              item = _ref3[_i];
              if (item.user.toLowerCase().indexOf(text) >= 0 || item.name.toLowerCase().indexOf(text) >= 0) {
                _data.push(item);
              }
            }
            return scope.garddatas2 = _data;
          }
        };
      })(this));
      scope.checkAdmin = (function(_this) {
        return function() {
          if (_this.logonUser.user !== 'admin') {
            _this.display("请使用超级管理员访问");
          }
        };
      })(this);
      (scope.queryUsers = (function(_this) {
        return function() {
          var url;
          scope.checkAdmin();
          url = 'http://' + _this.$window.location.host + "/model/clc/api/v1/users";
          return $.get(url, {
            token: scope.token
          }, function(data) {
            var sortDataArray;
            if (data._err) {
              console.log(data._err);
            }
            scope.users = data;
            sortDataArray = (_.sortBy(scope.users, function(dataAarrayItem) {
              dataAarrayItem.createtime = moment(dataAarrayItem.createtime).format("YYYY-MM-DD HH:mm:ss");
              return dataAarrayItem.createtime;
            })).reverse();
            scope.garddatas = sortDataArray;
            return scope.pageIndex = 1;
          });
        };
      })(this))();
      scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _i, _results;
          if (!scope.garddatas) {
            return;
          }
          items = [];
          items = _.filter(scope.garddatas, function(equipment) {
            if (3 > 2) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _i = 1; 1 <= pageCount ? _i <= pageCount : _i >= pageCount; 1 <= pageCount ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      scope.selectPage = (function(_this) {
        return function(page) {
          return scope.pageIndex = page;
        };
      })(this);
      scope.$watch('pageIndex', function(index) {
        var startindex, _ref3;
        startindex = scope.pageItems * (index - 1);
        return scope.garddatas2 = (_ref3 = scope.garddatas) != null ? _ref3.slice(startindex, startindex + scope.pageItems) : void 0;
      });
      return scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + "(" + moment().format("YYYY-MM-DD") + ").csv";
          return _this.commonService.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
    };

    ReportUsersDirective.prototype.resize = function(scope) {};

    ReportUsersDirective.prototype.dispose = function(scope) {};

    return ReportUsersDirective;

  })(base.BaseDirective);
  return exports = {
    ReportUsersDirective: ReportUsersDirective
  };
});
