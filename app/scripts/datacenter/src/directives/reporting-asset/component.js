// Generated by IcedCoffeeScript 108.0.12

/*
* File: reporting-asset-directive
* User: bingo
* Date: 2018/11/22
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var ReportingAssetDirective, exports;
  ReportingAssetDirective = (function(_super) {
    __extends(ReportingAssetDirective, _super);

    function ReportingAssetDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "reporting-asset";
      ReportingAssetDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ReportingAssetDirective.prototype.setScope = function() {};

    ReportingAssetDirective.prototype.setCSS = function() {
      return css;
    };

    ReportingAssetDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportingAssetDirective.prototype.show = function($scope, element, attrs) {
      var equipTypeItem, equipments, initProperty, item, singleData, station, stations, vendorItem, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      $scope.headers = [
        {
          headerName: "站点名称",
          field: 'stationName'
        }, {
          headerName: "设备名称",
          field: 'equipmentName'
        }, {
          headerName: "设备类型",
          field: 'typeName'
        }, {
          headerName: "厂商",
          field: 'vendorName'
        }, {
          headerName: "设备型号",
          field: 'templateName'
        }, {
          headerName: "资产编码",
          field: 'assetId'
        }, {
          headerName: "出厂编号",
          field: 'productNo'
        }, {
          headerName: "资产归属",
          field: 'owner'
        }, {
          headerName: "生产日期",
          field: 'productDate'
        }, {
          headerName: "购买日期",
          field: 'buyDate'
        }, {
          headerName: "安装日期",
          field: 'installDate'
        }, {
          headerName: "保修期(月)",
          field: 'guarantee'
        }, {
          headerName: "寿命(月)",
          field: 'life'
        }, {
          headerName: "保修状态",
          field: 'guaranteeStatus'
        }, {
          headerName: "使用状态",
          field: 'status'
        }, {
          headerName: "管理员",
          field: 'owner'
        }
      ];
      $scope.data = [];
      equipments = [];
      $scope.stations = [];
      $scope.selectedStations = [];
      stations = _.filter($scope.project.stations.items, (function(_this) {
        return function(item) {
          return item.model.station.charAt(0) !== "_";
        };
      })(this));
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        item = stations[_i];
        station = item;
        singleData = {
          id: item.model.station,
          name: item.model.name,
          checked: true
        };
        $scope.stations.push(singleData);
        $scope.selectedStations.push(station.model.station);
        station.loadEquipments(null, null, (function(_this) {
          return function(err, equips) {
            var equip, _j, _len1, _results;
            if (err || equips.length === 0) {
              return;
            }
            equipments = equipments.concat(equips);
            _results = [];
            for (_j = 0, _len1 = equips.length; _j < _len1; _j++) {
              equip = equips[_j];
              _results.push(equip.loadProperties());
            }
            return _results;
          };
        })(this));
      }
      $scope.userMsg = [];
      $scope.loadAllUsers = (function(_this) {
        return function() {
          var fields, filter, userService;
          userService = _this.commonService.modelEngine.modelManager.getService('users');
          filter = {};
          fields = null;
          return userService.query(filter, fields, function(err, data) {
            if (!err) {
              return $scope.userMsg = data;
            }
          });
        };
      })(this);
      $scope.loadAllUsers();
      $scope.equipmentTypes = [];
      $scope.selectedTypes = [];
      _ref = $scope.project.dictionary.equipmenttypes.items;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        equipTypeItem = _ref[_j];
        if (equipTypeItem.model.type.indexOf("_") !== 0 && equipTypeItem.model.base) {
          singleData = {
            id: equipTypeItem.model.type,
            name: equipTypeItem.model.name,
            checked: true
          };
          $scope.equipmentTypes.push(singleData);
          $scope.selectedTypes.push(equipTypeItem.model.type);
        }
      }
      $scope.vendors = [];
      $scope.selectedVendors = [];
      _ref1 = $scope.project.dictionary.vendors.items;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        vendorItem = _ref1[_k];
        singleData = {
          id: vendorItem.model.vendor,
          name: vendorItem.model.name,
          checked: true
        };
        $scope.vendors.push(singleData);
        $scope.selectedVendors.push(vendorItem.model.vendor);
      }
      $scope.selectedGuaranteeStatus = ["true", "false", "unknown"];
      $scope.guaranteeStatus = [
        {
          id: 'true',
          name: '保修中',
          checked: true
        }, {
          id: 'false',
          name: '已过保',
          checked: true
        }, {
          id: 'unknown',
          name: '未知',
          checked: true
        }
      ];
      initProperty = (function(_this) {
        return function(callback) {
          return $scope.project.loadEquipmentTemplates({
            template: 'facility_base'
          }, 'user project type vendor template name base index image', function(err, result) {
            if (!result) {
              return;
            }
            return result[0].loadProperties(null, function(err, properties) {
              var arrStatus, status;
              status = _.find(properties, function(sig) {
                return sig.model.property === 'status';
              });
              arrStatus = status != null ? status.model.format.split(',') : void 0;
              return typeof callback === "function" ? callback(arrStatus) : void 0;
            });
          });
        };
      })(this);
      initProperty((function(_this) {
        return function(arrStatus) {
          var arr, _l, _len3, _results;
          if (!arrStatus) {
            return;
          }
          $scope.selectedUsageStatus = [];
          $scope.usageStatus = [];
          _results = [];
          for (_l = 0, _len3 = arrStatus.length; _l < _len3; _l++) {
            arr = arrStatus[_l];
            item = {
              id: arr.split(':')[0],
              name: arr.split(':')[1],
              checked: true
            };
            $scope.selectedUsageStatus.push(arr.split(':')[0]);
            _results.push($scope.usageStatus.push(item));
          }
          return _results;
        };
      })(this));
      if ((_ref2 = $scope.subscribe) != null) {
        _ref2.dispose();
      }
      $scope.subscribe = this.subscribeEventBus("drop-down-select", (function(_this) {
        return function(d) {
          var msg;
          msg = d.message;
          if (msg.origin === "station") {
            $scope.selectedStations = msg.selected;
          }
          if (msg.origin === "type") {
            $scope.selectedTypes = msg.selected;
          }
          if (msg.origin === "vendor") {
            $scope.selectedVendors = msg.selected;
          }
          if (msg.origin === "guarantee") {
            $scope.selectedGuaranteeStatus = msg.selected;
          }
          if (msg.origin === "usage") {
            return $scope.selectedUsageStatus = msg.selected;
          }
        };
      })(this));
      $scope.queryData = (function(_this) {
        return function() {
          var abc, assetData, equip, filterData, _l, _len3, _ref3, _ref4, _ref5, _ref6, _ref7;
          $scope.data = [];
          assetData = [];
          _.each(equipments, function(equip) {
            var usage;
            equip.model.buyDate = equip.getPropertyValue("buy-date");
            equip.model.productionDate = equip.getPropertyValue("production-time");
            equip.model.guarantte = equip.getPropertyValue("guarantee-month");
            equip.model.life = equip.getPropertyValue("life");
            equip.model.guaranteeFlag = "unknown";
            if (equip.model.productionDate && equip.model.guarantte) {
              equip.model.guaranteeFlag = (moment().diff(moment(equip.model.productionDate).add(equip.model.guarantte, 'months'), 'days') <= 0).toString();
            }
            usage = _.find($scope.usageStatus, function(status) {
              return status.id === equip.getPropertyValue('status');
            });
            return equip.model.usageFlag = (usage != null ? usage.id : void 0) || 'unknown';
          });
          filterData = _.filter(equipments, function(equip) {
            var _ref3, _ref4, _ref5, _ref6, _ref7;
            return (_ref3 = equip.model.station, __indexOf.call($scope.selectedStations, _ref3) >= 0) && (_ref4 = equip.model.type, __indexOf.call($scope.selectedTypes, _ref4) >= 0) && (_ref5 = equip.model.vendor, __indexOf.call($scope.selectedVendors, _ref5) >= 0) && (_ref6 = equip.model.guaranteeFlag, __indexOf.call($scope.selectedGuaranteeStatus, _ref6) >= 0) && (_ref7 = equip.model.usageFlag, __indexOf.call($scope.selectedUsageStatus, _ref7) >= 0);
          });
          for (_l = 0, _len3 = filterData.length; _l < _len3; _l++) {
            equip = filterData[_l];
            abc = _.find($scope.userMsg, function(userobj) {
              return userobj.user === equip.model.owner;
            });
            item = {
              stationName: equip.station.model.name,
              equipmentName: equip.model.name,
              typeName: (_ref3 = _.find(_this.project.dictionary.equipmenttypes.items, function(type) {
                return type.key === equip.model.type;
              })) != null ? _ref3.model.name : void 0,
              vendorName: (_ref4 = _.find(_this.project.dictionary.vendors.items, function(vendor) {
                return vendor.key === equip.model.vendor;
              })) != null ? _ref4.model.name : void 0,
              templateName: (_ref5 = _.find(_this.project.equipmentTemplates.items, function(it) {
                return it.model.template === equip.model.template;
              })) != null ? _ref5.model.name : void 0,
              assetId: equip.getPropertyValue("asserts-code"),
              productDate: equip.getPropertyValue("production-time") ? moment(equip.getPropertyValue("production-time")).format("YYYY-MM-DD") : void 0,
              productNo: equip.getPropertyValue("production-no"),
              buyDate: equip.model.buyDate ? moment(equip.model.buyDate).format("YYYY-MM-DD") : void 0,
              installDate: equip.getPropertyValue("install-date") ? moment(equip.getPropertyValue("install-date")).format("YYYY-MM-DD") : void 0,
              guarantee: equip.model.guarantte,
              life: equip.model.life,
              guaranteeStatus: ((_ref6 = _.find($scope.guaranteeStatus, function(status) {
                return status.id === equip.model.guaranteeFlag;
              })) != null ? _ref6.name : void 0) || '未知',
              status: ((_ref7 = _.find($scope.usageStatus, function(status) {
                return status.id === equip.model.usageFlag;
              })) != null ? _ref7.name : void 0) || '未知',
              owner: abc != null ? abc.name : void 0
            };
            assetData.push(item);
          }
          return $scope.data = assetData;
        };
      })(this);
      return $scope.exportReport = (function(_this) {
        return function(header, name) {
          var reportName;
          reportName = name + moment().format("YYYYMMDDHHmmss") + ".csv";
          return _this.publishEventBus("export-report", {
            header: header,
            name: reportName
          });
        };
      })(this);
    };

    ReportingAssetDirective.prototype.resize = function($scope) {};

    ReportingAssetDirective.prototype.dispose = function($scope) {
      var _ref;
      return (_ref = $scope.subscribe) != null ? _ref.dispose() : void 0;
    };

    return ReportingAssetDirective;

  })(base.BaseDirective);
  return exports = {
    ReportingAssetDirective: ReportingAssetDirective
  };
});
