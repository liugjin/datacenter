// Generated by IcedCoffeeScript 108.0.11

/*
* File: reporting-signal-directive
* User: David
* Date: 2019/12/31
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", 'angularGrid', 'gl-datepicker'], function(base, css, view, _, moment, agGrid, gl) {
  var ReportingSignalDirective, exports;
  ReportingSignalDirective = (function(_super) {
    __extends(ReportingSignalDirective, _super);

    function ReportingSignalDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.exportReport = __bind(this.exportReport, this);
      this.setData = __bind(this.setData, this);
      this.getReportData = __bind(this.getReportData, this);
      this.checkFilter = __bind(this.checkFilter, this);
      this.getSelectedDevice = __bind(this.getSelectedDevice, this);
      this.getstations = __bind(this.getstations, this);
      this.setTime = __bind(this.setTime, this);
      this.show = __bind(this.show, this);
      this.id = "reporting-signal";
      ReportingSignalDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    ReportingSignalDirective.prototype.setScope = function() {};

    ReportingSignalDirective.prototype.setCSS = function() {
      return css;
    };

    ReportingSignalDirective.prototype.setTemplate = function() {
      return view;
    };

    ReportingSignalDirective.prototype.show = function(scope, element, attrs) {
      scope.historicalData = [];
      scope.stations = [];
      scope.header = [
        {
          headerName: "分区名称",
          field: 'stationName'
        }, {
          headerName: "设备名称",
          field: 'equipment'
        }, {
          headerName: "信号",
          field: 'signal'
        }, {
          headerName: "信号值",
          field: 'value'
        }, {
          headerName: "采集时间",
          field: 'sampleTime'
        }
      ];
      scope.noData = [
        {
          stationName: "暂无数据",
          equipment: "暂无数据",
          signal: "暂无数据",
          value: "暂无数据",
          createtime: "暂无数据"
        }
      ];
      this.getstations(scope);
      this.setTime(scope, element);
      this.getSelectedDevice(scope);
      this.getReportData(scope, 1, 50);
      this.exportReport(scope, element);
      return this.setData(scope, scope.noData);
    };

    ReportingSignalDirective.prototype.setTime = function(scope, element) {
      var setGlDatePicker;
      scope.query = {
        startTime: moment().format("YYYY-MM-DD"),
        endTime: moment().format("YYYY-MM-DD")
      };
      setGlDatePicker = function(element, value) {
        if (!value) {
          return;
        }
        return setTimeout(function() {
          return gl = $(element).glDatePicker({
            dowNames: ["日", "一", "二", "三", "四", "五", "六"],
            monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
            selectedDate: moment(value).toDate(),
            onClick: function(target, cell, date, data) {
              var day, month;
              month = date.getMonth() + 1;
              if (month < 10) {
                month = "0" + month;
              }
              day = date.getDate();
              if (day < 10) {
                day = "0" + day;
              }
              return target.val(date.getFullYear() + "-" + month + "-" + day).trigger("change");
            }
          });
        }, 500);
      };
      setGlDatePicker($('#start-time-input')[0], scope.query.startTime);
      return setGlDatePicker($('#end-time-input')[0], scope.query.startTime);
    };

    ReportingSignalDirective.prototype.getstations = function(scope) {
      return scope.project.loadStations(null, (function(_this) {
        return function(err, stations) {
          return scope.stations = stations;
        };
      })(this));
    };

    ReportingSignalDirective.prototype.getSelectedDevice = function(scope) {
      return this.commonService.subscribeEventBus('checkEquips', (function(_this) {
        return function(msg) {
          var equipments, stations;
          scope.selectedEquips = [];
          if (!(msg != null ? msg.message.length : void 0)) {
            return;
          }
          stations = _.filter(msg.message, function(item) {
            return item.level === "station";
          });
          equipments = _.filter(msg.message, function(item) {
            var _ref;
            return item.level === "equipment" && (_ref = item.station, __indexOf.call(_.pluck(stations, "id"), _ref) < 0);
          });
          if (stations != null) {
            stations.forEach(function(value) {
              return scope.selectedEquips.push(value.id);
            });
          }
          return equipments != null ? equipments.forEach(function(value) {
            return scope.selectedEquips.push((value != null ? value.station : void 0) + '.' + (value != null ? value.id : void 0));
          }) : void 0;
        };
      })(this));
    };

    ReportingSignalDirective.prototype.checkFilter = function(scope) {
      if (!scope.selectedEquips || (!scope.selectedEquips.length)) {
        M.toast({
          html: '请选择设备！'
        });
        return true;
      }
      if (moment(scope.query.startTime).isAfter(moment(scope.query.endTime))) {
        M.toast({
          html: '开始时间大于结束时间！'
        });
        return true;
      }
      return false;
    };

    ReportingSignalDirective.prototype.getReportData = function(scope, page, pageItems) {
      scope.getReportData = (function(_this) {
        return function(a, page, pageItems) {
          var data, filter, paging;
          if (_this.checkFilter(scope)) {
            return;
          }
          filter = scope.project.getIds();
          filter["$or"] = _.map(scope.selectedEquips, function(equip) {
            if (equip.split(".").length > 1) {
              return {
                station: equip.split('.')[0],
                equipment: equip.split('.')[1]
              };
            } else {
              return {
                station: equip.split('.')[0]
              };
            }
          });
          filter.startTime = moment(scope.query.startTime).startOf('day');
          filter.endTime = moment(scope.query.endTime).endOf('day');
          paging = {
            page: page,
            pageItems: pageItems
          };
          data = {
            filter: filter,
            fields: null,
            paging: paging
          };
          return _this.commonService.reportingService.querySignalRecords(data, function(err, records, paging2) {
            var c, pCount, s, _i, _j, _k, _len, _len1, _ref, _results;
            for (_i = 0, _len = records.length; _i < _len; _i++) {
              c = records[_i];
              _ref = scope.stations;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                s = _ref[_j];
                if (c.station === s.model.station) {
                  c.stationName = s.model.name;
                }
              }
            }
            if (err || records.length < 1) {
              return _this.setData(scope, scope.noData);
            }
            pCount = (paging2 != null ? paging2.pageCount : void 0) || 0;
            if (pCount <= 6) {
              if (paging2 != null) {
                paging2.pages = (function() {
                  _results = [];
                  for (var _k = 1; 1 <= pCount ? _k <= pCount : _k >= pCount; 1 <= pCount ? _k++ : _k--){ _results.push(_k); }
                  return _results;
                }).apply(this);
              }
            } else if (page > 3 && page < pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, page - 2, page - 1, page, page + 1, page + 2, pCount];
              }
            } else if (page <= 3) {
              if (paging2 != null) {
                paging2.pages = [1, 2, 3, 4, 5, 6, pCount];
              }
            } else if (page >= pCount - 2) {
              if (paging2 != null) {
                paging2.pages = [1, pCount - 5, pCount - 4, pCount - 3, pCount - 2, pCount - 1, pCount];
              }
            }
            scope.pagination = paging2;
            return _this.setData(scope, records);
          });
        };
      })(this);
      return scope.queryPage = function(page) {
        var paging;
        paging = scope.pagination;
        if (!paging) {
          return;
        }
        if (page === 'next') {
          page = paging.page + 1;
        } else if (page === 'previous') {
          page = paging.page - 1;
        }
        if (page > paging.pageCount || page < 1) {
          return;
        }
        return this.getReportData(scope, page, paging.pageItems);
      };
    };

    ReportingSignalDirective.prototype.setData = function(scope, data) {
      if (!scope.gridOptions) {
        return;
      }
      scope.historicalData = data;
      return scope.gridOptions.api.setRowData(data);
    };

    ReportingSignalDirective.prototype.exportReport = function(scope, element) {
      scope.gridOptions = {
        columnDefs: scope.header,
        rowData: null,
        enableFilter: true,
        enableSorting: true,
        enableColResize: true,
        overlayNoRowsTemplate: " ",
        headerHeight: 41,
        rowHeight: 61
      };
      new agGrid.Grid(element.find("#grid")[0], scope.gridOptions);
      return scope.exportReport = (function(_this) {
        return function(name) {
          var reportName;
          if (!scope.gridOptions) {
            return;
          }
          reportName = name + "(" + moment(scope.query.startTime).format("YYYY-MM-DD") + "-" + moment(scope.query.endTime).format("YYYY-MM-DD") + ").csv";
          return scope.gridOptions.api.exportDataAsCsv({
            fileName: reportName,
            allColumns: true,
            skipGroups: true
          });
        };
      })(this);
    };

    ReportingSignalDirective.prototype.resize = function(scope) {};

    ReportingSignalDirective.prototype.dispose = function(scope) {};

    return ReportingSignalDirective;

  })(base.BaseDirective);
  return exports = {
    ReportingSignalDirective: ReportingSignalDirective
  };
});
