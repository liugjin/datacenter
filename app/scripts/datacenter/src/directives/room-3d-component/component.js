// Generated by IcedCoffeeScript 108.0.12

/*
* File: room-3d-component-directive
* User: David
* Date: 2019/02/20
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'lodash', "moment", "./room"], function(base, css, view, _, moment, Room) {
  var Room3dComponentDirective, exports;
  Room3dComponentDirective = (function(_super) {
    __extends(Room3dComponentDirective, _super);

    function Room3dComponentDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "room-3d-component";
      this.d3Url = "";
      this.oldStyle = {};
      Room3dComponentDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    Room3dComponentDirective.prototype.setScope = function() {};

    Room3dComponentDirective.prototype.setCSS = function() {
      return css;
    };

    Room3dComponentDirective.prototype.setTemplate = function() {
      return view;
    };

    Room3dComponentDirective.prototype.show = function(scope, element, attrs) {
      var applyAsyncThrottle, calculateRatioComprehensive, capacityCollection, capacityList, changeEquips, changeStation, changeStationLazy, checkObj, colorMaps, getDataBox, getEquipmentByPosition, getIcons, getPosition3DByEquipmentName, getUnitys, init, loadFun, loadScene, onKeyDown, param, processEvent, raycasterClickCallback, raycasterMousemoveCallback, room, rotateRoom, self, setTipCubeLazy, subscribeArray, subscribeStationCapacity, subscribeStationEvent, updateCapacityCollectionLazy, updateStation, updateTipPosition, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (!scope.firstload) {
        return;
      }
      scope.showDetail = false;
      scope.equipmentDetail = null;
      scope.allIconVisible = true;
      scope.subs = {};
      scope.capacitySubscribe = {};
      scope.types = ["rack", "environmental", "Facility"];
      scope.showEquipmentDetail = (function(_this) {
        return function() {
          return _this.commonService.loadEquipmentById(scope.station, scope.equipmentDetail.model.equipment, function(err, equip) {
            return _this.commonService.publishEventBus("room-3d-select-equipment-detail", {
              equip: equip.model.equipment
            });
          });
        };
      })(this);
      if ((_ref = scope.parameters.options) != null ? _ref['hideDetail'] : void 0) {
        scope.hideDetail = true;
      }
      if ((_ref1 = scope.parameters.options) != null ? _ref1['hideDataBox'] : void 0) {
        scope.hideDataBox = true;
      }
      scope.hideSetting = (function(_this) {
        return function(e) {
          var elementRelated;
          elementRelated = e.toElement || e.relatedTarget;
          if (element[0].contains(elementRelated)) {

          } else {
            return setTimeout(function() {
              return scope.showSetting = false;
            }, 10000);
          }
        };
      })(this);
      scope.closeDetail = (function(_this) {
        return function() {
          scope.showDetail = false;
          return scope.equipmentDetail = null;
        };
      })(this);
      scope.formatUnit = (function(_this) {
        return function(unit) {
          var item;
          item = _.find(scope.unitys2, function(d) {
            return d.key === unit;
          });
          if (item) {
            return item.unit;
          } else {
            return "";
          }
        };
      })(this);
      scope.openDetail = (function(_this) {
        return function() {
          if (scope.hideDetail) {
            return;
          }
          if (!scope.equipmentDetail) {
            return scope.showDetail = false;
          } else {
            scope.showDetail = true;
            return scope.equipmentDetail.loadSignals(null, function(err, signals) {
              scope.equipmentDetail.signalsDetail = [];
              _.forEach(signals, function(signal) {
                var _ref2;
                if (signal.model.group === '3d-detail') {
                  scope.equipmentDetail.signalsDetail.push(signal);
                  if ((_ref2 = scope.subs[signal.key]) != null) {
                    _ref2.dispose();
                  }
                  return scope.subs[signal.key] = _this.commonService.subscribeSignalValue(signal);
                }
              });
              return scope.$applyAsync();
            });
          }
        };
      })(this);
      self = this;
      updateStation = (function(_this) {
        return function(equips) {
          var _ref2, _ref3;
          getIcons();
          if (_.isEmpty(room.thingList)) {
            getDataBox(equips);
          }
          scope.updateIconsStyle(true);
          if ((_ref2 = scope.parameters) != null ? (_ref3 = _ref2.options) != null ? _ref3.eventTipCube : void 0 : void 0) {
            return subscribeStationEvent();
          }
        };
      })(this);
      changeEquips = (function(_this) {
        return function(err, equipments) {
          if (!equipments) {
            return console.error("设备加载失败");
          }
          scope.equipments = equipments;
          scope.racks = {};
          scope.racks.items = _.filter(scope.equipments, function(equipment) {
            return equipment.model.type === 'rack';
          });
          return scope.$root.$applyAsync();
        };
      })(this);
      changeStation = (function(_this) {
        return function(stationId) {
          if (!stationId) {
            return;
          }
          getUnitys();
          return _this.commonService.loadStation(stationId, function(err, station) {
            var _param;
            station = scope.station;
            if (!station) {
              return console.error("站点加载失败");
            }
            _param = {
              station: station.model.station,
              project: station.model.project,
              user: station.model.user
            };
            return station.loadEquipments(_param, null, changeEquips);
          });
        };
      })(this);
      changeStationLazy = _.throttle(changeStation, 50, {
        leading: false
      });
      capacityList = ['ratio-comprehensive', 'ratio-cooling', 'ratio-ports', 'ratio-power', 'ratio-space', 'ratio-weight', 'plan-ratio-comprehensive', 'plan-ratio-cooling', 'plan-ratio-ports', 'plan-ratio-power', 'plan-ratio-space', 'plan-ratio-weight'];
      capacityCollection = {};
      scope.capacityCollection = capacityCollection;
      colorMaps = [
        {
          value: 0,
          color: "#8bc34a"
        }, {
          value: 50,
          color: "#ffeb3b"
        }, {
          value: 80,
          color: "#ff9800"
        }, {
          value: 100,
          color: "#f44336"
        }
      ];
      scope.tipBoxStyle = {};
      scope.tipBoxInnerStyle = {};
      param = {
        camera: {
          type: ((_ref2 = scope.parameters.camera) != null ? _ref2.type : void 0) || "PerspectiveCamera",
          fov: ((_ref3 = scope.parameters.camera) != null ? _ref3.fov : void 0) || 50,
          x: ((_ref4 = scope.parameters.camera) != null ? _ref4.x : void 0) || 0,
          y: ((_ref5 = scope.parameters.camera) != null ? _ref5.y : void 0) || 0,
          z: ((_ref6 = scope.parameters.camera) != null ? _ref6.z : void 0) || 0,
          rotationX: ((_ref7 = scope.parameters.camera) != null ? _ref7.rotationX : void 0) || 0,
          rotationY: ((_ref8 = scope.parameters.camera) != null ? _ref8.rotationY : void 0) || 0,
          rotationZ: ((_ref9 = scope.parameters.camera) != null ? _ref9.rotationZ : void 0) || 0
        },
        renderder: {
          alpha: true,
          antialias: true
        },
        orbitControl: true
      };
      room = new Room("room-1", element.find('.room-3d-canvas')[0], param);
      scope.room = room;
      scope.iconSize = 48;
      room.renderer.domElement.addEventListener("wheel", (function(_this) {
        return function(e) {
          var delta;
          scope.updateIconsStyle(true);
          if (e.wheelDelta) {
            delta = e.wheelDelta / 60;
          } else if (e.detail) {
            delta = -e.detail / 2;
          }
          if (delta > 0 && scope.iconSize < 64) {
            return scope.iconSize += 1;
          } else if (delta < 0 && scope.iconSize > 0) {
            return scope.iconSize -= 1;
          }
        };
      })(this));
      getPosition3DByEquipmentName = function(name) {
        var equipment;
        if (!name) {
          return;
        }
        equipment = _.find(scope.equipments, function(e) {
          return (e != null ? e.model.equipment : void 0) === name;
        });
        return equipment != null ? equipment.getPropertyValue("3d-position") : void 0;
      };
      calculateRatioComprehensive = function() {
        var capacity, i, key, obj, _i, _j, _results;
        _results = [];
        for (key in capacityCollection) {
          obj = capacityCollection[key];
          obj['ratio-comprehensive'] = 0;
          for (i = _i = 1; _i <= 5; i = ++_i) {
            capacity = capacityList[i];
            if (obj[capacity] > obj['ratio-comprehensive']) {
              obj['ratio-comprehensive'] = obj[capacity];
            }
          }
          obj['plan-ratio-comprehensive'] = 0;
          for (i = _j = 7; _j <= 11; i = ++_j) {
            capacity = capacityList[i];
            if (obj[capacity] > obj['plan-ratio-comprehensive']) {
              obj['plan-ratio-comprehensive'] = obj[capacity];
            }
          }
          if (obj['plan-ratio-comprehensive'] + obj['ratio-comprehensive'] > 100) {
            _results.push(obj['plan-ratio-comprehensive'] = 0);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      getIcons = (function(_this) {
        return function() {
          return scope.iconThings = _.filter(room.thingList, function(thing) {
            return thing.userData.icon;
          });
        };
      })(this);
      applyAsyncThrottle = _.throttle(scope.$applyAsync, 200);
      scope.updateIconsStyle = (function(_this) {
        return function(reflesh) {
          var coordinate, left, thing, top, _i, _j, _len, _len1, _ref10, _ref11, _ref12, _ref13;
          if (scope.updateIconsFlag || reflesh) {
            if (((_ref10 = scope.iconThings) != null ? _ref10.length : void 0) > 0) {
              _ref11 = scope.iconThings;
              for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
                thing = _ref11[_i];
                coordinate = room.getScreenCoordinate(thing.showingObject);
                thing.iconStyle = {};
                thing.iconStyle["width"] = scope.iconSize + 'px';
                thing.iconStyle["height"] = scope.iconSize + 'px';
                left = Number((coordinate.x - room.offsetLeft - scope.iconSize / 2).toFixed(0));
                top = (coordinate.y - room.offsetTop - scope.iconSize / 2).toFixed(0);
                thing.iconStyle["left"] = left + 'px';
                thing.iconStyle["top"] = top + 'px';
              }
            }
            if (((_ref12 = scope.dataBoxThings) != null ? _ref12.length : void 0) > 0) {
              _ref13 = scope.dataBoxThings;
              for (_j = 0, _len1 = _ref13.length; _j < _len1; _j++) {
                thing = _ref13[_j];
                coordinate = room.getScreenCoordinate(thing.showingObject);
                thing.dataBoxStyle = {};
                left = Number((coordinate.x - room.offsetLeft).toFixed(0));
                top = (coordinate.y - room.offsetTop).toFixed(0);
                thing.dataBoxStyle["left"] = (left - 10) + 'px';
                thing.dataBoxStyle["top"] = (top - 10) + 'px';
              }
              return applyAsyncThrottle();
            }
          }
        };
      })(this);
      getUnitys = (function(_this) {
        return function() {
          var i, _i, _len, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _results;
          scope.unitys = {};
          if (!((_ref10 = scope.project) != null ? (_ref11 = _ref10.dictionary) != null ? (_ref12 = _ref11.units) != null ? (_ref13 = _ref12.items) != null ? _ref13.length : void 0 : void 0 : void 0 : void 0) > 0) {
            return console.warn("获取单位数据异常");
          }
          scope.unitys2 = _.map(scope.project.dictionary.signaltypes.items, function(d) {
            var _ref14;
            return {
              key: d != null ? d.key : void 0,
              unit: d != null ? (_ref14 = d.model) != null ? _ref14.unit : void 0 : void 0
            };
          });
          _ref14 = scope.project.dictionary.signaltypes.items;
          _results = [];
          for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
            i = _ref14[_i];
            _results.push(scope.unitys[i != null ? i.key : void 0] = (_ref15 = i.model) != null ? _ref15.unit : void 0);
          }
          return _results;
        };
      })(this);
      getUnitys();
      getDataBox = (function(_this) {
        return function() {
          var equipments, equipsList, siteList;
          if (scope.hideDataBox) {
            return;
          }
          equipments = scope.equipments;
          if (!_.isEmpty(scope.dataBoxSignals)) {
            _.forEach(scope.subs, function(d) {
              return typeof subs !== "undefined" && subs !== null ? subs.dispose() : void 0;
            });
          }
          scope.dataBoxSignals = {};
          scope.dataBoxThings = _.filter(room.thingList, function(thing) {
            var _ref10;
            return typeof ((_ref10 = thing.userData) != null ? _ref10.dataBoxNumber : void 0) === 'number';
          });
          siteList = _.map(scope.dataBoxThings, function(n) {
            return n.name;
          });
          equipsList = _.filter(equipments, function(equip) {
            return siteList.indexOf(equip.getPropertyValue('3d-position')) !== -1;
          });
          if (equipsList.length === 0) {
            equipsList = _.filter(equipments, function(equip) {
              return siteList.indexOf(equip != null ? equip.position : void 0) !== -1;
            });
          }
          return _.forEach(equipsList, function(equip) {
            var position;
            position = equip.getPropertyValue('3d-position');
            if (!_.has(scope.dataBoxSignals, position)) {
              scope.dataBoxSignals[position] = [];
            }
            return equip.loadSignals(null, function(err, signals) {
              var showSig, sig, _i, _len, _ref10, _results, _signals;
              _signals = signals.length === 0 ? equip.signals.items : signals;
              showSig = _.sortBy(_.filter(_signals, function(sig) {
                return sig.model.group === '3d-data-box';
              }), function(d) {
                return d.model.index;
              });
              _results = [];
              for (_i = 0, _len = showSig.length; _i < _len; _i++) {
                sig = showSig[_i];
                scope.dataBoxSignals[position].push(sig);
                if ((_ref10 = scope.subs[sig.key]) != null) {
                  _ref10.dispose();
                }
                _results.push(scope.subs[sig.key] = _this.commonService.subscribeSignalValue(sig));
              }
              return _results;
            }, true);
          });
        };
      })(this);
      updateTipPosition = (function(_this) {
        return function(thing, mouse) {
          return scope.tipBoxStyle = {
            top: (mouse.y - 50) + 'px',
            left: mouse.x + 'px'
          };
        };
      })(this);
      raycasterMousemoveCallback = (function(_this) {
        return function(err, intersects, mouse) {
          var equipment, thing, _ref10;
          if (err) {
            return console.error(err);
          }
          if (!((_ref10 = intersects[0]) != null ? _ref10.object : void 0)) {
            scope.tipBoxVisible = false;
            scope.$applyAsync();
            return;
          }
          thing = room.getThingByObject3D(intersects[0].object);
          equipment = _.find(scope.equipments, function(equip) {
            return equip.getPropertyValue('3d-position') === thing.name;
          });
          if (!equipment) {
            return;
          }
          if (thing.userData.selectedPositionOffset) {
            updateTipPosition(thing, mouse);
            scope.tipBoxTitle = equipment != null ? equipment.model.name : void 0;
            scope.tipBoxVisible = true;
          } else {
            scope.tipBoxVisible = false;
          }
          return scope.$applyAsync();
        };
      })(this);
      getEquipmentByPosition = function(position) {
        var equip, result, _i, _len, _ref10;
        result = null;
        if (!scope.equipments) {
          return console.log('err:equipments is null.');
        }
        _ref10 = scope.equipments;
        for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
          equip = _ref10[_i];
          if (equip.getPropertyValue('3d-position') === position) {
            result = equip;
            break;
          }
        }
        return result;
      };
      scope.selectEquipment = (function(_this) {
        return function(thing) {
          var _ref10;
          room.selectThing(thing);
          room.setOutline([thing.showingObject]);
          scope.equipmentDetail = getEquipmentByPosition(thing.name);
          if (((_ref10 = scope.equipmentDetail) != null ? _ref10.model.type : void 0) === "video") {
            return scope.hideDetail = true;
          } else {
            scope.hideDetail = false;
            return scope.openDetail();
          }
        };
      })(this);
      raycasterClickCallback = (function(_this) {
        return function(err, intersects) {
          var thing;
          if (err) {
            return console.error(err);
          }
          thing = room.getThingByObject3D(intersects[0].object);
          _this.commonService.publishEventBus("room-3d-select-equipment", {
            position: thing.name,
            equipment: getEquipmentByPosition(thing.name)
          });
          if (thing.userData.selectedPositionOffset) {
            return scope.selectEquipment(thing);
          }
        };
      })(this);
      checkObj = (function(_this) {
        return function(obj) {
          var thing;
          thing = room.getThingByObject3D(obj);
          if (_.find(scope.equipments, function(equip) {
            return equip.getPropertyValue("3d-position") === thing.name;
          })) {
            return true;
          }
          return false;
        };
      })(this);
      room.setRaycasterCallback({
        click: raycasterClickCallback,
        mousemove: raycasterMousemoveCallback,
        check: checkObj
      });
      if ((_ref10 = scope.modeSubscription) != null) {
        _ref10.dispose();
      }
      scope.modeSubscription = this.commonService.subscribeEventBus("changeShowModel", function(data) {
        var color, key, name, planValue, subType, type, v, value, _i, _len, _ref11, _ref12, _results;
        type = data.message.type;
        subType = data.message.subType;
        scope.changeShowModelType = type;
        scope.changeShowModelSubType = subType;
        if (type === 'object3D') {
          scope.allIconVisible = true;
          scope.wallFlag = false;
        } else {
          scope.allIconVisible = false;
        }
        if (type === "capacityObject3D") {
          room.changeToCapacity();
          colorMaps = (_ref11 = scope.project.dictionary.capacities.getItem(subType.split('-')[1])) != null ? _ref11.model.maps : void 0;
          if (!colorMaps) {
            colorMaps = (_ref12 = scope.project.dictionary.capacities.items[0]) != null ? _ref12.model.maps : void 0;
          }
          if (!colorMaps) {
            colorMaps = [
              {
                color: "#8bc34a",
                value: 0
              }, {
                color: "#ffeb3b",
                value: 50
              }, {
                color: "#ff9800",
                value: 80
              }, {
                color: "#f44336",
                value: 100
              }
            ];
          }
          if (subType === 'ratio-comprehensive') {
            calculateRatioComprehensive();
          }
          _results = [];
          for (key in capacityCollection) {
            value = capacityCollection[key][subType] || 0;
            planValue = capacityCollection[key]['plan-' + subType] || 0;
            if (planValue + value > 100) {
              planValue = 0;
            }
            color = '#ffffff';
            for (_i = 0, _len = colorMaps.length; _i < _len; _i++) {
              v = colorMaps[_i];
              if (value > v.value) {
                color = v.color;
              }
            }
            name = getPosition3DByEquipmentName(key);
            if (name) {
              room.setThingCapacity(name, value, color);
              _results.push(room.setThingCapacity(name, planValue, null, true));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else if (type === "object3D") {
          return room.changeToNormal();
        }
      });
      updateCapacityCollectionLazy = _.throttle((function(_this) {
        return function() {
          var color, key, name, planValue, subType, type, v, value, _i, _len, _results;
          type = scope.changeShowModelType;
          subType = scope.changeShowModelSubType;
          if (type === 'capacityObject3D') {
            if (subType === 'ratio-comprehensive') {
              calculateRatioComprehensive();
            }
            _results = [];
            for (key in capacityCollection) {
              value = capacityCollection[key][subType];
              planValue = capacityCollection[key]['plan-' + subType];
              color = '#ffffff';
              for (_i = 0, _len = colorMaps.length; _i < _len; _i++) {
                v = colorMaps[_i];
                if (value >= v.value) {
                  color = v.color;
                  break;
                }
              }
              name = getPosition3DByEquipmentName(key);
              if (name) {
                room.setThingCapacity(name, value, color);
                _results.push(room.setThingCapacity(name, planValue, null, true));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this), 1000);
      subscribeStationCapacity = (function(_this) {
        return function(stationId) {
          var filter, n, sig, _i, _len, _ref11, _results;
          if (scope.parameters.noCapacity) {
            return;
          }
          capacityCollection = {};
          scope.capacityCollection = capacityCollection;
          _results = [];
          for (_i = 0, _len = capacityList.length; _i < _len; _i++) {
            sig = capacityList[_i];
            filter = {
              user: scope.project.model.user,
              project: scope.project.model.project,
              station: stationId,
              equipment: '+',
              signal: sig
            };
            n = 0;
            if ((_ref11 = scope.capacitySubscribe[sig]) != null) {
              _ref11.dispose();
            }
            _results.push(scope.capacitySubscribe[sig] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, data) {
              var rackName, signal, value;
              if (err) {
                return console.error(err);
              }
              if (capacityList.indexOf(data.message.signal) !== -1) {
                rackName = data.message.equipment;
                signal = data.message.signal;
                value = data.message.value;
                if (!capacityCollection[rackName]) {
                  capacityCollection[rackName] = {};
                }
                capacityCollection[rackName][signal] = value;
                return updateCapacityCollectionLazy();
              }
            }));
          }
          return _results;
        };
      })(this);
      subscribeArray = [];
      scope.eventEquipmentsName = new Set();
      setTipCubeLazy = _.throttle((function(_this) {
        return function() {
          var _ref11;
          if (room != null) {
            room.deleteAllTingTipCube();
          }
          return (_ref11 = scope.eventEquipmentsName) != null ? _ref11.forEach(function(n) {
            var position, thing;
            position = getPosition3DByEquipmentName(n);
            thing = room.getThingByName(position);
            if (thing) {
              return room.setThingTipCube(thing, 0xff0000, 0xffffff);
            }
          }) : void 0;
        };
      })(this), 500);
      scope.disposeSubscribe = function() {
        var i, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = subscribeArray.length; _i < _len; _i++) {
          i = subscribeArray[_i];
          _results.push(i != null ? i.dispose() : void 0);
        }
        return _results;
      };
      processEvent = function(event) {
        var _ref11, _ref12;
        if (!event) {
          return;
        }
        if (event.phase === "start") {
          if ((_ref11 = scope.eventEquipmentsName) != null) {
            _ref11.add(event != null ? event.equipment : void 0);
          }
        } else if (scope.eventEquipmentsName.has(event != null ? event.equipment : void 0)) {
          if ((_ref12 = scope.eventEquipmentsName) != null) {
            _ref12["delete"](event != null ? event.equipment : void 0);
          }
        }
        return setTipCubeLazy();
      };
      subscribeStationEvent = (function(_this) {
        return function() {
          var filter, project, station, subscribe, user, _i, _len, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _results;
          scope.disposeSubscribe();
          if ((_ref11 = scope.eventEquipmentsName) != null) {
            _ref11.clear();
          }
          user = scope.project.model.user;
          project = scope.project.model.project;
          if (((_ref12 = scope.station) != null ? (_ref13 = _ref12.stations) != null ? _ref13.length : void 0 : void 0) > 0) {
            _ref15 = (_ref14 = scope.station) != null ? _ref14.stations : void 0;
            _results = [];
            for (_i = 0, _len = _ref15.length; _i < _len; _i++) {
              station = _ref15[_i];
              filter = {
                user: user,
                project: project,
                station: station.model.station
              };
              subscribe = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, d) {
                return processEvent(d.message);
              });
              _results.push(subscribeArray.push(subscribe));
            }
            return _results;
          } else {
            filter = {
              user: user,
              project: project,
              station: (_ref16 = scope.station) != null ? _ref16.model.station : void 0
            };
            subscribe = _this.commonService.eventLiveSession.subscribeValues(filter, function(err, d) {
              return processEvent(d.message);
            });
            return subscribeArray.push(subscribe);
          }
        };
      })(this);
      loadFun = (function(_this) {
        return function(stationId) {
          var _ref11, _ref12;
          scope.sceneLoadedCompleted = true;
          scope.showDetail = false;
          scope.equipmentDetail = null;
          room.initOutline();
          subscribeStationCapacity(stationId);
          getIcons();
          scope.equipments = [];
          _this.commonService.loadStation(stationId, function(err, station) {
            var staList, _staListLen;
            if (!station) {
              return;
            }
            scope.station = station;
            param = scope.project.getIds();
            param.station = stationId;
            if (station.stations.length > 0) {
              scope.equipments = [];
              staList = _.map([0, 1, 2, 3], function(d) {
                if (d <= 2) {
                  return station.stations[d];
                } else {
                  return station;
                }
              });
              _staListLen = staList.length;
              return _.each(staList, function(sta) {
                return sta != null ? sta.loadEquipments(null, null, function(err2, equips) {
                  var len, list;
                  _staListLen--;
                  list = _.filter(equips, function(d) {
                    return d.model.template.indexOf("hw-collector") !== -1 || d.model.template === "bset-th" || d.model.template === "interline-ac" || d.model.template === "kehua-ups";
                  });
                  if (list.length > 0) {
                    scope.equipments = scope.equipments.concat(list);
                  }
                  if (_staListLen === 0) {
                    len = scope.equipments.length;
                    return _.each(scope.equipments, function(e) {
                      return e.loadProperties(null, function(err3, properties) {
                        len--;
                        if (len === 0) {
                          scope.equipments = _.filter(scope.equipments, function(m) {
                            return m.getPropertyValue("3d-position");
                          });
                          getDataBox();
                          return scope.updateIconsStyle(true);
                        }
                      });
                    });
                  }
                }) : void 0;
              });
            } else {
              return station.loadEquipments(null, null, function(err2, equips) {
                var len, list;
                list = _.filter(equips, function(equip) {
                  return scope.types.indexOf(equip.model.type) !== -1;
                });
                len = list.length;
                return _.each(list, function(e) {
                  return e.loadProperties(null, function(err3, properties) {
                    len--;
                    if (len === 0) {
                      scope.equipments = _.filter(list, function(m) {
                        return m.getPropertyValue("3d-position");
                      });
                      getDataBox();
                      return scope.updateIconsStyle(true);
                    }
                  });
                });
              });
            }
          });
          if ((_ref11 = scope.parameters) != null ? (_ref12 = _ref11.options) != null ? _ref12.eventTipCube : void 0 : void 0) {
            return subscribeStationEvent();
          }
        };
      })(this);
      loadScene = (function(_this) {
        return function(scene, stationId) {
          var preloadCallback, _ref11, _ref12;
          if (!scene || typeof scene !== "string") {
            return;
          }
          if (scene.substr(0, 1) !== "/") {
            scene = "/resource/upload/img/public/" + scene;
          }
          if (scene === _this.d3Url) {
            loadFun(stationId);
            return;
          }
          _this.d3Url = scene;
          preloadCallback = function(preloadValue) {
            scope.preloadValue = preloadValue;
            if (preloadValue === 100) {
              scope.sceneLoadedCompleted = true;
            }
            return scope.$applyAsync();
          };
          scope.sceneLoadedCompleted = false;
          scope.rotateRoom(false);
          return room.loadScene(scene, function() {
            loadFun(stationId);
            return _this.commonService.publishEventBus("3dgameover", {
              scene: scene
            });
          }, preloadCallback, {
            noCache: (_ref11 = scope.parameters) != null ? (_ref12 = _ref11.options) != null ? _ref12.noCache : void 0 : void 0
          });
        };
      })(this);
      scope.time = 5000;
      rotateRoom = (function(_this) {
        return function(flag) {
          scope.flag = flag;
          scope.room.autoRotate(flag, 1);
          _this.commonService.publishEventBus("capacity-rotate-control", flag);
          if (flag) {
            return scope.room.addAnimate('rotateRoom', function() {
              return scope.updateIconsStyle(true);
            });
          } else {
            return scope.room.removeAnimate('rotateRoom');
          }
        };
      })(this);
      scope.rotateRoom = (function(_this) {
        return function(flag) {
          scope.time = 5000;
          return rotateRoom(flag);
        };
      })(this);
      scope.interval = window.setInterval((function(_this) {
        return function() {
          if (scope.time <= 0 && !scope.flag) {
            return rotateRoom(true);
          } else if (scope.time > 0) {
            return scope.time = scope.time - 1000;
          }
        };
      })(this), 1000);
      onKeyDown = (function(_this) {
        return function() {
          return scope.updateIconsStyle(true);
        };
      })(this);
      scope.clickIcon = (function(_this) {
        return function(thing) {
          var current;
          current = getEquipmentByPosition(thing.name);
          if (current) {
            scope.equipmentDetail = current;
            return scope.openDetail();
          }
        };
      })(this);
      window.addEventListener('keydown', onKeyDown, false);
      scope.wallFlag = false;
      scope.setWall = (function(_this) {
        return function() {
          scope.wallFlag = !scope.wallFlag;
          return scope.room.setTopMeshWireframe(scope.wallFlag);
        };
      })(this);
      if ((_ref11 = scope.subsribeStationId) != null) {
        _ref11.dispose();
      }
      scope.subsribeStationId = this.commonService.subscribeEventBus("stationId", (function(_this) {
        return function(msg) {
          var url, _ref12, _ref13, _ref14, _ref15, _ref16, _sta;
          _sta = _.find(scope.project.stations.items, function(sta) {
            return sta.model.station === msg.message.stationId;
          });
          if (((_ref12 = _sta.model) != null ? _ref12.group : void 0) === "use-parent") {
            url = ((_ref13 = _sta.model) != null ? _ref13.d3 : void 0) ? _sta.model.d3 : _sta != null ? (_ref14 = _sta.parentStation) != null ? (_ref15 = _ref14.model) != null ? _ref15.d3 : void 0 : void 0 : void 0;
            return loadScene(url, msg.message.stationId);
          } else {
            return loadScene((_ref16 = _sta.model) != null ? _ref16.d3 : void 0, msg.message.stationId);
          }
        };
      })(this));
      scope.$watch("parameters.types", (function(_this) {
        return function(types) {
          if (types instanceof Array) {
            scope.types = types;
            return scope.$applyAsync();
          }
        };
      })(this));
      init = (function(_this) {
        return function() {
          var obj, stationId, url, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _sta;
          stationId = (_ref12 = scope.station) != null ? (_ref13 = _ref12.model) != null ? _ref13.station : void 0 : void 0;
          if (_.has(scope.controller, "$location")) {
            obj = scope.controller.$location.search();
            if (!stationId && _.has(obj, "station")) {
              stationId = obj.station;
            }
          }
          _sta = _.find(scope.project.stations.items, function(sta) {
            return sta.model.station === stationId;
          });
          if (!_sta) {
            return console.error("没有获取到站点!!");
          }
          if (((_ref14 = _sta.model) != null ? _ref14.group : void 0) === "use-parent") {
            url = ((_ref15 = _sta.model) != null ? _ref15.d3 : void 0) ? _sta.model.d3 : _sta != null ? (_ref16 = _sta.parentStation) != null ? (_ref17 = _ref16.model) != null ? _ref17.d3 : void 0 : void 0 : void 0;
            return loadScene(url, stationId);
          } else {
            return loadScene((_ref18 = _sta.model) != null ? _ref18.d3 : void 0, stationId);
          }
        };
      })(this);
      return init();
    };

    Room3dComponentDirective.prototype.resize = function(scope) {
      return setTimeout(function() {
        return scope.updateIconsStyle(true);
      }, 100);
    };

    Room3dComponentDirective.prototype.dispose = function(scope) {
      var sub, _ref, _ref1, _ref2, _ref3, _ref4;
      this.d3Url = null;
      if ((_ref = scope.room) != null) {
        _ref.dispose();
      }
      if ((_ref1 = scope.modeSubscription) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = scope.subsribeStationId) != null) {
        _ref2.dispose();
      }
      for (sub in scope.subs) {
        if ((_ref3 = scope.subs[sub]) != null) {
          _ref3.dispose();
        }
      }
      for (sub in scope.capacitySubscribe) {
        if ((_ref4 = scope.capacitySubscribe[sub]) != null) {
          _ref4.dispose();
        }
      }
      scope.disposeSubscribe();
      return window.clearInterval(scope.interval);
    };

    return Room3dComponentDirective;

  })(base.BaseDirective);
  return exports = {
    Room3dComponentDirective: Room3dComponentDirective
  };
});
