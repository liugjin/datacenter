// Generated by IcedCoffeeScript 108.0.12

/*
* File: room-3d-component2-directive
* User: David
* Date: 2019/07/10
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "./building", "./tooltip"], function(base, css, view, _, build, tooltip) {
  var Room3dComponent2Directive, exports;
  Room3dComponent2Directive = (function(_super) {
    __extends(Room3dComponent2Directive, _super);

    function Room3dComponent2Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "room-3d-component2";
      Room3dComponent2Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    Room3dComponent2Directive.prototype.setScope = function() {};

    Room3dComponent2Directive.prototype.setCSS = function() {
      return css;
    };

    Room3dComponent2Directive.prototype.setTemplate = function() {
      return view;
    };

    Room3dComponent2Directive.prototype.show = function(scope, element, attrs) {
      var loadEquipment, setBoxSubs, setDetailSubs, setEquipments, setStateSubs, showDataBox, showDetail, updateEquipState, _ref;
      scope.showProcess = false;
      scope.processStyle = {
        left: "-100%"
      };
      scope.signalGroup = {};
      scope.equipMap = {};
      scope.posMap = {};
      scope.detailSubs = {};
      scope.detailData = [];
      scope.detailSignal = {};
      scope.databoxSubs = {};
      scope.databoxData = [];
      scope.databoxSignal = {};
      scope.stateSubs = {};
      scope.stateData = [];
      if (!scope.signalUnitMap) {
        scope.signalUnitMap = {};
        _.each(scope.project.dictionary.signaltypes.items, (function(_this) {
          return function(item) {
            return scope.signalUnitMap[item.model.type] = item.model.unit;
          };
        })(this));
      }
      $(element.find(".canvas-div")[0]).click((function(_this) {
        return function(event) {
          var position;
          if (_.isEmpty(scope.posMap) || scope.building.checkList.length === 0) {
            return;
          }
          position = scope.building.getObjByMouse(event);
          if (_.has(scope.posMap, position)) {
            return showDetail(scope.posMap[position]);
          }
        };
      })(this));
      $(element.find(".canvas-div")[0]).mousemove((function(_this) {
        return function(event) {
          var position;
          if (_.isEmpty(scope.posMap) || scope.building.checkList.length === 0) {
            return;
          }
          position = scope.building.getObjByMouse(event);
          if (_.has(scope.posMap, position)) {
            return scope.tooltip.show(scope.posMap[position], event);
          } else {
            return scope.tooltip.hide();
          }
        };
      })(this));
      $(element.find(".canvas-div")[0]).mouseout((function(_this) {
        return function(event) {
          if (_.isEmpty(scope.posMap) || scope.building.checkList.length === 0) {
            return;
          }
          return scope.tooltip.hide();
        };
      })(this));
      scope.closeDetail = (function(_this) {
        return function(d) {
          scope.detailData = _.filter(scope.detailData, function(item) {
            return item.equipment !== d.equipment;
          });
          return scope.$applyAsync();
        };
      })(this);
      scope.rotateRoom = (function(_this) {
        return function() {
          if (_.isEmpty(scope.posMap) || scope.building.checkList.length === 0) {
            return;
          }
          return scope.building.rotate();
        };
      })(this);
      setBoxSubs = (function(_this) {
        return function(data) {
          var filter;
          _.map(scope.databoxSubs, function(sub) {
            return sub.dispose();
          });
          filter = scope.station.getIds();
          return _.each(data, function(item) {
            var boxs;
            boxs = scope.signalGroup[item.template].box;
            return _.map(boxs, function(sig) {
              var key;
              filter.equipment = item.equipment;
              filter.signal = sig.signal;
              key = item.equipment + "_" + sig.signal;
              return scope.databoxSubs[key] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, signal) {
                var msg;
                if (err) {
                  return console.error("信号报错: " + err);
                }
                msg = signal.message;
                if (!_.has(scope.databoxSignal, msg.equipment)) {
                  scope.databoxSignal[msg.equipment] = {};
                }
                if (typeof msg.value === "number" && !_.isNaN(msg.value)) {
                  scope.databoxSignal[msg.equipment][msg.signal] = msg.value.toFixed(2);
                } else {
                  scope.databoxSignal[msg.equipment][msg.signal] = "--";
                }
                return scope.$applyAsync();
              });
            });
          });
        };
      })(this);
      showDataBox = (function(_this) {
        return function() {
          scope.databoxData = _.filter(_.map(scope.equipMap, function(item, index) {
            var mouse;
            item.sigs = scope.signalGroup[item.template].box;
            item.style = {};
            if (item.sigs.length > 0) {
              mouse = scope.building.getScreenByObj(item.position);
              item.style = {
                "margin-top": mouse.y.toFixed(0) + 'px',
                "margin-left": mouse.x.toFixed(0) + 'px'
              };
            }
            return item;
          }), function(p) {
            return p.sigs.length > 0;
          });
          if (scope.databoxData.length > 0) {
            setBoxSubs(scope.databoxData);
            if (scope.interval) {
              window.clearInterval(scope.interval);
            }
            return scope.interval = window.setInterval(function() {
              scope.databoxData = _.map(scope.databoxData, function(item) {
                var mouse;
                mouse = scope.building.getScreenByObj(item.position);
                item.style = "margin-top:" + mouse.y.toFixed(0) + "px; margin-left:" + mouse.x.toFixed(0) + "px;";
                return item;
              });
              return scope.$applyAsync();
            }, 500);
          }
        };
      })(this);
      setDetailSubs = (function(_this) {
        return function(data) {
          var filter;
          _.map(scope.detailSubs, function(sub) {
            return sub.dispose();
          });
          filter = scope.station.getIds();
          return _.each(data, function(item) {
            var details;
            details = scope.signalGroup[item.template].detail;
            return _.map(details, function(sig) {
              var key;
              filter.equipment = item.equipment;
              filter.signal = sig.signal;
              key = item.equipment + "_" + sig.signal;
              return scope.detailSubs[key] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, signal) {
                var msg;
                if (err) {
                  return console.error("信号报错: " + err);
                }
                msg = signal.message;
                if (!_.has(scope.detailSignal, msg.equipment)) {
                  scope.detailSignal[msg.equipment] = {};
                }
                if (typeof msg.value === "number" && !_.isNaN(msg.value)) {
                  scope.detailSignal[msg.equipment][msg.signal] = msg.value.toFixed(2);
                } else {
                  scope.detailSignal[msg.equipment][msg.signal] = "--";
                }
                return scope.$applyAsync();
              });
            });
          });
        };
      })(this);
      showDetail = (function(_this) {
        return function(data) {
          setDetailSubs(data);
          scope.detailData = _.map(data, function(item, index) {
            item.sigs = scope.signalGroup[item.template].detail;
            item.style = {
              "margin-top": (50 + 170 * index) + 'px',
              "margin-left": "" + (scope.building.width - 200) + "px"
            };
            return item;
          });
          return scope.$applyAsync();
        };
      })(this);
      setStateSubs = (function(_this) {
        return function(data) {
          var filter;
          _.map(scope.stateSubs, function(sub) {
            return sub.dispose();
          });
          filter = scope.station.getIds();
          return _.each(data, function(d) {
            var key;
            filter.equipment = d.equipment;
            filter.signal = d.signal.signal;
            key = filter.equipment + "_" + filter.signal;
            return scope.stateSubs[key] = _this.commonService.signalLiveSession.subscribeValues(filter, function(err, signal) {
              var pos;
              if (err) {
                return console.error("信号报错: " + err);
              }
              pos = scope.equipMap[signal.message.equipment].position;
              return scope.building.updateState(pos, signal.message.value);
            });
          });
        };
      })(this);
      updateEquipState = (function(_this) {
        return function() {
          scope.stateData = _.filter(_.map(scope.equipMap, function(item, index) {
            if (scope.signalGroup[item.template].state.length > 0) {
              item.signal = scope.signalGroup[item.template].state[0];
            } else {
              item.signal = false;
            }
            return item;
          }), function(p) {
            return p.signal;
          });
          return setStateSubs(scope.stateData);
        };
      })(this);
      setEquipments = (function(_this) {
        return function(equipments) {
          var groupSize, groups, signalGroup;
          groups = _.groupBy(equipments, function(d) {
            return d.model.template;
          });
          groupSize = _.map(groups, function(d) {
            return d;
          }).length;
          signalGroup = {};
          return _.mapObject(groups, function(d, key) {
            signalGroup[key] = {};
            return d[0].loadSignals(null, function(err, signals) {
              groupSize--;
              signalGroup[key].detail = _.map(_.filter(signals, function(sig) {
                return sig.model.group === '3d-detail';
              }), function(d) {
                return {
                  signal: d.model.signal,
                  name: d.model.name,
                  unit: scope.signalUnitMap[d.model.unit]
                };
              });
              signalGroup[key].state = _.map(_.filter(signals, function(sig) {
                return sig.model.group === '3d-state';
              }), function(d) {
                return {
                  signal: d.model.signal,
                  name: d.model.name,
                  unit: scope.signalUnitMap[d.model.unit]
                };
              });
              signalGroup[key].box = _.map(_.sortBy(_.filter(signals, function(sig) {
                return sig.model.group === '3d-data-box';
              }), function(d) {
                return d.model.index;
              }), function(p) {
                return {
                  signal: p.model.signal,
                  name: p.model.name,
                  unit: scope.signalUnitMap[p.model.unit]
                };
              });
              if (groupSize === 0) {
                scope.signalGroup = signalGroup;
                return _this.$timeout(function() {
                  showDataBox();
                  return updateEquipState();
                }, 1000);
              }
            });
          });
        };
      })(this);
      loadEquipment = (function(_this) {
        return function() {
          return scope.station.loadEquipments({}, null, function(err, equipments) {
            var count, equipMap, equips;
            equips = [];
            equipMap = {};
            count = equipments.length;
            return _.each(equipments, function(equip) {
              var pos;
              count--;
              pos = equip.getPropertyValue("3d-position");
              if (pos) {
                equips.push(equip);
                equipMap[equip.model.equipment] = {
                  equipment: equip.model.equipment,
                  name: equip.model.name,
                  position: pos,
                  template: equip.model.template
                };
              }
              if (count === 0) {
                scope.equipMap = equipMap;
                scope.posMap = _.groupBy(_.map(scope.equipMap, function(d) {
                  return d;
                }), function(item) {
                  return item.position;
                });
                return setEquipments(equips);
              }
            });
          });
        };
      })(this);
      if (!scope.building) {
        scope.building = new build.Building(element, ".canvas-div");
        scope.tooltip = new tooltip.ToolTip(element);
      }
      if ((_ref = scope.station.model) != null ? _ref.d3 : void 0) {
        return scope.building.loadScene(scope.station.model.d3, (function(_this) {
          return function(resp) {
            if (typeof resp === "number") {
              scope.showProcess = true;
              scope.processStyle = {
                left: "-" + (100 - resp) + "%"
              };
              if (resp === 100) {
                scope.showProcess = false;
              }
              return scope.$applyAsync();
            } else {
              return loadEquipment();
            }
          };
        })(this));
      } else {
        window.clearInterval(scope.interval);
        _.each(scope.detailSubs, (function(_this) {
          return function(sub) {
            return sub.dispose();
          };
        })(this));
        _.each(scope.stateSubs, (function(_this) {
          return function(sub) {
            return sub.dispose();
          };
        })(this));
        _.each(scope.databoxSubs, (function(_this) {
          return function(sub) {
            return sub.dispose();
          };
        })(this));
        return this.display("该站点没有配置模型!!", 500);
      }
    };

    Room3dComponent2Directive.prototype.resize = function(scope) {
      return scope.building.resize();
    };

    Room3dComponent2Directive.prototype.dispose = function(scope) {
      window.clearInterval(scope.interval);
      _.each(scope.detailSubs, (function(_this) {
        return function(sub) {
          return sub.dispose();
        };
      })(this));
      _.each(scope.stateSubs, (function(_this) {
        return function(sub) {
          return sub.dispose();
        };
      })(this));
      _.each(scope.databoxSubs, (function(_this) {
        return function(sub) {
          return sub.dispose();
        };
      })(this));
      scope.equipMap = {};
      scope.posMap = {};
      if (scope.building) {
        return scope.building.dispose();
      }
    };

    return Room3dComponent2Directive;

  })(base.BaseDirective);
  return exports = {
    Room3dComponent2Directive: Room3dComponent2Directive
  };
});
