// Generated by IcedCoffeeScript 108.0.12

/*
* File: signal-configuration-hmu2500-directive
* User: David
* Date: 2020/06/19
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "rx"], function(base, css, view, _, moment, Rx) {
  var SignalConfigurationHmu2500Directive, exports;
  SignalConfigurationHmu2500Directive = (function(_super) {
    __extends(SignalConfigurationHmu2500Directive, _super);

    function SignalConfigurationHmu2500Directive($timeout, $window, $compile, $routeParams, commonService) {
      this.loadEquipInfo = __bind(this.loadEquipInfo, this);
      this.init = __bind(this.init, this);
      this.changeAlarmName = __bind(this.changeAlarmName, this);
      this.postChangeSignal = __bind(this.postChangeSignal, this);
      this.postChangeEvent = __bind(this.postChangeEvent, this);
      this.changeSignalAndEvents = __bind(this.changeSignalAndEvents, this);
      this.show = __bind(this.show, this);
      this.id = "signal-configuration-hmu2500";
      SignalConfigurationHmu2500Directive.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    SignalConfigurationHmu2500Directive.prototype.setScope = function() {};

    SignalConfigurationHmu2500Directive.prototype.setCSS = function() {
      return css;
    };

    SignalConfigurationHmu2500Directive.prototype.setTemplate = function() {
      return view;
    };

    SignalConfigurationHmu2500Directive.prototype.show = function(scope, element, attrs) {
      this.projectId = scope.project.model.project;
      this.userId = scope.project.model.user;
      this.token = scope.controller.$rootScope.user.token;
      this.host = this.$window.origin;
      this.Rx = new Rx.Subject;
      this.equipment = {};
      this.stations = scope.project.stations.items;
      this.ruleOutSignals = ['device-flag', 'repaircout', 'deviceNum', 'online-status'];
      scope.severities = _.sortBy(scope.project.dictionary.eventseverities.items, function(item) {
        return item.model.severity;
      });
      scope.operatorTypes = [
        {
          operator: null,
          name: " "
        }, {
          operator: "==",
          name: "=="
        }, {
          operator: "!=",
          name: "!="
        }, {
          operator: ">",
          name: ">"
        }, {
          operator: ">=",
          name: ">="
        }, {
          operator: "<",
          name: "<"
        }, {
          operator: "<=",
          name: "<="
        }, {
          operator: "in",
          name: "in"
        }, {
          operator: "out",
          name: "out"
        }, {
          operator: "change",
          name: "change"
        }, {
          operator: "boundary",
          name: "boundary"
        }, {
          operator: "like",
          name: "like"
        }
      ];
      scope.btnActive = "sample";
      scope.searchShow = false;
      scope.events = [];
      scope.selectEventseverities = scope.project.dictionary.eventseverities.items;
      this.Rx.debounce(100).subscribe((function(_this) {
        return function() {
          _this.display("操作成功");
          return _this.loadEquipInfo(scope, _this.equipment.model.station, _this.equipment.model.equipment);
        };
      })(this));
      this.init(scope);
      scope.getSeverityName = function(severity) {
        var item;
        item = _.find(scope.severities, function(item) {
          return item.model.severity === severity;
        });
        return item != null ? item.model.name : void 0;
      };
      scope.tickCheckBox2 = (function(_this) {
        return function(signal) {
          return signal.signalInfo.checked = true;
        };
      })(this);
      scope.filterSignal = (function(_this) {
        return function() {
          return function(signal) {
            var text, _ref, _ref1;
            text = (_ref = scope.searchLists) != null ? _ref.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (signal.model.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            if (signal.model.signal.charAt(0) === '_') {
              return false;
            }
            if (_ref1 = signal.model.signal, __indexOf.call(_this.ruleOutSignals, _ref1) >= 0) {
              return false;
            }
          };
        };
      })(this);
      return scope.save = (function(_this) {
        return function() {
          var equipmentId, equipmentName, equipmentTemplateId, judgeExecute, postObj, signals, stationEquip, stationId, stationName, typeId;
          if (_.isEmpty(_this.equipment)) {
            return _this.display("请选择设备");
          }
          signals = scope.equipment.signals.items;
          judgeExecute = _.find(signals, function(signal) {
            return signal.signalInfo.checked === true;
          });
          if (_.isEmpty(judgeExecute)) {
            return _this.display("当前无更改的信号");
          }
          stationId = _this.equipment.station.model.station;
          stationName = _this.equipment.station.model.name;
          equipmentName = _this.equipment.model.name;
          equipmentId = _this.equipment.model.equipment;
          typeId = _this.equipment.model.type;
          equipmentTemplateId = _this.equipment.model.template;
          stationEquip = "" + stationId + "_" + equipmentId;
          if (equipmentTemplateId === stationEquip) {
            return _this.changeSignalAndEvents(scope, equipmentTemplateId, typeId);
          } else {
            postObj = {
              base: "" + typeId + "." + equipmentTemplateId,
              name: "" + stationName + "_" + equipmentName,
              token: _this.token,
              vendor: _this.equipment.equipmentTemplate.model.vendor,
              graphic: _this.equipment.equipmentTemplate.model.graphic,
              image: _this.equipment.image
            };
            return _this.commonService.modelEngine.modelManager.$http.post("" + _this.host + "/model/clc/api/v1/equipmenttemplates/" + _this.userId + "/" + _this.projectId + "/" + typeId + "/" + stationEquip, postObj).then(function(res) {
              _this.equipment.model.template = stationEquip;
              _this.equipment.save();
              return _this.changeSignalAndEvents(scope, stationEquip, typeId);
            });
          }
        };
      })(this);
    };

    SignalConfigurationHmu2500Directive.prototype.changeSignalAndEvents = function(scope, equipmentTemplateId, typeId) {
      return _.each(scope.equipment.signals.items, (function(_this) {
        return function(signal) {
          var eventPostObj, rule, ruleHigh, ruleLow, rules, signalPostObj, _id, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          if (signal.signalInfo.checked) {
            if (signal.model.template === equipmentTemplateId) {
              _id = signal.model._id;
              signalPostObj = {
                name: signal.signalInfo.name,
                _id: _id,
                token: _this.token
              };
            } else {
              signalPostObj = _.extend(angular.copy(signal.model), {
                name: signal.signalInfo.name,
                token: _this.token
              });
              delete signalPostObj._id;
              delete signalPostObj._index;
            }
            _this.postChangeSignal(typeId, equipmentTemplateId, signal, signalPostObj);
            if (((_ref = signal.event.model) != null ? _ref.template : void 0) === equipmentTemplateId || ((_ref1 = signal.event.model) != null ? _ref1.event : void 0) === signal.model.signal) {
              if (signal.signalInfo.eventType === 'sample') {
                console.log('-----修改sample事件----');
                ruleHigh = {
                  title: signal.signalInfo.name + " 高告警",
                  name: "1",
                  severity: Number(signal.event.eventInfo.overSeverity),
                  start: {
                    condition: {
                      operator: ">",
                      values: signal.event.eventInfo.overLimit
                    },
                    delay: 5
                  },
                  end: {}
                };
                ruleLow = {
                  title: signal.signalInfo.name + " 低告警",
                  name: "2",
                  severity: Number(signal.event.eventInfo.overSeverity),
                  start: {
                    condition: {
                      operator: "<",
                      values: signal.event.eventInfo.lowLimit
                    },
                    delay: 5
                  },
                  end: {}
                };
                rules = [ruleHigh, ruleLow];
                eventPostObj = _.extend(angular.copy(signal.event.model), {
                  createtime: "",
                  updatetime: "",
                  enable: signal.event.eventInfo.enable,
                  rules: rules,
                  name: signal.event.eventInfo.name,
                  token: _this.token
                });
                if (((_ref2 = signal.event.model) != null ? _ref2.event : void 0) === signal.model.signal && (((_ref3 = signal.event.model) != null ? _ref3.template : void 0) !== equipmentTemplateId)) {
                  delete eventPostObj._id;
                  delete eventPostObj._index;
                }
                console.log('eventPostObj', eventPostObj);
              } else if (signal.signalInfo.eventType === 'status') {
                if (((_ref4 = signal.event.model) != null ? _ref4.template : void 0) === equipmentTemplateId || ((_ref5 = signal.event.model) != null ? _ref5.event : void 0) === signal.model.signal) {
                  rule = signal.event.model.rules[0];
                  rule.severity = Number(signal.event.eventInfo.severity);
                  rule.title = signal.event.eventInfo.name;
                  rule.start.condition.operator = "==";
                  rule.start.condition.values = parseInt(signal.event.eventInfo.numberLimit);
                  eventPostObj = _.extend(angular.copy(signal.event.model), {
                    enable: signal.event.eventInfo.enable,
                    rules: [rule],
                    name: signal.event.eventInfo.name,
                    token: _this.token
                  });
                  if (((_ref6 = signal.event.model) != null ? _ref6.event : void 0) === signal.model.signal && (((_ref7 = signal.event.model) != null ? _ref7.template : void 0) !== equipmentTemplateId)) {
                    delete eventPostObj._id;
                    delete eventPostObj._index;
                  }
                }
              }
            } else {
              if (signal.signalInfo.eventType === 'sample') {
                console.log('--新增sample事件---');
                ruleHigh = {
                  title: signal.signalInfo.name + " 高告警",
                  name: "1",
                  severity: Number(signal.event.eventInfo.overSeverity),
                  start: {
                    condition: {
                      operator: ">",
                      values: signal.event.eventInfo.overLimit
                    },
                    delay: 5
                  },
                  end: {
                    condition: {
                      operator: "<",
                      values: signal.event.eventInfo.lowLimit
                    },
                    delay: 5
                  }
                };
                ruleLow = {
                  title: signal.signalInfo.name + " 低告警",
                  name: "2",
                  severity: Number(signal.event.eventInfo.overSeverity),
                  start: {
                    condition: {
                      operator: "<",
                      values: signal.event.eventInfo.lowLimit
                    },
                    delay: 5
                  },
                  end: {}
                };
                rules = [ruleHigh, ruleLow];
                eventPostObj = {
                  token: _this.token,
                  name: signal.signalInfo.name + "告警",
                  event: signal.model.signal,
                  expression: {
                    variables: [
                      {
                        key: 'v1',
                        type: 'template-signal-value',
                        value: signal.model.signal
                      }
                    ]
                  },
                  user: _this.$routeParams.user,
                  project: _this.$routeParams.project,
                  type: signal.model.type,
                  template: equipmentTemplateId,
                  enable: signal.event.eventInfo.enable,
                  triggerValue: 'expression',
                  rules: rules
                };
              } else if (signal.signalInfo.eventType === 'status') {
                console.log('--新增status事件---');
                eventPostObj = {
                  token: _this.token,
                  name: signal.signalInfo.name + "告警",
                  event: signal.model.signal,
                  name: signal.event.eventInfo.name,
                  expression: {
                    variables: [
                      {
                        key: 'v1',
                        type: 'template-signal-value',
                        value: signal.model.signal
                      }
                    ]
                  },
                  user: _this.$routeParams.user,
                  project: _this.$routeParams.project,
                  type: signal.model.type,
                  template: equipmentTemplateId,
                  triggerValue: 'expression',
                  rules: [
                    {
                      title: signal.event.eventInfo.name,
                      name: "1",
                      severity: Number(signal.event.eventInfo.severity),
                      start: {
                        condition: {
                          operator: "==",
                          values: signal.event.eventInfo.numberLimit
                        },
                        delay: 5
                      },
                      end: {}
                    }
                  ]
                };
              } else {
                console.log('只处理信号类型为int float enum的告警，当前signal为: ' + signal.model.signal);
              }
            }
            return _this.postChangeEvent(typeId, equipmentTemplateId, signal, eventPostObj);
          }
        };
      })(this));
    };

    SignalConfigurationHmu2500Directive.prototype.postChangeEvent = function(typeId, equipmentTemplateId, signal, postObj) {
      return this.commonService.modelEngine.modelManager.$http.post("" + this.host + "/model/clc/api/v1/equipmentevents/" + this.userId + "/" + this.projectId + "/" + typeId + "/" + equipmentTemplateId + "/" + signal.model.signal, postObj).then((function(_this) {
        return function(res) {
          return _this.Rx.onNext();
        };
      })(this));
    };

    SignalConfigurationHmu2500Directive.prototype.postChangeSignal = function(typeId, equipmentTemplateId, signal, postObj) {
      return this.commonService.modelEngine.modelManager.$http.post("" + this.host + "/model/clc/api/v1/equipmentsignals/" + this.userId + "/" + this.projectId + "/" + typeId + "/" + equipmentTemplateId + "/" + signal.model.signal, postObj).then((function(_this) {
        return function(res) {
          return _this.Rx.onNext();
        };
      })(this));
    };

    SignalConfigurationHmu2500Directive.prototype.changeAlarmName = function(scope, event) {
      var eventName;
      eventName = event.model.name;
      if (event.eventInfo.name) {
        eventName = event.eventInfo.name;
        event.model.name = event.eventInfo.name;
      }
      return eventName;
    };

    SignalConfigurationHmu2500Directive.prototype.init = function(scope) {
      var _ref;
      if ((_ref = scope.subscribeSelectEquip) != null) {
        _ref.dispose();
      }
      return scope.subscribeSelectEquip = this.commonService.subscribeEventBus("selectEquip", (function(_this) {
        return function(msg) {
          if (msg.message.level === "equipment") {
            return _this.loadEquipInfo(scope, msg.message.station, msg.message.id);
          }
        };
      })(this));
    };

    SignalConfigurationHmu2500Directive.prototype.loadEquipInfo = function(scope, stationId, equipId) {
      var nowStation;
      nowStation = _.find(this.stations, function(station) {
        return station.model.station === stationId;
      });
      return nowStation.loadEquipment(equipId, null, (function(_this) {
        return function(err, equip) {
          _this.equipment = equip;
          return _this.equipment.loadEvents(null, function(err, events) {
            scope.events = [];
            _.each(events, function(event) {
              event.eventInfo = {
                name: ""
              };
              return scope.events.push(event);
            });
            scope.$applyAsync();
            return _this.equipment.loadSignals(null, function(err, signals) {
              scope.equipment = _this.equipment;
              return _.each(signals, function(signal) {
                var event, eventInfo, formatArr, _ref, _ref1, _ref2, _ref3, _rules;
                signal.signalInfo = {
                  checked: false,
                  name: ((_ref = signal.model) != null ? _ref.name : void 0) || ""
                };
                signal.event = {};
                if (((_ref1 = signal.model.dataType) === "float" || _ref1 === "int") && signal.model.signal.charAt(0) !== '_' && (_ref2 = signal.model.signal, __indexOf.call(_this.ruleOutSignals, _ref2) < 0)) {
                  signal.signalInfo.eventType = 'sample';
                  eventInfo = {};
                  eventInfo.event = signal.model.signal;
                  eventInfo.name = "";
                  eventInfo.enable = "";
                  eventInfo.type = signal.model.type;
                  eventInfo.overLimit = "";
                  eventInfo.overSeverity = 1;
                  eventInfo.lowLimit = "";
                  eventInfo.lowSeverity = 1;
                  signal.event.eventInfo = eventInfo;
                  event = _.find(scope.events, function(event) {
                    return event.model.event === signal.model.signal;
                  });
                  if (_.isEmpty(event)) {
                    return signal.event.template = "";
                  } else {
                    event.eventInfo.enable = event.model.enable;
                    event.eventInfo.name = event.model.name;
                    event.eventInfo.overLimit = "";
                    event.eventInfo.overSeverity = 1;
                    event.eventInfo.lowLimit = "";
                    event.eventInfo.lowSeverity = 1;
                    _.each(event.model.rules, function(rule) {
                      var _operator;
                      _operator = rule.start.condition.operator;
                      if (_operator === ">" || _operator === ">=") {
                        event.eventInfo.overLimit = rule.start.condition.values;
                        return event.eventInfo.overSeverity = String(rule.severity);
                      } else if (_operator === "<" || _operator === "<=") {
                        event.eventInfo.lowLimit = rule.start.condition.values;
                        return event.eventInfo.lowSeverity = String(rule.severity);
                      }
                    });
                    return signal.event = event;
                  }
                } else if (signal.model.dataType === 'enum' && signal.model.signal.charAt(0) !== '_' && (_ref3 = signal.model.signal, __indexOf.call(_this.ruleOutSignals, _ref3) < 0)) {
                  signal.signalInfo.eventType = 'status';
                  event = _.find(scope.events, function(event) {
                    return event.model.event === signal.model.signal;
                  });
                  if (_.isEmpty(event)) {
                    eventInfo = {
                      formatSelect: []
                    };
                    formatArr = signal.model.format.split(",");
                    _.each(formatArr, function(format) {
                      var f, obj;
                      f = format.split(":");
                      obj = {
                        id: f[0],
                        name: f[1]
                      };
                      return eventInfo.formatSelect.push(obj);
                    });
                    eventInfo.name = "";
                    eventInfo.enable = "";
                    eventInfo.numberLimit = "";
                    eventInfo.severity = "";
                    return signal.event.eventInfo = eventInfo;
                  } else {
                    event.eventInfo = {
                      formatSelect: []
                    };
                    formatArr = signal.model.format.split(",");
                    _.each(formatArr, function(format) {
                      var f, obj;
                      f = format.split(":");
                      obj = {
                        id: f[0],
                        name: f[1]
                      };
                      return event.eventInfo.formatSelect.push(obj);
                    });
                    _rules = event.model.rules[0];
                    event.eventInfo.name = event.model.name;
                    event.eventInfo.enable = event.model.enable;
                    event.eventInfo.severity = String(_rules.severity);
                    event.eventInfo.numberLimit = (_.find(event.eventInfo.formatSelect, function(item) {
                      return Number(_rules.start.condition.values) === Number(item.id);
                    })).id;
                    return signal.event = event;
                  }
                } else {
                  return signal.signalInfo.eventType = 'alarm';
                }
              });
            }, true);
          }, true);
        };
      })(this), true);
    };

    SignalConfigurationHmu2500Directive.prototype.resize = function(scope) {};

    SignalConfigurationHmu2500Directive.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.subscribeSelectEquip) != null ? _ref.dispose() : void 0;
    };

    return SignalConfigurationHmu2500Directive;

  })(base.BaseDirective);
  return exports = {
    SignalConfigurationHmu2500Directive: SignalConfigurationHmu2500Directive
  };
});
