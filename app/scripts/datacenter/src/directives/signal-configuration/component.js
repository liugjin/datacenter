// Generated by IcedCoffeeScript 108.0.12

/*
* File: signal-configuration-directive
* User: David
* Date: 2020/05/09
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "rx"], function(base, css, view, _, moment, Rx) {
  var SignalConfigurationDirective, exports;
  SignalConfigurationDirective = (function(_super) {
    __extends(SignalConfigurationDirective, _super);

    function SignalConfigurationDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.init = __bind(this.init, this);
      this.changeSampleEvents = __bind(this.changeSampleEvents, this);
      this.changeStatusEvents = __bind(this.changeStatusEvents, this);
      this.changeAlarmEvents = __bind(this.changeAlarmEvents, this);
      this.changeAlarmName = __bind(this.changeAlarmName, this);
      this.postChangeEvent = __bind(this.postChangeEvent, this);
      this.show = __bind(this.show, this);
      this.id = "signal-configuration";
      SignalConfigurationDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    SignalConfigurationDirective.prototype.setScope = function() {};

    SignalConfigurationDirective.prototype.setCSS = function() {
      return css;
    };

    SignalConfigurationDirective.prototype.setTemplate = function() {
      return view;
    };

    SignalConfigurationDirective.prototype.show = function(scope, element, attrs) {
      this.projectId = scope.project.model.project;
      this.userId = scope.project.model.user;
      this.token = scope.controller.$rootScope.user.token;
      this.host = this.$window.origin;
      this.Rx = new Rx.Subject;
      this.equipment = {};
      this.stations = scope.project.stations.items;
      scope.btnActive = "sample";
      scope.searchShow = false;
      scope.sampleEvents = [];
      scope.alarmEvents = [];
      scope.statusEvents = [];
      scope.selectEventseverities = scope.project.dictionary.eventseverities.items;
      this.Rx.debounce(100).subscribe((function(_this) {
        return function() {
          return _this.display("操作成功");
        };
      })(this));
      this.init(scope);
      scope.tickCheckBox = (function(_this) {
        return function(event) {
          return event.eventInfo.checked = true;
        };
      })(this);
      scope.filterEvent = (function(_this) {
        return function() {
          return function(event) {
            var text, _ref;
            if (scope.severity && event.severity !== scope.severity) {
              return false;
            }
            text = (_ref = scope.searchLists) != null ? _ref.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            if (event.model.name.toLowerCase().indexOf(text) >= 0) {
              return true;
            }
            return false;
          };
        };
      })(this);
      return scope.save = (function(_this) {
        return function() {
          var equipmentId, equipmentName, equipmentTemplateId, events, judgeExecute, postObj, stationEquip, stationId, stationName, typeId;
          if (_.isEmpty(_this.equipment)) {
            return _this.display("请选择设备");
          }
          events = _this.equipment.events.items;
          judgeExecute = _.find(events, function(event) {
            return event.eventInfo.checked === true;
          });
          if (_.isEmpty(judgeExecute)) {
            return _this.display("当前无更改的信号");
          }
          stationId = _this.equipment.station.model.station;
          stationName = _this.equipment.station.model.name;
          equipmentName = _this.equipment.model.name;
          equipmentId = _this.equipment.model.equipment;
          typeId = _this.equipment.model.type;
          equipmentTemplateId = _this.equipment.model.template;
          stationEquip = "" + stationId + "_" + equipmentId;
          if (equipmentTemplateId === stationEquip) {
            _this.changeSampleEvents(scope, equipmentTemplateId, typeId);
            _this.changeAlarmEvents(scope, equipmentTemplateId, typeId);
            return _this.changeStatusEvents(scope, equipmentTemplateId, typeId);
          } else {
            postObj = {
              base: "" + typeId + "." + equipmentTemplateId,
              name: "" + stationName + "_" + equipmentName,
              token: _this.token,
              vendor: _this.equipment.equipmentTemplate.model.vendor
            };
            return _this.commonService.modelEngine.modelManager.$http.post("" + _this.host + "/model/clc/api/v1/equipmenttemplates/" + _this.userId + "/" + _this.projectId + "/meter/" + stationEquip, postObj).then(function(res) {
              _this.equipment.model.template = stationEquip;
              _this.equipment.save();
              _this.changeSampleEvents(scope, stationEquip, typeId);
              _this.changeAlarmEvents(scope, stationEquip, typeId);
              return _this.changeStatusEvents(scope, stationEquip, typeId);
            });
          }
        };
      })(this);
    };

    SignalConfigurationDirective.prototype.postChangeEvent = function(typeId, equipmentTemplateId, event, postObj) {
      return this.commonService.modelEngine.modelManager.$http.post("" + this.host + "/model/clc/api/v1/equipmentevents/" + this.userId + "/" + this.projectId + "/" + typeId + "/" + equipmentTemplateId + "/" + event.model.event, postObj).then((function(_this) {
        return function(res) {
          event.eventInfo.checked = false;
          return _this.Rx.onNext();
        };
      })(this));
    };

    SignalConfigurationDirective.prototype.changeAlarmName = function(scope, event) {
      var eventName;
      eventName = event.model.name;
      if (event.eventInfo.name) {
        eventName = event.eventInfo.name;
        event.model.name = event.eventInfo.name;
      }
      return eventName;
    };

    SignalConfigurationDirective.prototype.changeAlarmEvents = function(scope, equipmentTemplateId, typeId) {
      return _.each(scope.alarmEvents, (function(_this) {
        return function(alarmEvent) {
          var alarmPostObj, eventName, rule;
          if (alarmEvent.eventInfo.checked) {
            eventName = _this.changeAlarmName(scope, alarmEvent);
            rule = alarmEvent.model.rules[0];
            rule.severity = Number(alarmEvent.eventInfo.severity);
            alarmEvent.eventInfo.eventName = (_.find(scope.selectEventseverities, function(e) {
              return e.model.severity === Number(alarmEvent.eventInfo.severity);
            })).model.name;
            alarmPostObj = {
              _id: alarmEvent.model._id,
              name: eventName,
              token: _this.token,
              group: "alarm",
              expression: {
                variables: alarmEvent.model.expression.variables
              },
              rules: [rule]
            };
            return _this.postChangeEvent(typeId, equipmentTemplateId, alarmEvent, alarmPostObj);
          }
        };
      })(this));
    };

    SignalConfigurationDirective.prototype.changeStatusEvents = function(scope, equipmentTemplateId, typeId) {
      return _.each(scope.statusEvents, (function(_this) {
        return function(statusEvent) {
          var eventName, rule, statusPostObj;
          if (statusEvent.eventInfo.checked) {
            eventName = _this.changeAlarmName(scope, statusEvent);
            rule = statusEvent.model.rules[0];
            rule.severity = Number(statusEvent.eventInfo.severity);
            statusEvent.eventInfo.eventName = (_.find(scope.selectEventseverities, function(e) {
              return e.model.severity === Number(statusEvent.eventInfo.severity);
            })).model.name;
            statusEvent.eventInfo.condition.name = (_.find(statusEvent.eventInfo.formatSelect, function(f) {
              return f.id === rule.start.condition.values;
            })).name;
            statusPostObj = {
              _id: statusEvent.model._id,
              name: eventName,
              token: _this.token,
              enable: statusEvent.model.enable,
              group: "status",
              expression: {
                variables: statusEvent.model.expression.variables
              },
              rules: [rule]
            };
            return _this.postChangeEvent(typeId, equipmentTemplateId, statusEvent, statusPostObj);
          }
        };
      })(this));
    };

    SignalConfigurationDirective.prototype.changeSampleEvents = function(scope, equipmentTemplateId, typeId) {
      return _.each(scope.sampleEvents, (function(_this) {
        return function(sampleEvent) {
          var eventName, lowRule, overRule, rules, samplePostObj, variables;
          if (sampleEvent.eventInfo.checked) {
            if (isNaN(sampleEvent.eventInfo.inputOverLimit) || isNaN(sampleEvent.eventInfo.inputLowLimit)) {
              return _this.display("采集信号的阈值必须填入数字");
            }
            variables = sampleEvent.model.expression.variables[0];
            eventName = _this.changeAlarmName(scope, sampleEvent);
            rules = sampleEvent.model.rules;
            overRule = _.find(rules, function(rule) {
              return rule.start.condition.operator === ">" || rule.start.condition.operator === ">=";
            });
            lowRule = _.find(rules, function(rule) {
              return rule.start.condition.operator === "<" || rule.start.condition.operator === "<=";
            });
            overRule.severity = Number(sampleEvent.eventInfo.overSeverity);
            sampleEvent.eventInfo.overEventName = (_.find(scope.selectEventseverities, function(item) {
              return item.model.severity === overRule.severity;
            })).model.name;
            sampleEvent.eventInfo.lowEventName = (_.find(scope.selectEventseverities, function(item) {
              return item.model.severity === lowRule.severity;
            })).model.name;
            if (sampleEvent.eventInfo.inputOverLimit) {
              overRule.start.condition.values = sampleEvent.eventInfo.inputOverLimit;
              sampleEvent.eventInfo.overLimit = sampleEvent.eventInfo.inputOverLimit;
            }
            lowRule.severity = Number(sampleEvent.eventInfo.lowSeverity);
            if (sampleEvent.eventInfo.inputLowLimit) {
              lowRule.start.condition.values = sampleEvent.eventInfo.inputLowLimit;
              sampleEvent.eventInfo.lowLimit = sampleEvent.eventInfo.inputLowLimit;
            }
            samplePostObj = {
              _id: sampleEvent.model._id,
              name: eventName,
              token: _this.token,
              group: "sample",
              expression: {
                variables: variables
              },
              rules: [overRule, lowRule]
            };
            return _this.postChangeEvent(typeId, equipmentTemplateId, sampleEvent, samplePostObj);
          }
        };
      })(this));
    };

    SignalConfigurationDirective.prototype.init = function(scope) {
      var _ref;
      if ((_ref = scope.subscribeSelectEquip) != null) {
        _ref.dispose();
      }
      return scope.subscribeSelectEquip = this.commonService.subscribeEventBus("selectEquip", (function(_this) {
        return function(msg) {
          var nowStation;
          if (msg.message.level === "equipment") {
            nowStation = _.find(_this.stations, function(station) {
              return station.model.station === msg.message.station;
            });
            return nowStation.loadEquipment(msg.message.id, null, function(err, equip) {
              _this.equipment = equip;
              return _this.equipment.loadSignals(null, function(err, signals) {
                return _this.equipment.loadEvents(null, function(err, events) {
                  scope.sampleEvents = [];
                  scope.alarmEvents = [];
                  scope.statusEvents = [];
                  _.each(events, function(event) {
                    var formatArr, _nowSignal, _rules;
                    event.eventInfo = {
                      checked: false,
                      name: ""
                    };
                    if (event.model.group === "sample") {
                      _.each(event.model.rules, function(rule) {
                        var _operator;
                        _operator = rule.start.condition.operator;
                        event.eventInfo.inputOverLimit = "";
                        event.eventInfo.inputLowLimit = "";
                        if (_operator === ">" || _operator === ">=") {
                          event.eventInfo.overLimit = rule.start.condition.values;
                          event.eventInfo.overSeverity = String(rule.severity);
                          return event.eventInfo.overEventName = (_.find(scope.selectEventseverities, function(e) {
                            return e.model.severity === rule.severity;
                          })).model.name;
                        } else if (_operator === "<" || _operator === "<=") {
                          event.eventInfo.lowLimit = rule.start.condition.values;
                          event.eventInfo.lowSeverity = String(rule.severity);
                          return event.eventInfo.lowEventName = (_.find(scope.selectEventseverities, function(e) {
                            return e.model.severity === rule.severity;
                          })).model.name;
                        }
                      });
                      return scope.sampleEvents.push(event);
                    } else if (event.model.group === "alarm") {
                      event.eventInfo.eventName = (_.find(scope.selectEventseverities, function(e) {
                        return e.model.severity === event.model.rules[0].severity;
                      })).model.name;
                      event.eventInfo.severity = String(event.model.rules[0].severity);
                      return scope.alarmEvents.push(event);
                    } else if (event.model.group === "status") {
                      _nowSignal = _.find(signals, function(sig) {
                        return sig.model.signal === event.model.expression.variables[0].value;
                      });
                      event.eventInfo.formatSelect = [];
                      _rules = event.model.rules[0];
                      formatArr = _nowSignal.model.format.split(",");
                      _.each(formatArr, function(format) {
                        var f, obj;
                        f = format.split(":");
                        obj = {
                          id: f[0],
                          name: f[1]
                        };
                        return event.eventInfo.formatSelect.push(obj);
                      });
                      event.eventInfo.eventName = (_.find(scope.selectEventseverities, function(e) {
                        return e.model.severity === _rules.severity;
                      })).model.name;
                      event.eventInfo.severity = String(_rules.severity);
                      event.eventInfo.condition = _.find(event.eventInfo.formatSelect, function(item) {
                        return _rules.start.condition.values === item.id;
                      });
                      return scope.statusEvents.push(event);
                    }
                  });
                  return scope.$applyAsync();
                }, true);
              });
            });
          }
        };
      })(this));
    };

    SignalConfigurationDirective.prototype.resize = function(scope) {};

    SignalConfigurationDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.subscribeSelectEquip) != null ? _ref.dispose() : void 0;
    };

    return SignalConfigurationDirective;

  })(base.BaseDirective);
  return exports = {
    SignalConfigurationDirective: SignalConfigurationDirective
  };
});
