// Generated by IcedCoffeeScript 108.0.11

/*
* File: signal-gauge-picker-directive
* User: David
* Date: 2019/03/13
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var SignalGaugePickerDirective, exports;
  SignalGaugePickerDirective = (function(_super) {
    __extends(SignalGaugePickerDirective, _super);

    function SignalGaugePickerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createOption = __bind(this.createOption, this);
      this.queryDatabase = __bind(this.queryDatabase, this);
      this.initModeValue = __bind(this.initModeValue, this);
      this.initPicker = __bind(this.initPicker, this);
      this.show = __bind(this.show, this);
      this.id = "signal-gauge-picker";
      SignalGaugePickerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    SignalGaugePickerDirective.prototype.setScope = function() {};

    SignalGaugePickerDirective.prototype.setCSS = function() {
      return css;
    };

    SignalGaugePickerDirective.prototype.setTemplate = function() {
      return view;
    };

    SignalGaugePickerDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      this.initPicker(scope);
      this.initModeValue(scope);
      this.$timeout((function(_this) {
        return function() {
          scope.stationId = scope.station.model.station;
          return scope.selectMode(null, scope.picker[0]);
        };
      })(this), 0);
      if ((_ref = this.subBus) != null) {
        _ref.dispose();
      }
      this.subBus = this.subscribeEventBus('stationId', (function(_this) {
        return function(d) {
          _this.initPicker(scope);
          _this.initModeValue(scope);
          scope.stationId = d.message.stationId;
          return scope.selectMode(null, scope.picker[0]);
        };
      })(this));
      return scope.selectMode = (function(_this) {
        return function($event, option) {
          _this.initModeValue(scope);
          $('.date-value').removeClass('date-active');
          if ($event) {
            $($event.target).addClass('date-active');
          } else {
            _this.$timeout(function() {
              return $(element.find('.date-value')[0]).addClass('date-active');
            }, 0);
          }
          return _this.queryDatabase(scope, option, function(value) {
            var currentData, data;
            if (_.isEmpty(value)) {
              _this.createOption(scope, element, 0);
              return;
            }
            data = (_.values(value))[0];
            currentData = data.values[0];
            console.log(currentData);
            _this.createOption(scope, element, currentData.value.toFixed(2));
            return scope.currentModeValue = {
              Min: currentData.min,
              Average: currentData.avg,
              Max: currentData.max
            };
          });
        };
      })(this);
    };

    SignalGaugePickerDirective.prototype.initPicker = function(scope) {
      return scope.picker = [
        {
          mode: 'day',
          name: '日',
          period: moment().format('YYYY-MM-DD')
        }, {
          mode: 'month',
          name: '月',
          period: moment().format('YYYY-MM')
        }, {
          mode: 'year',
          name: '年',
          period: moment().format('YYYY')
        }
      ];
    };

    SignalGaugePickerDirective.prototype.initModeValue = function(scope) {
      return scope.currentModeValue = {
        Max: '-',
        Min: '-',
        Average: '-'
      };
    };

    SignalGaugePickerDirective.prototype.queryDatabase = function(scope, option, callback) {
      var filter;
      filter = {
        user: this.$routeParams.user,
        project: this.$routeParams.project,
        station: scope.stationId,
        equipment: '_station_efficient',
        signal: 'pue-value',
        period: option.period,
        mode: option.mode
      };
      return this.commonService.reportingService.querySignalStatistics({
        filter: filter
      }, (function(_this) {
        return function(err, records) {
          if (err) {
            return;
          }
          return typeof callback === "function" ? callback(records) : void 0;
        };
      })(this));
    };

    SignalGaugePickerDirective.prototype.createOption = function(scope, element, val) {
      var gauge, option, _ref;
      gauge = element.find(".signal-gauge");
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      option = {
        tooltip: {
          formatter: "{a} <br/>{b} : {c}%"
        },
        series: [
          {
            name: '业务指标',
            type: 'gauge',
            min: 1,
            max: 4,
            axisLine: {
              lineStyle: {
                color: [[0.2, '#43caff'], [0.8, '#1d94ff'], [1, '#10ebf4']],
                width: 8,
                shadowColor: '#e2edf2',
                shadowBlur: 5
              }
            },
            splitLine: {
              length: 14,
              lineStyle: {
                color: "auto"
              }
            },
            axisTick: {
              length: 12,
              lineStyle: {
                color: "auto"
              }
            },
            pointer: {
              length: "70%"
            },
            title: {
              offsetCenter: [0, '-30%'],
              textStyle: {
                color: '#e2edf2',
                fontSize: 20,
                shadowColor: '#e2edf2'
              }
            },
            detail: {
              formatter: '{value}',
              textStyle: {
                fontWeight: 'bolder',
                color: '#43caff'
              }
            },
            data: [
              {
                value: val != null ? val : 0,
                name: 'PUE'
              }
            ]
          }
        ]
      };
      scope.echart = echarts.init(gauge[0]);
      return scope.echart.setOption(option);
    };

    SignalGaugePickerDirective.prototype.resize = function(scope) {
      var _ref;
      return (_ref = scope.echart) != null ? _ref.resize() : void 0;
    };

    SignalGaugePickerDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      return (_ref1 = this.subBus) != null ? _ref1.dispose() : void 0;
    };

    return SignalGaugePickerDirective;

  })(base.BaseDirective);
  return exports = {
    SignalGaugePickerDirective: SignalGaugePickerDirective
  };
});
