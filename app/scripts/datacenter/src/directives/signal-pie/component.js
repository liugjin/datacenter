// Generated by IcedCoffeeScript 108.0.12

/*
* File: signal-pie-directive
* User: bingo
* Date: 2019/05/31
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var SignalPieDirective, exports;
  SignalPieDirective = (function(_super) {
    __extends(SignalPieDirective, _super);

    function SignalPieDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "signal-pie";
      SignalPieDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    SignalPieDirective.prototype.setScope = function() {};

    SignalPieDirective.prototype.setCSS = function() {
      return css;
    };

    SignalPieDirective.prototype.setTemplate = function() {
      return view;
    };

    SignalPieDirective.prototype.show = function($scope, element, attrs) {
      var createChartOption, e, option, _ref;
      createChartOption = (function(_this) {
        return function(value, color) {
          var colorArr, data, option;
          colorArr = [];
          if (color) {
            colorArr.push(color);
          } else {
            colorArr.push("#1d95ff");
          }
          data = [0];
          option = {
            color: colorArr,
            title: {
              text: value || "-",
              textStyle: {
                color: '#fff',
                fontSize: 14
              },
              subtextStyle: {
                fontSize: 14,
                color: '#fff'
              },
              x: 'center',
              y: 'center'
            },
            series: [
              {
                name: "",
                type: 'pie',
                radius: ['70%', '95%'],
                avoidLabelOverlap: false,
                clockwise: true,
                hoverAnimation: false,
                hoverOffset: 0,
                startAngle: 0,
                label: {
                  normal: {
                    show: false,
                    position: 'outside'
                  }
                },
                labelLine: {
                  normal: {
                    show: false
                  }
                },
                data: data
              }
            ]
          };
          return option;
        };
      })(this);
      e = element.find('.signal-pie');
      option = null;
      $scope.myChart = null;
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = echarts.init(e[0]);
      option = createChartOption();
      $scope.myChart.setOption(option);
      $scope.$watch("equipment", (function(_this) {
        return function(equipment) {
          if (!equipment) {
            return;
          }
          return equipment.loadSignals(null, function(err, signals) {
            if (err || signals.length < 1) {
              return;
            }
            return $scope.signal = _.find(signals, function(signal) {
              return signal.model.signal === $scope.parameters.signal;
            });
          }, true);
        };
      })(this));
      return $scope.$watch("signal", (function(_this) {
        return function(signal) {
          var _ref1, _ref2, _ref3, _ref4;
          if (!signal) {
            return;
          }
          signal.model.unitName = (_ref1 = $scope.project) != null ? (_ref2 = _ref1.typeModels.signaltypes.getItem(signal.model.unit)) != null ? (_ref3 = _ref2.model) != null ? _ref3.unit : void 0 : void 0 : void 0;
          if ((_ref4 = $scope.signalSubscrip) != null) {
            _ref4.dispose();
          }
          return $scope.signalSubscrip = _this.commonService.subscribeSignalValue(signal, function(sig) {
            var severity, _ref5, _ref6, _ref7, _ref8;
            if (!sig || !sig.data.value) {
              return;
            }
            severity = (_ref5 = $scope.project) != null ? (_ref6 = _ref5.typeModels.eventseverities.getItem(sig.data.severity)) != null ? _ref6.model : void 0 : void 0;
            sig.data.color = (_ref7 = severity != null ? severity.color : void 0) != null ? _ref7 : '#1d95ff';
            option = createChartOption(sig.data.value.toFixed(1), sig.data.color);
            if (!$scope.myChart) {
              $scope.myChart = echarts.init(e[0]);
            }
            return (_ref8 = $scope.myChart) != null ? _ref8.setOption(option) : void 0;
          });
        };
      })(this));
    };

    SignalPieDirective.prototype.resize = function($scope) {
      var _ref;
      return (_ref = $scope.myChart) != null ? _ref.resize() : void 0;
    };

    SignalPieDirective.prototype.dispose = function($scope) {
      var _ref, _ref1;
      if ((_ref = $scope.myChart) != null) {
        _ref.dispose();
      }
      $scope.myChart = null;
      return (_ref1 = $scope.signalSubscrip) != null ? _ref1.dispose() : void 0;
    };

    return SignalPieDirective;

  })(base.BaseDirective);
  return exports = {
    SignalPieDirective: SignalPieDirective
  };
});
