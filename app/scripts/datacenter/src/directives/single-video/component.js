// Generated by IcedCoffeeScript 108.0.11

/*
* File: single-video-directive
* User: David
* Date: 2019/02/22
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', '../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function($, base, css, view, _, moment) {
  var SingleVideoDirective, exports;
  SingleVideoDirective = (function(_super) {
    __extends(SingleVideoDirective, _super);

    function SingleVideoDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "single-video";
      SingleVideoDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    SingleVideoDirective.prototype.setScope = function() {};

    SingleVideoDirective.prototype.setCSS = function() {
      return css;
    };

    SingleVideoDirective.prototype.setTemplate = function() {
      return view;
    };

    SingleVideoDirective.prototype.show = function($scope, element, attrs) {
      var playInCKPLAYER, playInVXGPLAYER, reconnectalways;
      $scope.errorNum = 0;
      if ($scope.player) {
        $scope.player.dispose();
      }
      $scope.$watch('equipment', (function(_this) {
        return function(equip) {
          if (!equip || !equip.model) {
            if ($scope.player) {
              $scope.player.dispose();
            }
            return;
          }
          return _this.$timeout(function() {
            var src;
            src = (equip != null ? equip.getPropertyValue('url') : void 0) || (equip != null ? equip.getPropertyValue('rtsp') : void 0);
            if (src !== "" && src !== void 0) {
              return playInVXGPLAYER(src, equip);
            } else {
              return playInCKPLAYER();
            }
          }, 100);
        };
      })(this));
      playInCKPLAYER = function() {
        var player, playerId, src, videoObject, _ref, _ref1, _ref2;
        playerId = "player-" + $scope.equipment.model.equipment;
        src = ((_ref = $scope.equipment) != null ? _ref.getPropertyValue('rtmp') : void 0) || ((_ref1 = $scope.equipment) != null ? _ref1.getPropertyValue('http') : void 0);
        if (src === "" || src === void 0) {
          src = (_ref2 = $scope.equipment) != null ? _ref2.getPropertyValue('hls') : void 0;
        }
        if (src === "" || src === void 0) {
          this.prompt('错误', $scope.equipment.model.name + ' rtmp或者hls属性为空');
        }
        videoObject = {
          container: '#' + playerId,
          variable: 'player',
          autoplay: true,
          video: src
        };
        return player = new ckplayer(videoObject);
      };
      playInVXGPLAYER = (function(_this) {
        return function(src, equip) {
          var error, height, playerId, width;
          playerId = "player-" + equip.model.equipment;
          $scope.playerId = playerId;
          width = parseInt($('#' + playerId).width());
          height = parseInt($('#' + playerId).height());
          $scope.$applyAsync();
          try {
            return $scope.player = vxgplayer(playerId, {
              url: '',
              nmf_path: 'media_player.nmf',
              nmf_src: '/lib/vxgplayer/pnacl/Release/media_player.nmf',
              latency: 300,
              aspect_ratio_mode: 1,
              autohide: 3,
              controls: true,
              connection_timeout: 50000,
              connection_udp: 0,
              custom_digital_zoom: false
            }).ready(function() {
              var _ref, _ref1, _ref2, _ref3;
              console.log(' =>ready to player ' + playerId, src);
              $scope.player = vxgplayer(playerId);
              vxgplayer(playerId).src(src);
              vxgplayer(playerId).size(width, height);
              vxgplayer(playerId).autoreconnect(1);
              vxgplayer(playerId).controls(true);
              vxgplayer(playerId).play();
              if (!((_ref = $scope.controller) != null ? (_ref1 = _ref.errorvxgobj) != null ? _ref1.includes(vxgplayer(playerId)) : void 0 : void 0) && ((_ref2 = $scope.controller) != null ? _ref2.errorvxgobj : void 0)) {
                if ((_ref3 = $scope.controller.errorvxgobj) != null) {
                  _ref3.push(vxgplayer(playerId));
                }
              }
              vxgplayer(playerId).onError((function(_this) {
                return function(player) {
                  var itemobj, _i, _len, _ref4, _results;
                  console.log(player.error() + '-' + $scope.errorNum++);
                  if ($scope.controller.errorvxgobj) {
                    _ref4 = $scope.controller.errorvxgobj;
                    _results = [];
                    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                      itemobj = _ref4[_i];
                      _results.push(itemobj.autoreconnect(1));
                    }
                    return _results;
                  }
                };
              })(this));
              return vxgplayer(playerId).onBandwidthError((function(_this) {
                return function(player) {
                  var itemobj, _i, _len, _ref4, _results;
                  console.log(player.error() + '-' + $scope.errorNum++);
                  if ($scope.controller.errorvxgobj) {
                    _ref4 = $scope.controller.errorvxgobj;
                    _results = [];
                    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                      itemobj = _ref4[_i];
                      _results.push(itemobj.autoreconnect(1));
                    }
                    return _results;
                  }
                };
              })(this));
            });
          } catch (_error) {
            error = _error;
            return console.log(error);
          }
        };
      })(this);
      reconnectalways = function(pid) {};
      return $scope.$watch("controller.$rootScope.flag", (function(_this) {
        return function(flag) {
          if ($scope.player) {
            return _this.$timeout(function() {
              var height, width;
              width = parseInt(element.width());
              height = parseInt(element.height());
              return $scope.player.size(width, height);
            }, 100);
          }
        };
      })(this));
    };

    SingleVideoDirective.prototype.resize = function($scope) {
      var win;
      win = angular.element($scope.controller.$window);
      return win.bind('resize', (function(_this) {
        return function() {
          return _this.$timeout(function() {
            return $('.vxgplayer').css("width", "100%");
          }, 500);
        };
      })(this));
    };

    SingleVideoDirective.prototype.dispose = function($scope) {
      var _ref;
      return (_ref = $scope.player) != null ? _ref.dispose() : void 0;
    };

    return SingleVideoDirective;

  })(base.BaseDirective);
  return exports = {
    SingleVideoDirective: SingleVideoDirective
  };
});
