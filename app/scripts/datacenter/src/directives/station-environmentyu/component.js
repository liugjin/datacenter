// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-environment-directive
* User: David
* Date: 2019/06/05
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationEnvironmentyuDirective, exports;
  StationEnvironmentyuDirective = (function(_super) {
    __extends(StationEnvironmentyuDirective, _super);

    function StationEnvironmentyuDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-environmentyu";
      StationEnvironmentyuDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationEnvironmentyuDirective.prototype.setScope = function() {};

    StationEnvironmentyuDirective.prototype.setCSS = function() {
      return css;
    };

    StationEnvironmentyuDirective.prototype.setTemplate = function() {
      return view;
    };

    StationEnvironmentyuDirective.prototype.show = function(scope, element, attrs) {
      var i, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      scope.subscriptions = {};
      scope.templates = {};
      scope.unitys = {};
      if ((_ref = scope.project) != null ? (_ref1 = _ref.dictionary) != null ? (_ref2 = _ref1.signaltypes) != null ? _ref2.items : void 0 : void 0 : void 0) {
        _ref3 = scope.project.dictionary.signaltypes.items;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          i = _ref3[_i];
          scope.unitys[i != null ? i.key : void 0] = (_ref4 = i.model) != null ? _ref4.unit : void 0;
        }
      }
      scope.getUnity = function(d) {
        if (!d || !_.has(scope.unitys, d)) {
          return "--";
        }
        return scope.unitys[d];
      };
      scope.project.loadEquipmentTemplates({
        type: "environmental"
      }, null, (function(_this) {
        return function(err, templates) {
          var template, _j, _len1;
          for (_j = 0, _len1 = templates.length; _j < _len1; _j++) {
            template = templates[_j];
            scope.templates[template.model.type + "." + template.model.template] = template;
          }
          return _this.getStationEnvironment(scope, scope.station);
        };
      })(this));
      scope.selectEquipment = (function(_this) {
        return function(equipment) {
          var _ref5, _ref6, _ref7;
          _this.subscribeSignalValues(scope, equipment);
          if (_ref5 = equipment.model.type + "." + equipment.model.template, __indexOf.call(_this.getTemplatesByBase(scope, "environmental.temperature_humidity_template"), _ref5) >= 0) {
            scope.th = equipment;
          }
          if (_ref6 = equipment.model.type + "." + equipment.model.template, __indexOf.call(_this.getTemplatesByBase(scope, "environmental.leak_sensor_template"), _ref6) >= 0) {
            scope.leak = equipment;
          }
          if (_ref7 = equipment.model.type + "." + equipment.model.template, __indexOf.call(_this.getTemplatesByBase(scope, "environmental.smoke_template"), _ref7) >= 0) {
            return scope.smoke = equipment;
          }
        };
      })(this);
      return scope.getSeverityColor = (function(_this) {
        return function(severity) {
          var _ref5, _ref6, _ref7, _ref8;
          if (!severity) {
            return "";
          }
          return (_ref5 = (_ref6 = scope.project) != null ? (_ref7 = _ref6.typeModels.eventseverities.getItem(severity)) != null ? (_ref8 = _ref7.model) != null ? _ref8.color : void 0 : void 0 : void 0) != null ? _ref5 : "";
        };
      })(this);
    };

    StationEnvironmentyuDirective.prototype.getStationEnvironment = function(scope, station) {
      return this.commonService.loadEquipmentsByType(station, "environmental", (function(_this) {
        return function(err, equipments) {
          var leakTs, leaks, smokeTs, smokes, thTs, ths;
          thTs = _this.getTemplatesByBase(scope, "environmental.temperature_humidity_template");
          leakTs = _this.getTemplatesByBase(scope, "environmental.leak_sensor_template");
          smokeTs = _this.getTemplatesByBase(scope, "environmental.smoke_template");
          ths = _.filter(equipments, function(equip) {
            var _ref;
            return _ref = equip.model.type + "." + equip.model.template, __indexOf.call(thTs, _ref) >= 0;
          });
          leaks = _.filter(equipments, function(equip) {
            var _ref;
            return _ref = equip.model.type + "." + equip.model.template, __indexOf.call(leakTs, _ref) >= 0;
          });
          smokes = _.filter(equipments, function(equip) {
            var _ref;
            return _ref = equip.model.type + "." + equip.model.template, __indexOf.call(smokeTs, _ref) >= 0;
          });
          scope.th = ths.length ? _.max(ths, function(item) {
            return item.model.index;
          }) : null;
          scope.leak = leaks.length ? _.max(leaks, function(item) {
            return item.model.index;
          }) : null;
          scope.smoke = leaks.length ? _.max(smokes, function(item) {
            return item.model.index;
          }) : null;
          scope.equipments = ths.concat(leaks).concat(smokes);
          _this.subscribeSignalValues(scope, scope.th);
          _this.subscribeSignalValues(scope, scope.leak);
          return _this.subscribeSignalValues(scope, scope.smoke);
        };
      })(this));
    };

    StationEnvironmentyuDirective.prototype.filterTemplate = function(scope, id, base) {
      var template;
      template = scope.templates[id];
      if (!template) {
        return false;
      }
      if (template.model.type + "." + template.model.template === base || template.model.base === base) {
        return true;
      }
      return this.filterTemplate(scope, template.model.base, base);
    };

    StationEnvironmentyuDirective.prototype.getTemplatesByBase = function(scope, base) {
      var result, template, templates, _i, _len;
      result = [base];
      templates = _.filter(scope.templates, function(val, key) {
        return val.model.base === base;
      });
      for (_i = 0, _len = templates.length; _i < _len; _i++) {
        template = templates[_i];
        result = result.concat(this.getTemplatesByBase(scope, template.model.type + "." + template.model.template));
      }
      return result;
    };

    StationEnvironmentyuDirective.prototype.subscribeSignalValues = function(scope, equipment) {
      var _ref;
      if (equipment) {
        if ((_ref = scope.subscriptions[equipment.key]) != null) {
          _ref.dispose();
        }
        return scope.subscriptions[equipment.key] = this.commonService.subscribeEquipmentSignalValues(equipment);
      }
    };

    StationEnvironmentyuDirective.prototype.resize = function(scope) {};

    StationEnvironmentyuDirective.prototype.dispose = function(scope) {
      var key, value, _ref, _results;
      _ref = scope.subscriptions;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(value != null ? value.dispose() : void 0);
      }
      return _results;
    };

    return StationEnvironmentyuDirective;

  })(base.BaseDirective);
  return exports = {
    StationEnvironmentyuDirective: StationEnvironmentyuDirective
  };
});
