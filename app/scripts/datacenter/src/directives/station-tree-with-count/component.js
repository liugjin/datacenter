// Generated by IcedCoffeeScript 108.0.12

/*
* File: station-tree-with-count-directive
* User: David
* Date: 2019/07/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationTreeWithCountDirective, exports;
  StationTreeWithCountDirective = (function(_super) {
    __extends(StationTreeWithCountDirective, _super);

    function StationTreeWithCountDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-tree-with-count";
      StationTreeWithCountDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationTreeWithCountDirective.prototype.setScope = function() {
      return {
        filter: "=",
        filterType: "="
      };
    };

    StationTreeWithCountDirective.prototype.setCSS = function() {
      return css;
    };

    StationTreeWithCountDirective.prototype.setTemplate = function() {
      return view;
    };

    StationTreeWithCountDirective.prototype.show = function(scope, element, attrs) {
      var getCount, items, join, keys, loadEquipments, n, nonTypes, roots, sources, station, _i, _len, _ref, _ref1;
      scope.search = "";
      scope.filter = (_ref = scope.parameters.filter) != null ? _ref : true;
      sources = [];
      keys = {};
      getCount = (function(_this) {
        return function(station) {
          var count, sta, _i, _len, _ref1;
          count = keys[station.model.station];
          _ref1 = station.stations;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            sta = _ref1[_i];
            count += getCount(sta);
          }
          return count;
        };
      })(this);
      join = (function(_this) {
        return function(station) {
          var ret, sta, _i, _len, _ref1;
          ret = {
            id: station.model.station,
            key: station.model.station,
            title: station.model.name + "(" + getCount(station) + ")",
            folder: true,
            level: "station"
          };
          ret.icon = _this.getIcon(station.model.type);
          if (station.stations.length) {
            ret.children = [];
            _ref1 = station.stations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              ret.children.push(join(sta));
            }
            ret.expanded = true;
          }
          return ret;
        };
      })(this);
      nonTypes = _.filter(scope.project.dictionary.equipmenttypes.items, function(item) {
        if (scope.parameters.filterType) {
          return item.model.type.charAt(0) === "_" || item.model.visible === false;
        } else {
          return item.model.type.charAt(0) === "_";
        }
      });
      items = _.map(nonTypes, function(item) {
        return item.model.type;
      });
      loadEquipments = (function(_this) {
        return function(station, callback) {
          return station.loadEquipments({
            type: {
              $nin: items
            },
            template: {
              $nin: ['card-sender', 'card_template', 'people_template']
            }
          }, null, function(err, equips) {
            keys[station.model.station] = equips != null ? equips.length : void 0;
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this);
      roots = _.filter(scope.project.stations.items, function(item) {
        return !item.model.parent && item.model.station.charAt(0) !== "_";
      });
      n = 0;
      _ref1 = scope.project.stations.nitems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        station = _ref1[_i];
        loadEquipments(station, (function(_this) {
          return function() {
            var root, tree, _j, _len1, _ref2;
            n++;
            if (n === scope.project.stations.nitems.length) {
              for (_j = 0, _len1 = roots.length; _j < _len1; _j++) {
                root = roots[_j];
                sources.push(join(root));
              }
              element.find('.tree').fancytree({
                checkbox: (_ref2 = scope.parameters.checkbox) != null ? _ref2 : false,
                selectMode: 3,
                source: sources,
                extensions: ["filter"],
                filter: {
                  autoApply: true,
                  autoExpand: true,
                  counter: true,
                  fuzzy: false,
                  hideExpandedCounter: true,
                  hideExpanders: false,
                  highlight: true,
                  leavesOnly: false,
                  nodata: true,
                  mode: "hide"
                },
                activate: function(event, data) {
                  var selectNode;
                  selectNode = data.node;
                  if (event.clientX != null) {
                    return _this.publishEventBus("selectStation", selectNode.data);
                  }
                },
                select: function(event, data) {
                  var node, selectNodes, selects, _k, _len2;
                  selects = [];
                  selectNodes = data.tree.getSelectedNodes();
                  for (_k = 0, _len2 = selectNodes.length; _k < _len2; _k++) {
                    node = selectNodes[_k];
                    selects.push(node.data);
                  }
                  return _this.publishEventBus("checkStations", selects);
                }
              });
              if (scope.station.model.station) {
                tree = $.ui.fancytree.getTree();
                return tree.activateKey(scope.station.model.station);
              }
            }
          };
        })(this));
      }
      scope.filterTree = function() {
        var filterFunc, match, opts, tree;
        tree = $.ui.fancytree.getTree();
        opts = {
          "autoApply": true,
          "autoExpand": true,
          "fuzzy": false,
          "hideExpanders": false,
          "highlight": true,
          "leavesOnly": false,
          "nodata": false
        };
        filterFunc = tree.filterBranches;
        match = scope.search;
        return filterFunc.call(tree, match, opts);
      };
      return scope.clearSearch = function() {
        return scope.search = "";
      };
    };

    StationTreeWithCountDirective.prototype.getIcon = function(type) {
      return {
        html: '<img src="' + this.getComponentPath("icons/" + type + ".svg") + '" class="icon"/>'
      };
    };

    StationTreeWithCountDirective.prototype.resize = function(scope) {};

    StationTreeWithCountDirective.prototype.dispose = function(scope) {};

    return StationTreeWithCountDirective;

  })(base.BaseDirective);
  return exports = {
    StationTreeWithCountDirective: StationTreeWithCountDirective
  };
});
