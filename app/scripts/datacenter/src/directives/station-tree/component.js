// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-tree-directive
* User: David
* Date: 2018/11/27
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationTreeDirective, exports;
  StationTreeDirective = (function(_super) {
    __extends(StationTreeDirective, _super);

    function StationTreeDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-tree";
      StationTreeDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationTreeDirective.prototype.setScope = function() {};

    StationTreeDirective.prototype.setCSS = function() {
      return css;
    };

    StationTreeDirective.prototype.setTemplate = function() {
      return view;
    };

    StationTreeDirective.prototype.show = function(scope, element, attrs) {
      var join, root, roots, sources, tree, _i, _len, _ref, _ref1;
      scope.search = "";
      scope.filter = (_ref = scope.parameters.filter) != null ? _ref : true;
      sources = [];
      join = (function(_this) {
        return function(station) {
          var ret, sta, _i, _len, _ref1;
          ret = {
            id: station.model.station,
            key: station.model.station,
            title: station.model.name,
            folder: true,
            level: "station"
          };
          ret.icon = _this.getIcon(station.model.type);
          if (station.stations.length) {
            ret.children = [];
            _ref1 = station.stations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              ret.children.push(join(sta));
            }
            ret.expanded = true;
          }
          return ret;
        };
      })(this);
      roots = _.filter(scope.project.stations.items, function(item) {
        return !item.model.parent && item.model.station.charAt(0) !== "_";
      });
      for (_i = 0, _len = roots.length; _i < _len; _i++) {
        root = roots[_i];
        sources.push(join(root));
      }
      element.find('.tree').fancytree({
        checkbox: (_ref1 = scope.parameters.checkbox) != null ? _ref1 : false,
        selectMode: 3,
        source: sources,
        extensions: ["filter"],
        filter: {
          autoApply: true,
          autoExpand: true,
          counter: true,
          fuzzy: false,
          hideExpandedCounter: true,
          hideExpanders: false,
          highlight: true,
          leavesOnly: false,
          nodata: true,
          mode: "hide"
        },
        activate: (function(_this) {
          return function(event, data) {
            var selectNode;
            selectNode = data.node;
            if (event.clientX != null) {
              return _this.publishEventBus("selectStation", selectNode.data);
            }
          };
        })(this),
        select: (function(_this) {
          return function(event, data) {
            var node, selectNodes, selects, _j, _len1;
            selects = [];
            selectNodes = data.tree.getSelectedNodes();
            for (_j = 0, _len1 = selectNodes.length; _j < _len1; _j++) {
              node = selectNodes[_j];
              selects.push(node.data);
            }
            return _this.publishEventBus("checkStations", selects);
          };
        })(this)
      });
      if (scope.station.model.station) {
        tree = $.ui.fancytree.getTree();
        tree.activateKey(scope.station.model.station);
      }
      scope.filterTree = function() {
        var filterFunc, match, opts;
        tree = $.ui.fancytree.getTree();
        opts = {
          "autoApply": true,
          "autoExpand": true,
          "fuzzy": false,
          "hideExpanders": false,
          "highlight": true,
          "leavesOnly": false,
          "nodata": false
        };
        filterFunc = tree.filterBranches;
        match = scope.search;
        return filterFunc.call(tree, match, opts);
      };
      return scope.clearSearch = function() {
        return scope.search = "";
      };
    };

    StationTreeDirective.prototype.getIcon = function(type) {
      return {
        html: '<img src="' + this.getComponentPath("icons/" + type + ".svg") + '" class="icon"/>'
      };
    };

    StationTreeDirective.prototype.resize = function(scope) {};

    StationTreeDirective.prototype.dispose = function(scope) {};

    return StationTreeDirective;

  })(base.BaseDirective);
  return exports = {
    StationTreeDirective: StationTreeDirective
  };
});
