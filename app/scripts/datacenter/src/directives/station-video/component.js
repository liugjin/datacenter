// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-video-directive
* User: David
* Date: 2019/08/02
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationVideoDirective, exports;
  StationVideoDirective = (function(_super) {
    __extends(StationVideoDirective, _super);

    function StationVideoDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-video";
      StationVideoDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationVideoDirective.prototype.setScope = function() {};

    StationVideoDirective.prototype.setCSS = function() {
      return css;
    };

    StationVideoDirective.prototype.setTemplate = function() {
      return view;
    };

    StationVideoDirective.prototype.show = function(scope, element, attrs) {
      var n, station, stations, _i, _len, _results;
      scope.videoImg = this.getComponentPath("images/1.mp4");
      scope.playVideo = (function(_this) {
        return function(equipment) {
          var _ref;
          if (equipment === scope.equipment) {
            return;
          }
          scope.equipment = equipment;
          if ((_ref = scope.player) != null) {
            _ref.dispose();
          }
          return equipment.loadProperties(null, function(err, properties) {
            return _this.$timeout(function() {
              var src, _ref1;
              src = (_ref1 = equipment != null ? equipment.getPropertyValue('url') : void 0) != null ? _ref1 : equipment != null ? equipment.getPropertyValue('rtsp') : void 0;
              if (src !== "" && src !== void 0) {
                return _this.playInVXGPLAYER(scope, src);
              } else {
                return _this.playInCKPLAYER(scope);
              }
            }, 100);
          });
        };
      })(this);
      scope.videos = [];
      stations = this.commonService.loadStationChildren(scope.station, true);
      n = 0;
      if (stations != null) {
        _results = [];
        for (_i = 0, _len = stations.length; _i < _len; _i++) {
          station = stations[_i];
          _results.push(station.loadEquipments({
            type: "video"
          }, null, (function(_this) {
            return function(err, videos) {
              var equipment;
              n++;
              scope.videos = scope.videos.concat(videos);
              if (n === stations.length) {
                equipment = _.max(scope.videos, function(equip) {
                  return equip.model.index;
                });
                return scope.playVideo(equipment);
              }
            };
          })(this)));
        }
        return _results;
      }
    };

    StationVideoDirective.prototype.playInCKPLAYER = function(scope) {
      var playerId, src, videoObject, _ref, _ref1, _ref2;
      playerId = "player-" + scope.equipment.model.equipment;
      src = ((_ref = scope.equipment) != null ? _ref.getPropertyValue('rtmp') : void 0) || ((_ref1 = scope.equipment) != null ? _ref1.getPropertyValue('http') : void 0);
      if (src === "" || src === void 0) {
        src = (_ref2 = scope.equipment) != null ? _ref2.getPropertyValue('hls') : void 0;
      }
      if (src === "" || src === void 0) {
        scope.controller.prompt('错误', scope.equipment.model.name + ' rtmp或者hls属性为空');
      }
      videoObject = {
        container: '#' + playerId,
        variable: 'player',
        autoplay: true,
        video: src
      };
      return scope.player = new ckplayer(videoObject);
    };

    StationVideoDirective.prototype.playInVXGPLAYER = function(scope, src) {
      var error, height, playerId, width;
      playerId = "player";
      width = parseInt($('#' + playerId).width());
      height = parseInt($('#' + playerId).height());
      try {
        return vxgplayer(playerId, {
          url: '',
          nmf_path: 'media_player.nmf',
          nmf_src: '/lib/vxgplayer/pnacl/Release/media_player.nmf',
          latency: 300000,
          aspect_ratio_mode: 1,
          autohide: 3,
          controls: true,
          connection_timeout: 5000,
          connection_udp: 0,
          custom_digital_zoom: false
        }).ready(function() {
          console.log(' =>ready to player ' + playerId, src);
          scope.player = vxgplayer(playerId);
          vxgplayer(playerId).src(src);
          vxgplayer(playerId).size(width, height);
          vxgplayer(playerId).autoreconnect(1);
          vxgplayer(playerId).onError((function(_this) {
            return function(player) {
              console.log(player.error());
              return vxgplayer(playerId).autoreconnect(1);
            };
          })(this));
          return vxgplayer(playerId).play();
        });
      } catch (_error) {
        error = _error;
        console.log(error);
        $(".vxgplayer-unsupport").remove();
        return $("#player").append("<video muted='muted' autoplay='autoplay' loop='loop' src='" + scope.videoImg + "' style='height:" + height + "px;width:" + width + "px'></video>");
      }
    };

    StationVideoDirective.prototype.resize = function(scope) {
      return this.$timeout(function() {
        var height, width, _ref;
        width = parseInt($('.video').width());
        height = parseInt($('.video').height());
        return (_ref = scope.player) != null ? _ref.size(width, height) : void 0;
      }, 100);
    };

    StationVideoDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.player) != null ? _ref.dispose() : void 0;
    };

    return StationVideoDirective;

  })(base.BaseDirective);
  return exports = {
    StationVideoDirective: StationVideoDirective
  };
});
