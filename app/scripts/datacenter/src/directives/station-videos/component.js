// Generated by IcedCoffeeScript 108.0.13

/*
* File: station-videos-directive
* User: David
* Date: 2019/09/26
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var StationVideosDirective, exports;
  StationVideosDirective = (function(_super) {
    __extends(StationVideosDirective, _super);

    function StationVideosDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "station-videos";
      StationVideosDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    StationVideosDirective.prototype.setScope = function() {};

    StationVideosDirective.prototype.setCSS = function() {
      return css;
    };

    StationVideosDirective.prototype.setTemplate = function() {
      return view;
    };

    StationVideosDirective.prototype.show = function(scope, element, attrs) {
      var count, n, station, stations, _i, _len, _ref, _results;
      scope.videos = [];
      scope.nums = [0, 1];
      count = (_ref = scope.parameters.count) != null ? _ref : 2;
      stations = this.commonService.loadStationChildren(scope.station, true);
      n = 0;
      _results = [];
      for (_i = 0, _len = stations.length; _i < _len; _i++) {
        station = stations[_i];
        _results.push(station.loadEquipments({
          type: "video"
        }, null, (function(_this) {
          return function(err, videos) {
            n++;
            scope.videos = scope.videos.concat(videos);
            if (n === stations.length) {
              if (scope.videos.length) {
                return scope.nums = scope.videos.slice(0, count);
              }
            }
          };
        })(this)));
      }
      return _results;
    };

    StationVideosDirective.prototype.resize = function(scope) {};

    StationVideosDirective.prototype.dispose = function(scope) {};

    return StationVideosDirective;

  })(base.BaseDirective);
  return exports = {
    StationVideosDirective: StationVideosDirective
  };
});
