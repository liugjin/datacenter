// Generated by IcedCoffeeScript 108.0.13

/*
* File: system-info-directive
* User: David
* Date: 2020/05/23
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "json!../../../setting.json"], function(base, css, view, _, moment, setting) {
  var SystemInfoDirective, exports;
  SystemInfoDirective = (function(_super) {
    __extends(SystemInfoDirective, _super);

    function SystemInfoDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "system-info";
      SystemInfoDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
      this.$routeParams = $routeParams;
      this.projectService = commonService.modelEngine.modelManager.getService("project");
    }

    SystemInfoDirective.prototype.setScope = function() {};

    SystemInfoDirective.prototype.setCSS = function() {
      return css;
    };

    SystemInfoDirective.prototype.setTemplate = function() {
      return view;
    };

    SystemInfoDirective.prototype.show = function(scope, element, attrs) {
      var filter, querySetting, _ref;
      scope.versionInformation = [];
      scope.projectObj = {};
      if ((_ref = scope.disPublish) != null) {
        _ref.dispose();
      }
      scope.fileNameStr = "";
      scope.upgrade = false;
      scope.tmpMyProject = this.commonService.modelEngine.storage.get("myproject");
      scope.warnNotice = this.commonService.modelEngine.storage.set("warn-notice");
      querySetting = (function(_this) {
        return function(settingObj) {
          scope.warnNotice = {
            "defaultFlag": settingObj.defaultFlag
          };
          _this.commonService.modelEngine.storage.set("warn-notice", scope.warnNotice);
          return _this.commonService.publishEventBus("warnNotice", settingObj);
        };
      })(this);
      filter = {};
      filter.user = this.$routeParams.user;
      filter.project = this.$routeParams.project;
      this.projectService.query(filter, null, (function(_this) {
        return function(err, datas) {
          var _base;
          if (datas) {
            if ((_base = datas.setting).menus == null) {
              _base.menus = setting.menus;
            }
            scope.projectObj = datas;
            if (_.isEmpty(scope.projectObj.setting) || scope.projectObj["private"]) {
              scope.setting = setting;
            } else {
              scope.setting = scope.projectObj.setting;
            }
            return querySetting(scope.setting);
          }
        };
      })(this));
      scope.saveSetting = (function(_this) {
        return function() {
          scope.projectObj.setting = scope.setting;
          scope.projectObj.name = scope.setting.name;
          scope.tmpMyProject.name = scope.setting.name;
          return _this.projectService.save(scope.projectObj, function(err, data) {
            querySetting(data.setting);
            _this.commonService.modelEngine.storage.set("myproject", scope.tmpMyProject);
            M.toast({
              html: "操作成功！"
            });
            if (!_this.$routeParams.changeSetting) {
              return _this.$routeParams.changeSetting = true;
            } else {
              return _this.$routeParams.changeSetting = !_this.$routeParams.changeSetting;
            }
          });
        };
      })(this);
      this.commonService.rpcGet("getSystemInfo", null, (function(_this) {
        return function(err, data) {
          return scope.versionInformation = data != null ? data.data : void 0;
        };
      })(this));
      scope.file = (function(_this) {
        return function() {
          var input;
          scope.fileNameStr = "";
          input = element.find('#upload');
          input.click();
          input.click(function() {
            return input.val('');
          });
          return input.on('change', function(evt) {
            var file, _ref1, _ref2;
            file = (_ref1 = input[0]) != null ? (_ref2 = _ref1.files) != null ? _ref2[0] : void 0 : void 0;
            scope.fileNameStr = file.name;
            evt.target.value = null;
            scope.zp = new FormData;
            scope.zp.append("file", file);
            return scope.$applyAsync();
          });
        };
      })(this);
      return scope.confirmSha = (function(_this) {
        return function() {
          var params, url;
          console.log("点击");
          if (scope.fileNameStr !== "") {
            url = scope.controller.$location.$$absUrl.substr(0, scope.controller.$location.$$absUrl.indexOf("#")) + "rpc/upgrade";
            scope.upgrade = true;
            params = {
              token: scope.controller.$rootScope.user.token
            };
            return _this.commonService.uploadService.$http({
              method: 'POST',
              url: url,
              data: scope.zp,
              params: params,
              headers: {
                'Content-Type': void 0
              }
            }).then(function(res) {
              var _ref1;
              if (((_ref1 = res.data) != null ? _ref1.data : void 0) === "ok") {
                _this.display("升级成功,请刷新页面");
                return scope.upgrade = false;
              } else {
                _this.display("升级失败");
                return scope.upgrade = false;
              }
            });
          } else {
            return _this.display("请选择升级包");
          }
        };
      })(this);
    };

    SystemInfoDirective.prototype.resize = function(scope) {};

    SystemInfoDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.disPublish) != null ? _ref.dispose() : void 0;
    };

    return SystemInfoDirective;

  })(base.BaseDirective);
  return exports = {
    SystemInfoDirective: SystemInfoDirective
  };
});
