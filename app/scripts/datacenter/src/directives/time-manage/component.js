// Generated by IcedCoffeeScript 108.0.13

/*
* File: time-manage-directive
* User: David
* Date: 2020/05/29
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var TimeManageDirective, exports;
  TimeManageDirective = (function(_super) {
    __extends(TimeManageDirective, _super);

    function TimeManageDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.init = __bind(this.init, this);
      this.showServiceTime = __bind(this.showServiceTime, this);
      this.show = __bind(this.show, this);
      this.id = "time-manage";
      TimeManageDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    TimeManageDirective.prototype.setScope = function() {};

    TimeManageDirective.prototype.setCSS = function() {
      return css;
    };

    TimeManageDirective.prototype.setTemplate = function() {
      return view;
    };

    TimeManageDirective.prototype.show = function(scope, element, attrs) {
      scope.webTime = "";
      scope.serviceTime = "";
      this.swtichWebTime = "";
      this.switchServiceTime = "";
      scope.crearWebTime = null;
      this.timeFormat = "YYYY年MM月DD日 HH:mm:ss";
      this.init(scope);
      scope.syncTime = (function(_this) {
        return function() {
          clearInterval(scope.crearWebTime);
          scope.crearWebTime = null;
          return _this.commonService.rpcPost("changeServiceTime", {
            time: moment(_this.swtichWebTime).format("YYYY-MM-DD HH:mm:ss")
          }, function(err, res) {
            return _this.showServiceTime(err, res, scope);
          });
        };
      })(this);
      return scope.saveNTPIP = (function(_this) {
        return function() {
          var patt, result;
          clearInterval(scope.crearWebTime);
          scope.crearWebTime = null;
          if (_.isEmpty(scope.ntpip)) {
            return _this.display("NTP IP 地址不能为空");
          }
          patt = /^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$/;
          result = scope.ntpip.match(patt);
          if (result) {
            return _this.commonService.rpcPost("saveNTPIP", {
              ip: scope.ntpip
            }, function(err, res) {
              console.log('res', res);
              return _this.showServiceTime(err, res, scope);
            });
          } else {
            return _this.display("请输入正确的NTP地址");
          }
        };
      })(this);
    };

    TimeManageDirective.prototype.showServiceTime = function(err, res, scope) {
      if (err) {
        return this.display(err);
      }
      this.switchServiceTime = res.data.time;
      scope.serviceTime = moment(res.data.time).format(this.timeFormat);
      this.display("操作成功");
      return scope.crearWebTime = setInterval((function(_this) {
        return function() {
          scope.webTime = moment(new Date()).format(_this.timeFormat);
          _this.switchServiceTime = moment(_this.switchServiceTime).add(1, "second");
          _this.swtichWebTime = moment(new Date());
          scope.serviceTime = moment(_this.switchServiceTime).format(_this.timeFormat);
          return scope.$applyAsync();
        };
      })(this), 1000);
    };

    TimeManageDirective.prototype.init = function(scope) {
      scope.webTime = moment(new Date()).format(this.timeFormat);
      this.commonService.rpcGet("getServiceTime", null, (function(_this) {
        return function(err, res) {
          _this.switchServiceTime = res.data.time;
          return scope.serviceTime = moment(res.data.time).format(_this.timeFormat);
        };
      })(this));
      scope.crearWebTime = setInterval((function(_this) {
        return function() {
          scope.webTime = moment(new Date()).format(_this.timeFormat);
          _this.switchServiceTime = moment(_this.switchServiceTime).add(1, "second");
          _this.swtichWebTime = moment(new Date());
          scope.serviceTime = moment(_this.switchServiceTime).format(_this.timeFormat);
          return scope.$applyAsync();
        };
      })(this), 1000);
      return this.commonService.rpcGet("getNTPIP", null, (function(_this) {
        return function(err, res) {
          var _ref;
          console.log("res", res);
          if (err) {
            return console.log(err);
          }
          if ((_ref = res.data[0]) != null ? _ref.ntpIP : void 0) {
            return scope.ntpip = res.data[0].ntpIP;
          }
        };
      })(this));
    };

    TimeManageDirective.prototype.resize = function(scope) {};

    TimeManageDirective.prototype.dispose = function(scope) {
      return clearInterval(scope.crearWebTime != null);
    };

    return TimeManageDirective;

  })(base.BaseDirective);
  return exports = {
    TimeManageDirective: TimeManageDirective
  };
});
