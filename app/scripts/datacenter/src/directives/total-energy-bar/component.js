// Generated by IcedCoffeeScript 108.0.12

/*
* File: total-energy-bar-directive
* User: David
* Date: 2019/03/06
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "echarts"], function(base, css, view, _, moment, echarts) {
  var TotalEnergyBarDirective, exports;
  TotalEnergyBarDirective = (function(_super) {
    __extends(TotalEnergyBarDirective, _super);

    function TotalEnergyBarDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.createLineCharts = __bind(this.createLineCharts, this);
      this.queryDatabase = __bind(this.queryDatabase, this);
      this.initPicker = __bind(this.initPicker, this);
      this.show = __bind(this.show, this);
      this.id = "total-energy-bar";
      TotalEnergyBarDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    TotalEnergyBarDirective.prototype.setScope = function() {};

    TotalEnergyBarDirective.prototype.setCSS = function() {
      return css;
    };

    TotalEnergyBarDirective.prototype.setTemplate = function() {
      return view;
    };

    TotalEnergyBarDirective.prototype.show = function(scope, element, attrs) {
      var _ref;
      if (!scope.firstload) {
        return;
      }
      this.initPicker(scope);
      this.$timeout((function(_this) {
        return function() {
          return scope.selectMode(null, scope.picker[0]);
        };
      })(this), 0);
      if ((_ref = this.subBus) != null) {
        _ref.dispose();
      }
      this.subBus = this.subscribeEventBus('stationId', (function(_this) {
        return function(d) {
          _this.initPicker(scope);
          scope.stationId = d.message.stationId;
          return scope.selectMode(null, scope.picker[0]);
        };
      })(this));
      return scope.selectMode = (function(_this) {
        return function($event, option) {
          $('.date-value1').removeClass('date-active1');
          if ($event) {
            $($event.target).addClass('date-active1');
          } else {
            _this.$timeout(function() {
              return $(element.find('.date-value1')[0]).addClass('date-active1');
            }, 0);
          }
          return _this.queryDatabase(scope, option, function(value) {
            var currentData, data;
            if (_.isEmpty(value)) {
              _this.createLineCharts(scope, element, 0);
              return;
            }
            data = (_.values(value))[0];
            _.map(data.values, function(value) {
              return value.value = value.value.toFixed(2);
            });
            currentData = data.values;
            return _this.createLineCharts(scope, element, currentData);
          });
        };
      })(this);
    };

    TotalEnergyBarDirective.prototype.initPicker = function(scope) {
      return scope.picker = [
        {
          mode: 'hour',
          name: '日',
          period: {
            $gte: moment().startOf('day'),
            $lt: moment().endOf('day')
          },
          format: 'HH:00'
        }, {
          mode: 'day',
          name: '月',
          period: {
            $gte: moment().startOf('month'),
            $lt: moment().endOf('month')
          },
          format: 'YYYY-MM-DD'
        }, {
          mode: 'month',
          name: '年',
          period: {
            $gte: moment().startOf('year'),
            $lt: moment().endOf('year')
          },
          format: 'YYYY-MM'
        }
      ];
    };

    TotalEnergyBarDirective.prototype.queryDatabase = function(scope, option, callback) {
      var filter;
      filter = {
        user: this.$routeParams.user,
        project: this.$routeParams.project,
        station: scope.stationId,
        equipment: '_station_efficient',
        signal: 'power-value',
        period: option.period,
        mode: option.mode
      };
      return this.commonService.reportingService.querySignalStatistics({
        filter: filter
      }, (function(_this) {
        return function(err, records) {
          if (err) {
            return;
          }
          return typeof callback === "function" ? callback(records) : void 0;
        };
      })(this));
    };

    TotalEnergyBarDirective.prototype.createLineCharts = function(scope, element, data) {
      var line, option, xData, xDataSort, xDataTime, _ref;
      data = _.sortBy(data, function(item) {
        return item.period;
      });
      xDataTime = _.pluck(data, "period");
      xDataSort = _.sortBy(xDataTime, function(date) {
        return date;
      });
      xData = _.pluck(data, "value");
      line = element.find(".signal-line");
      if ((_ref = scope.echart) != null) {
        _ref.dispose();
      }
      option = {
        xAxis: {
          type: 'category',
          boundaryGap: false,
          data: xDataSort,
          axisLine: {
            lineStyle: {
              color: "#A2CAF8"
            }
          },
          splitLine: {
            lineStyle: {
              color: "rgba(0,77,160,1)"
            }
          }
        },
        yAxis: {
          type: 'value',
          axisLine: {
            lineStyle: {
              color: "#A2CAF8"
            }
          },
          splitLine: {
            lineStyle: {
              color: "rgba(0,77,160,1)"
            }
          }
        },
        grid: {
          left: '3%',
          right: '3%',
          bottom: '10%',
          containLabel: true
        },
        tooltip: {
          formatter: "{a} <br/>{b} : {c}%"
        },
        series: [
          {
            name: '总能耗',
            data: xData,
            type: 'line',
            lineStyle: {
              normal: {
                color: "rgba(67,202,255,1)"
              }
            }
          }
        ]
      };
      scope.echart = echarts.init(line[0]);
      return scope.echart.setOption(option);
    };

    TotalEnergyBarDirective.prototype.resize = function(scope) {};

    TotalEnergyBarDirective.prototype.dispose = function(scope) {};

    return TotalEnergyBarDirective;

  })(base.BaseDirective);
  return exports = {
    TotalEnergyBarDirective: TotalEnergyBarDirective
  };
});
