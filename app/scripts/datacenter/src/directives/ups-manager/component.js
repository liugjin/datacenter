// Generated by IcedCoffeeScript 108.0.11

/*
* File: ups-manager-directive
* User: bingo
* Date: 2019/06/03
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var UpsManagerDirective, exports;
  UpsManagerDirective = (function(_super) {
    __extends(UpsManagerDirective, _super);

    function UpsManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "ups-manager";
      UpsManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    UpsManagerDirective.prototype.setScope = function() {};

    UpsManagerDirective.prototype.setCSS = function() {
      return css;
    };

    UpsManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    UpsManagerDirective.prototype.show = function($scope, element, attrs) {
      var changeSelectEquips, equipments, loadEquips, template;
      template = null;
      $scope.colorGroup = ["#f1ba15", "#15f0ed", "#30b1ff"];
      $scope.subscribe = {};
      $scope.selectGroup = {};
      $scope.equipments = [];
      equipments = [];
      $scope.selectEquips = [];
      $scope.project.loadEquipmentTemplates({
        template: $scope.parameters.template
      }, null, (function(_this) {
        return function(err, templates) {
          if (err || templates.length < 1) {
            return;
          }
          template = templates[0];
          return template.loadSignals(null, function(err, signals) {
            var groupSignals;
            if (err || signals.length < 1) {
              return;
            }
            groupSignals = _.groupBy(signals, function(signal) {
              return signal.model.group;
            });
            $scope.selectGroup[$scope.parameters.group[0]] = groupSignals[$scope.parameters.group[0]];
            return $scope.selectGroup[$scope.parameters.group[1]] = groupSignals[$scope.parameters.group[1]];
          });
        };
      })(this));
      $scope.$watch("selectEquips", (function(_this) {
        return function(selectEquips) {
          if (!selectEquips || selectEquips.length < 1) {
            return;
          }
          return _.each($scope.selectEquips, function(equip) {
            return equip.isSelect = true;
          });
        };
      })(this));
      loadEquips = (function(_this) {
        return function() {
          var getStationEquipment;
          getStationEquipment = function(station, callback) {
            var filter, sta, _i, _len, _ref;
            _ref = station.stations;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              sta = _ref[_i];
              getStationEquipment(sta, callback);
            }
            filter = {
              user: station.model.user,
              project: station.model.project,
              station: station.model.station,
              type: $scope.parameters.type
            };
            return station.loadEquipments(filter, null, function(err, mods) {
              return typeof callback === "function" ? callback(mods) : void 0;
            }, false);
          };
          return getStationEquipment($scope.station, function(equips) {
            var diff;
            diff = _.difference(equips, equipments);
            equipments = equipments.concat(diff);
            $scope.$applyAsync();
            if (!equipments || equipments.length < 1) {
              return;
            }
            return _.each(equipments, function(equip) {
              equip.isSelect = false;
              return equip.loadEquipmentTemplate(null, function(err, template) {
                if (err) {
                  return;
                }
                if (!_.contains($scope.equipments, equip)) {
                  $scope.equipments.push(equip);
                  if ($scope.selectEquips.length < 2) {
                    equip.isSelect = true;
                    $scope.selectEquips.push(equip);
                  }
                  return changeSelectEquips();
                }
              });
            });
          });
        };
      })(this);
      $scope.selectEquipment = (function(_this) {
        return function(equipment) {
          if (!equipment) {
            return;
          }
          equipment.isSelect = !equipment.isSelect;
          if (equipment.isSelect) {
            $scope.selectEquips.push(equipment);
          } else {
            $scope.selectEquips.splice($scope.selectEquips.indexOf(equipment), 1);
          }
          if ($scope.selectEquips.length > 2) {
            equipment.isSelect = !equipment.isSelect;
            $scope.selectEquips.splice($scope.selectEquips.indexOf(equipment), 1);
            _this.display("最多只能选两个设备");
            return;
          }
          return changeSelectEquips();
        };
      })(this);
      changeSelectEquips = (function(_this) {
        return function() {
          _.each($scope.selectEquips, function(equip) {
            return equip.isSelect = true;
          });
          $scope.equipment = $scope.selectEquips[0];
          return _.map($scope.selectEquips, function(equip) {
            var _ref;
            if ((_ref = $scope.subscribe[equip.key]) != null) {
              _ref.dispose();
            }
            return $scope.subscribe[equip.key] = _this.commonService.subscribeEquipmentSignalValues(equip, function(signal) {
              var _ref1, _ref2, _ref3;
              if (!signal || !signal.data.value) {
                return;
              }
              return signal.data.unitName = (_ref1 = $scope.project) != null ? (_ref2 = _ref1.typeModels.signaltypes.getItem(signal.data.unit)) != null ? (_ref3 = _ref2.model) != null ? _ref3.unit.toUpperCase() : void 0 : void 0 : void 0;
            });
          });
        };
      })(this);
      $scope.selectEquip = (function(_this) {
        return function(equipment) {
          return $scope.equipment = equipment;
        };
      })(this);
      return loadEquips();
    };

    UpsManagerDirective.prototype.resize = function($scope) {};

    UpsManagerDirective.prototype.dispose = function($scope) {
      return _.mapObject($scope.subscribe, (function(_this) {
        return function(value, key) {
          return value != null ? value.dispose() : void 0;
        };
      })(this));
    };

    return UpsManagerDirective;

  })(base.BaseDirective);
  return exports = {
    UpsManagerDirective: UpsManagerDirective
  };
});
