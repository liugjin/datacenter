// Generated by IcedCoffeeScript 108.0.13

/*
* File: user-manage-directive
* User: David
* Date: 2020/05/11
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment", "tripledes"], function(base, css, view, _, moment, des) {
  var UserManageDirective, exports;
  UserManageDirective = (function(_super) {
    __extends(UserManageDirective, _super);

    function UserManageDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.init = __bind(this.init, this);
      this.roleAuth = __bind(this.roleAuth, this);
      this.getUsersInfo = __bind(this.getUsersInfo, this);
      this.judgeInputFormat = __bind(this.judgeInputFormat, this);
      this.show = __bind(this.show, this);
      this.id = "user-manage";
      UserManageDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    UserManageDirective.prototype.setScope = function() {};

    UserManageDirective.prototype.setCSS = function() {
      return css;
    };

    UserManageDirective.prototype.setTemplate = function() {
      return view;
    };

    UserManageDirective.prototype.show = function(scope, element, attrs) {
      this.userService = this.commonService.modelEngine.modelManager.getService('user');
      this.rolesService = this.commonService.modelEngine.modelManager.getService('roles');
      this.changePasswordService = this.commonService.modelEngine.modelManager.getService("changePassword");
      this.token = scope.controller.$rootScope.user.token;
      this.project = scope.project.model.project;
      this.host = this.$window.origin;
      this.msgCommand = {};
      this.userUrl = "" + this.host + "/model/clc/api/v1/users";
      this.verificateCode = "";
      this.verificateCodeTimeout = null;
      scope.selectRefresh = 0;
      scope.roles = [];
      scope.rightTitle = "用户编辑";
      scope.user = scope.controller.$rootScope.user.user;
      scope.users = [];
      scope.selectUser = {};
      scope.index = 0;
      scope.addUserShow = false;
      this.init(scope);
      scope.changePassword = (function(_this) {
        return function() {
          var tmpPasswordObj;
          scope.selectUser.passwordVerificateCode === _this.verificateCode;
          if (_.isEmpty(scope.selectUser.oldPassword)) {
            return _this.display('请输入旧密码');
          }
          if (_.isEmpty(scope.selectUser.password)) {
            return _this.display('请输入新密码');
          }
          if (_.isEmpty(scope.selectUser.confirmPassword)) {
            return _this.display('请输入确认密码');
          }
          if (_.isEmpty(scope.selectUser.passwordVerificateCode)) {
            return _this.display("请输入验证码");
          }
          if (_this.verificateCode !== scope.selectUser.passwordVerificateCode) {
            return _this.display("输入的验证码有误");
          }
          if (scope.selectUser.password === scope.selectUser.confirmPassword) {
            tmpPasswordObj = {
              user: scope.selectUser.user,
              token: scope.selectUser.token,
              oldPassword: _this.encrypt(scope.selectUser.oldPassword, scope.selectUser.user),
              password: _this.encrypt(scope.selectUser.password, scope.selectUser.user)
            };
            return _this.commonService.modelEngine.modelManager.$http.post("" + _this.host + "/auth/changepassword", tmpPasswordObj).then(function(res, err) {
              if (res.data._err) {
                return _this.display(res.data._err);
              }
              _this.display("用户" + scope.selectUser.name + "修改密码成功");
              $("#user-manage-change-prompt-modal").modal("close");
              scope.selectUser.confirmPassword = "";
              scope.selectUser.oldPassword = "";
              scope.selectUser.password = "";
              return scope.selectUser.passwordVerificateCode = "";
            });
          } else {
            return _this.display('新密码与确认密码不一致');
          }
        };
      })(this);
      scope.deleteUser = (function(_this) {
        return function(user, event) {
          event.stopPropagation();
          return scope.prompt("是否删除该用户", "注：点击确定后无法撤销该操作", function(cancel) {
            if (!cancel) {
              return;
            }
            if (user.user === "admin") {
              return _this.display("无法删除超级管理员");
            }
            return _this.userService.remove({
              user: user.user,
              _id: user._id
            }, function(err, data) {
              if (err) {
                console.log('delete user err:', err);
                return _this.display("删除失败");
              } else {
                _this.display("已成功删除该用户");
                return scope.users = _.filter(scope.users, function(item) {
                  return item._id !== user._id;
                });
              }
            });
          });
        };
      })(this);
      scope.editUser = (function(_this) {
        return function(user, index) {
          scope.index = index;
          scope.selectUser = user;
          scope.addUserShow = false;
          scope.selectUser.verificateCode = "";
          return _this.verificateCode = "";
        };
      })(this);
      scope.addUser = (function(_this) {
        return function() {
          scope.addUserShow = true;
          return scope.selectUser = {};
        };
      })(this);
      scope.saveUser = (function(_this) {
        return function() {
          var judge, userId;
          judge = _this.judgeInputFormat(scope);
          if (_.isEmpty(scope.selectUser.verificateCode)) {
            return _this.display("请输入验证码");
          }
          if (_.isEmpty(judge) && _this.verificateCode === scope.selectUser.verificateCode) {
            userId = scope.selectUser.user;
            return _this.userService.update(scope.selectUser, function(err, data) {
              var nowRole, rolesLength;
              nowRole = _.find(scope.roles, function(role) {
                return role.role === scope.selectUser.auth;
              });
              scope.selectUser.authName = nowRole.name;
              _.each(scope.roles, function(role) {
                return role.users = _.filter(role.users, function(item) {
                  return item !== userId;
                });
              });
              rolesLength = scope.roles.length;
              nowRole.users.push(userId);
              return _.each(scope.roles, function(role, num) {
                return _this.rolesService.save(role, function(err, data) {
                  if (err) {
                    return _this.display(err);
                  }
                  if ((num + 1) === rolesLength) {
                    _this.display("修改成功");
                    scope.selectUser.user = userId;
                    scope.selectRefresh++;
                    return _this.init(scope);
                  }
                });
              });
            });
          } else if (_.isEmpty(judge) && _this.verificateCode !== scope.selectUser.verificateCode) {
            return _this.display("输入的验证码有误");
          }
        };
      })(this);
      scope.getVerificationCode = (function(_this) {
        return function() {
          var msg, phone, romdomVerification, tailPhone;
          console.log("1234");
          msg = _.find(_this.msgCommand.model.parameters, function(item) {
            return item.key === "msg";
          });
          phone = _.find(_this.msgCommand.model.parameters, function(item) {
            return item.key === "phone";
          });
          phone.value = scope.selectUser.phone;
          if (scope.user === "admin") {
            phone.value = scope.controller.$rootScope.user.phone;
          }
          tailPhone = phone.value.slice(7, 11);
          romdomVerification = String(Math.random()).slice(2, 6);
          msg.value = "【华远云联】验证码：" + romdomVerification + "，五分钟内有效";
          _this.verificateCode = romdomVerification;
          _this.commonService.executeCommand(_this.msgCommand);
          _this.display("验证码已发送至尾号" + tailPhone);
          if (_this.verificateCodeTimeout) {
            clearTimeout(_this.verificateCodeTimeout);
          }
          return _this.verificateCodeTimeout = setTimeout(function() {
            return _this.verificateCode = "";
          }, 30000);
        };
      })(this);
      return scope.registerUser = (function(_this) {
        return function() {
          var judge, postData;
          judge = _this.judgeInputFormat(scope);
          if (_.isEmpty(judge)) {
            if (!scope.selectUser.password || !scope.selectUser.confirmPassword) {
              return _this.display("密码和确认密码均不能为空");
            }
            if (scope.selectUser.password !== scope.selectUser.confirmPassword) {
              return _this.display("新密码与确认密码不一致");
            }
            postData = _.map([scope.selectUser], function(user) {
              return {
                email: user.email,
                name: user.name,
                password: _this.encrypt(user.password, user.user),
                phone: user.phone,
                user: user.user
              };
            });
            return _this.commonService.modelEngine.modelManager.$http.post("" + _this.host + "/auth/register", postData[0]).then(function(res) {
              if (res.data._err) {
                return _this.display(res.data._err);
              }
              console.log("用户" + res.data.name + "注册成功");
              return _this.roleAuth(scope, scope.selectUser.user, scope.selectUser.auth);
            });
          }
        };
      })(this);
    };

    UserManageDirective.prototype.judgeInputFormat = function(scope) {
      if (!scope.selectUser.user) {
        return this.display("用户名不能为空");
      }
      if (!scope.selectUser.name) {
        return this.display("姓名不能为空");
      }
      if (!scope.selectUser.email) {
        return this.display("邮箱为空或邮箱格式有误，请查证");
      }
      if (!scope.selectUser.phone || scope.selectUser.phone.length !== 11) {
        return this.display("手机号码必须是11位数字");
      }
    };

    UserManageDirective.prototype.getUsersInfo = function(scope) {
      var addPowerInfo;
      addPowerInfo = (function(_this) {
        return function() {
          var role, _i, _len, _ref, _results;
          _ref = scope.roles;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            role = _ref[_i];
            _results.push(_.each(scope.users, function(user) {
              if (_.find(role.users, function(item) {
                return item === user.user;
              })) {
                user.auth = role.role;
                return user.authName = role.name;
              }
            }));
          }
          return _results;
        };
      })(this);
      if (scope.user === "admin") {
        return this.commonService.modelEngine.modelManager.$http.get("" + this.userUrl + "?token=" + this.token).then((function(_this) {
          return function(res) {
            scope.users = res.data;
            scope.selectUser = scope.users[0];
            return addPowerInfo();
          };
        })(this));
      } else {
        return this.commonService.modelEngine.modelManager.$http.get("" + this.userUrl + "/" + scope.user + "?token=" + this.token).then((function(_this) {
          return function(res) {
            scope.users = [res.data];
            scope.selectUser = scope.users[0];
            return addPowerInfo();
          };
        })(this));
      }
    };

    UserManageDirective.prototype.encrypt = function(password, username) {
      if (!password || !username) {
        return;
      }
      return des.DES.encrypt(password, username).toString();
    };

    UserManageDirective.prototype.roleAuth = function(scope, userId, userRole) {
      var roleObj;
      roleObj = _.find(scope.roles, function(role) {
        return role.role === userRole;
      });
      roleObj.users.push(userId);
      return this.rolesService.save(roleObj, (function(_this) {
        return function(err, data) {
          _this.display(err, '注册成功！');
          return _this.init(scope);
        };
      })(this));
    };

    UserManageDirective.prototype.init = function(scope) {
      this.commonService.modelEngine.modelManager.$http.get("" + this.host + "/model/clc/api/v1/roles/admin/" + this.project + "?token=" + this.token).then((function(_this) {
        return function(res) {
          scope.roles = res.data;
          scope.selectRefresh++;
          return _this.getUsersInfo(scope);
        };
      })(this));
      return scope.msgEquipment = scope.station.loadEquipment(scope.parameters.msg || "_msg", null, (function(_this) {
        return function(err, equip) {
          return equip.loadCommands(null, function(err, commands) {
            var msgCommand;
            msgCommand = scope.parameters.command || "SMS-comand";
            return _this.msgCommand = _.find(commands, function(item) {
              return item.model.command === msgCommand;
            });
          });
        };
      })(this));
    };

    UserManageDirective.prototype.resize = function(scope) {};

    UserManageDirective.prototype.dispose = function(scope) {
      if (this.verificateCodeTimeout) {
        return clearTimeout(this.verificateCodeTimeout);
      }
    };

    return UserManageDirective;

  })(base.BaseDirective);
  return exports = {
    UserManageDirective: UserManageDirective
  };
});
