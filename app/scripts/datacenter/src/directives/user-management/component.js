// Generated by IcedCoffeeScript 108.0.13

/*
* File: user-management-directive
* User: David
* Date: 2019/04/01
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var UserManagementDirective, exports;
  UserManagementDirective = (function(_super) {
    __extends(UserManagementDirective, _super);

    function UserManagementDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.selectStation = __bind(this.selectStation, this);
      this.show = __bind(this.show, this);
      this.id = "user-management";
      UserManagementDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    UserManagementDirective.prototype.setScope = function() {};

    UserManagementDirective.prototype.setCSS = function() {
      return css;
    };

    UserManagementDirective.prototype.setTemplate = function() {
      return view;
    };

    UserManagementDirective.prototype.show = function(scope, element, attrs) {
      scope.currentpeople = {};
      scope.peoplesex = {
        0: {
          type: '0',
          name: '男'
        },
        1: {
          type: '1',
          name: '女'
        }
      };
      scope.peopleposition = {
        0: {
          type: '0',
          name: '普通员工'
        },
        1: {
          type: '1',
          name: '经理'
        }
      };
      scope.peoplegroup = {
        0: {
          type: '0',
          name: '默认部门'
        },
        1: {
          type: '1',
          name: '研发部'
        }
      };
      scope.peopletitle = {
        0: {
          type: '0',
          name: '研发'
        },
        1: {
          type: '1',
          name: '市场'
        }
      };
      scope.peoples = [];
      this.station = this.project.stations.roots[0];
      this.selectStation(this.station, scope.peoples);
      scope.selectPeople = (function(_this) {
        return function(people) {
          people.loadProperties();
          scope.currentpeople.peopleid = people.propertyValues['people-id'];
          scope.currentpeople.peoplename = people.propertyValues['people-name'];
          scope.currentpeople.peopleimgsrc = people.propertyValues['people-imgsrc'];
          scope.currentpeople.peoplemobile = people.propertyValues['people-mobile'];
          scope.currentpeople.peoplesex = people.propertyValues['people-sex'];
          scope.currentpeople.peopleposition = people.propertyValues['people-position'];
          scope.currentpeople.peoplegroup = people.propertyValues['people-group'];
          scope.currentpeople.peopletitle = people.propertyValues['people-title'];
          scope.currentpeople.peopleemail = people.propertyValues['people-email'];
          scope.currentpeople.peopledescribe = people.propertyValues['people-describe'];
          scope.currentpeople.peopletelephone = people.propertyValues['people-telephone'];
          return scope.currentpeople.peopleSelected = true;
        };
      })(this);
      scope.addPeople = (function(_this) {
        return function(obj) {
          scope.currentpeople.peopleSelected = false;
          scope.instance = M.Modal.init(element.find('#door-people-modal'));
          _this.peopleSelected = false;
          if (obj != null) {
            return scope.currentpeople = obj;
          } else {
            return scope.currentpeople = {
              user: _this.station.model.user,
              project: _this.station.model.project,
              station: _this.station.model.station,
              peopleid: moment().format("YYYYMMDDHHmmssSSS"),
              peoplename: 'new-people-name',
              peopleimgsrc: '',
              peoplemobile: '',
              peoplesex: '0',
              peopleposition: '0',
              peoplegroup: '0',
              peopletitle: '0',
              peopleemail: '',
              peopledescribe: '',
              peopletelephone: ''
            };
          }
        };
      })(this);
      scope.saveEquipment = (function(_this) {
        return function(obj, callback) {
          var PhoneReg, mailReg, message, model, title;
          PhoneReg = /(^1[3|4|5|7|8]\d{9}$)|(^09\d{8}$)/;
          mailReg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.|-]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;
          if (!scope.currentpeople.peopleid) {
            title = "ID不能为空";
            message = "ID不能为空，请输入ID。";
            return scope.prompt(title, message);
          }
          if (!scope.currentpeople.peoplename) {
            title = "姓名不能为空";
            message = "姓名不能为空，请输入姓名。";
            return scope.prompt(title, message);
          }
          if (!scope.currentpeople.peoplemobile || (!PhoneReg.test(scope.currentpeople.peoplemobile))) {
            title = "手机号码不正确";
            message = "请填写有效的手机号码。";
            return scope.prompt(title, message);
          }
          if (!scope.currentpeople.peopleemail || (!mailReg.test(scope.currentpeople.peopleemail))) {
            title = "邮箱格式不正确";
            message = "请填写正确的邮箱地址。";
            return scope.prompt(title, message);
          }
          model = {
            user: scope.currentpeople.user,
            project: scope.currentpeople.project,
            station: scope.currentpeople.station,
            equipment: scope.currentpeople.peopleid,
            name: scope.currentpeople.peoplename,
            type: 'access',
            vendor: 'huayuan-iot',
            enable: true,
            template: 'people_template'
          };
          _this.equipment = null;
          _this.equipment = _this.station.createEquipment(model, null);
          return _this.equipment.loadProperties(null, function(err, data) {
            _this.equipment.setPropertyValue('people-id', scope.currentpeople.peopleid);
            _this.equipment.setPropertyValue('people-name', scope.currentpeople.peoplename);
            _this.equipment.setPropertyValue('people-sex', scope.currentpeople.peoplesex);
            _this.equipment.setPropertyValue('people-imgsrc', scope.currentpeople.peopleimgsrc);
            _this.equipment.setPropertyValue('people-mobile', scope.currentpeople.peoplemobile);
            _this.equipment.setPropertyValue('people-email', scope.currentpeople.peopleemail);
            _this.equipment.setPropertyValue('people-position', scope.currentpeople.peopleposition);
            _this.equipment.setPropertyValue('people-group', scope.currentpeople.peoplegroup);
            _this.equipment.setPropertyValue('people-title', scope.currentpeople.peopletitle);
            _this.equipment.setPropertyValue('people-telephone', scope.currentpeople.peopletelephone);
            _this.equipment.setPropertyValue('people-describe', scope.currentpeople.peopledescribe);
            _this.equipment.save(data);
            scope.peoples.splice(0, scope.peoples.length);
            _this.selectStation(_this.station, scope.peoples);
            return $('#door-people-modal').modal('close');
          });
        };
      })(this);
      scope.removeEquipment = (function(_this) {
        return function(callback) {
          var message, title;
          console.log(scope.currentpeople.peopleid);
          _this.equipment = _.find(_this.station.equipments.items, function(item) {
            return item.model.equipment === scope.currentpeople.peopleid;
          });
          title = "删除设备确认: " + _this.equipment.model.name;
          message = "请确认是否删除设备: " + _this.equipment.model.name + "？删除后设备和数据将从系统中移除不可恢复！";
          return scope.prompt(title, message, function(ok) {
            if (!ok) {
              return;
            }
            return _this.equipment.remove(function(err, model) {
              scope.peoples.splice(0, scope.peoples.length);
              _this.selectStation(_this.station, scope.peoples);
              return $('#door-people-modal').modal('close');
            });
          });
        };
      })(this);
      return scope.sortBy = function(predicate) {
        if (scope.predicate === predicate) {
          return scope.reverse = !scope.reverse;
        } else {
          scope.predicate = predicate;
          return scope.reverse = true;
        }
      };
    };

    UserManagementDirective.prototype.selectStation = function(station, peoples) {
      return station != null ? station.loadEquipments({
        type: "access",
        template: "people_template"
      }, null, (function(_this) {
        return function(err, model) {
          var equipmitem, _i, _len;
          for (_i = 0, _len = model.length; _i < _len; _i++) {
            equipmitem = model[_i];
            if (equipmitem != null) {
              equipmitem.loadProperties();
            }
            peoples.push(equipmitem);
          }
          return console.log("peoples1", peoples);
        };
      })(this)) : void 0;
    };

    UserManagementDirective.prototype.resize = function(scope) {};

    UserManagementDirective.prototype.dispose = function(scope) {};

    return UserManagementDirective;

  })(base.BaseDirective);
  return exports = {
    UserManagementDirective: UserManagementDirective
  };
});
