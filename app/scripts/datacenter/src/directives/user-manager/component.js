// Generated by IcedCoffeeScript 108.0.13

/*
* File: user-manager-directive
* User: bingo
* Date: 2019/03/29
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var UserManagerDirective, exports;
  UserManagerDirective = (function(_super) {
    __extends(UserManagerDirective, _super);

    function UserManagerDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "user-manager";
      UserManagerDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    UserManagerDirective.prototype.setScope = function() {};

    UserManagerDirective.prototype.setCSS = function() {
      return css;
    };

    UserManagerDirective.prototype.setTemplate = function() {
      return view;
    };

    UserManagerDirective.prototype.show = function($scope, element, attrs) {
      var input, loadEquipsByTemplate, preview, selectEquips, uploadImage, value, _i, _len, _ref;
      element.css("display", "block");
      preview = element.find('.img-preview');
      input = element.find('input[type="file"]');
      $scope.setting = setting;
      $scope.dir = setting.urls.uploadUrl;
      $scope.addImg = this.getComponentPath('image/add.svg');
      $scope.deleteImg = this.getComponentPath('image/delete.svg');
      $scope.editImg = this.getComponentPath('image/edit.svg');
      $scope.closeImg = this.getComponentPath('image/close.svg');
      $scope.refreshImg = this.getComponentPath('image/refresh.svg');
      $scope.saveImg = this.getComponentPath('image/save.svg');
      $scope.uploadImg = this.getComponentPath('image/upload.svg');
      $scope.linkImg = this.getComponentPath('image/link.svg');
      $scope.downImg = this.getComponentPath('image/download.svg');
      $scope.peopleEquips = [];
      $scope.pageIndex = 1;
      $scope.pageItems = 10;
      $scope.accept = "image/*";
      $scope.showLink = false;
      $scope.select = false;
      selectEquips = [];
      $scope.vendor = "hikvision";
      $scope.manufactorArr = [];
      $scope.manufacturer = $scope.project.typeModels.vendors.items;
      _ref = $scope.manufacturer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        $scope.manufactorObj = {
          name: null,
          vendor: null
        };
        $scope.manufactorObj.name = value.model.name;
        $scope.manufactorObj.vendor = value.model.vendor;
        $scope.manufactorArr.push($scope.manufactorObj);
      }
      $scope.project.loadEquipmentTemplates({
        template: "people_template"
      }, 'user project type vendor template name base index image', (function(_this) {
        return function(err, templates) {
          if (err || templates.length < 1) {
            return;
          }
          $scope.vendor = templates[0].model.vendor;
          return templates[0].loadProperties(null, function(err, properties) {
            if (err || properties.length < 1) {
              return;
            }
            return $scope.properties = properties;
          });
        };
      })(this));
      preview.bind('click', (function(_this) {
        return function() {
          return input.click();
        };
      })(this));
      input.bind('change', (function(_this) {
        return function(evt) {
          var _ref1, _ref2;
          if (_this.commonService.uploadService) {
            uploadImage((_ref1 = input[0]) != null ? (_ref2 = _ref1.files) != null ? _ref2[0] : void 0 : void 0);
          }
          evt.target.value = null;
        };
      })(this));
      uploadImage = (function(_this) {
        return function(file) {
          var url;
          if (!file) {
            return;
          }
          url = "" + $scope.dir + "/" + file.name;
          _this.commonService.uploadService.upload(file, $scope.filename, url, function(err, resource) {
            if (err) {
              return console.log(err);
            } else {
              return $scope.currentPeople.peopleImg = "" + resource.resource + resource.extension + "?" + (new Date().getTime());
            }
          }, function(progress) {
            return $scope.progress = progress * 100;
          });
        };
      })(this);
      $scope["delete"] = (function(_this) {
        return function() {
          $scope.currentPeople.peopleImg = "";
        };
      })(this);
      loadEquipsByTemplate = (function(_this) {
        return function(refresh) {
          $scope.peopleEquips = [];
          return _.each($scope.stations, function(station) {
            return _this.commonService.loadEquipmentsByTemplate(station, "people_template", function(err, equips) {
              _.map(equips, function(equip) {
                equip.checked = false;
                return equip.loadProperties();
              });
              return $scope.peopleEquips = $scope.peopleEquips.concat(equips);
            }, refresh);
          });
        };
      })(this);
      $scope.stations = this.commonService.loadStationChildren($scope.station, true);
      loadEquipsByTemplate();
      $scope.selectPage = (function(_this) {
        return function(page) {
          return $scope.pageIndex = page;
        };
      })(this);
      $scope.filterEquipmentItem = (function(_this) {
        return function() {
          var items, pageCount, result, _j, _results;
          if (!$scope.peopleEquips) {
            return;
          }
          items = [];
          items = _.filter($scope.peopleEquips, function(equip) {
            var text, _ref1;
            text = (_ref1 = $scope.search) != null ? _ref1.toLowerCase() : void 0;
            if (!text) {
              return true;
            }
            return false;
          });
          pageCount = Math.ceil(items.length / $scope.pageItems);
          result = {
            page: 1,
            pageCount: pageCount,
            pages: (function() {
              _results = [];
              for (var _j = 1; 1 <= pageCount ? _j <= pageCount : _j >= pageCount; 1 <= pageCount ? _j++ : _j--){ _results.push(_j); }
              return _results;
            }).apply(this),
            items: items.length
          };
          return result;
        };
      })(this);
      $scope.limitToEquipment = (function(_this) {
        return function() {
          var aa, result;
          if ($scope.filterEquipmentItem() && $scope.filterEquipmentItem().pageCount === $scope.pageIndex) {
            aa = $scope.filterEquipmentItem().items % $scope.pageItems;
            result = -(aa === 0 ? $scope.pageItems : aa);
          } else {
            result = -$scope.pageItems;
          }
          return result;
        };
      })(this);
      $scope.formatValue = (function(_this) {
        return function(propertyId, value) {
          var arr, i, property, val, _j, _len1;
          val = '';
          property = _.find($scope.properties, function(property) {
            return property.model.property === propertyId;
          });
          if (property) {
            arr = property.model.format.split(',');
            for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
              i = arr[_j];
              if (i.split(':')[0] === value) {
                val = i.split(':')[1];
              }
            }
          }
          return val;
        };
      })(this);
      $scope.selectAll = (function(_this) {
        return function() {
          if ($scope.select) {
            _.each($scope.peopleEquips, function(equip) {
              equip.checked = true;
              return selectEquips.push(equip.model.equipment);
            });
          } else {
            _.each($scope.peopleEquips, function(equip) {
              equip.checked = false;
              return selectEquips = [];
            });
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.selectOne = (function(_this) {
        return function() {
          _.each($scope.peopleEquips, function(equip) {
            var index;
            index = _.indexOf(selectEquips, equip.model.equipment);
            if (equip.checked && index === -1) {
              return selectEquips.push(equip.model.equipment);
            } else if (!equip.checked && index !== -1) {
              return selectEquips.splice(index, 1);
            }
          });
          if ($scope.peopleEquips.length === selectEquips.length) {
            $scope.select = true;
          } else {
            $scope.select = false;
          }
          return selectEquips = _.uniq(selectEquips);
        };
      })(this);
      $scope.addEquip = (function(_this) {
        return function() {
          var model;
          $scope.isAdd = true;
          model = {
            user: $scope.project.model.user,
            project: $scope.project.model.project,
            station: $scope.station.model.station,
            equipment: '',
            name: '',
            type: 'access',
            vendor: $scope.vendor,
            enable: true,
            template: 'people_template'
          };
          $scope.equipment = $scope.station.createEquipment(model, null);
          $scope.equipment.loadProperties();
          return $scope.refreshData();
        };
      })(this);
      $scope.deleteSelectEquip = (function(_this) {
        return function() {
          console.log(selectEquips);
          return console.log(_this.commonService);
        };
      })(this);
      $scope.deleteEquip = (function(_this) {
        return function(equip) {
          var message, station, title;
          $scope.equipment = equip;
          station = _.find($scope.stations, function(station) {
            return station.model.station === equip.model.station;
          });
          title = "删除设备确认: " + $scope.project.model.name + "/" + station.model.name + "/" + $scope.equipment.model.name;
          message = "请确认是否删除人员: " + $scope.project.model.name + "/" + station.model.name + "/" + $scope.equipment.model.name + "？删除后设备和数据将从系统中移除不可恢复！";
          return $scope.prompt(title, message, function(ok) {
            if (!ok) {
              return;
            }
            return $scope.equipment.remove(function(err, model) {
              return loadEquipsByTemplate(true);
            });
          });
        };
      })(this);
      $scope.selectPeople = (function(_this) {
        return function(people) {
          $scope.equipment = people;
          $scope.currentPeople = {};
          $scope.currentPeople.peopleId = people.propertyValues['people-id'];
          $scope.currentPeople.peopleName = people.propertyValues['people-name'];
          $scope.currentPeople.peopleImg = people.propertyValues['people-imgsrc'];
          $scope.currentPeople.peopleMobile = people.propertyValues['people-mobile'];
          $scope.currentPeople.peopleSex = people.propertyValues['people-sex'];
          $scope.currentPeople.peoplePosition = people.propertyValues['people-position'];
          $scope.currentPeople.peopleGroup = people.propertyValues['people-group'];
          $scope.currentPeople.peopleTitle = people.propertyValues['people-title'];
          $scope.currentPeople.peopleEmail = people.propertyValues['people-email'];
          $scope.currentPeople.peopleDescribe = people.propertyValues['people-describe'];
          $scope.currentPeople.peopleTelephone = people.propertyValues['people-telephone'];
          $scope.currentPeople.vendor = people.model.vendor;
          return $scope.currentPeople.station = people.model.station;
        };
      })(this);
      $scope.findProperty = (function(_this) {
        return function(propertyId) {
          var property;
          property = _.find($scope.properties, function(property) {
            return property.model.property === propertyId;
          });
          if (property) {
            return property;
          }
        };
      })(this);
      $scope.saveEquipment = (function(_this) {
        return function() {
          var mailReg, message, phoneReg, title;
          phoneReg = /(^1[3|4|5|7|8]\d{9}$)|(^09\d{8}$)/;
          mailReg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.|-]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;
          if (!$scope.currentPeople.peopleId) {
            title = "ID不能为空";
            message = "ID不能为空，请输入ID。";
            return _this.display(title, message);
          }
          if (!$scope.currentPeople.peopleName) {
            title = "姓名不能为空";
            message = "姓名不能为空，请输入姓名。";
            return _this.display(title, message);
          }
          if (!$scope.currentPeople.peopleMobile || (!phoneReg.test($scope.currentPeople.peopleMobile))) {
            title = "手机号码不正确";
            message = "请填写有效的手机号码。";
            return _this.display(title, message);
          }
          if (!$scope.currentPeople.peopleEmail || (!mailReg.test($scope.currentPeople.peopleEmail))) {
            title = "邮箱格式不正确";
            message = "请填写正确的邮箱地址。";
            return _this.display(title, message);
          }
          if ($scope.currentPeople.vendor === "0") {
            title = "设备厂商不能为空";
            message = "ID不能为空，请重新选择厂商";
            return _this.display(title, message);
          }
          if (!$scope.equipment.model.equipment) {
            $scope.equipment.model.equipment = $scope.currentPeople.peopleId;
          }
          $scope.equipment.model.name = $scope.currentPeople.peopleName;
          $scope.equipment.model.vendor = $scope.currentPeople.vendor;
          $scope.equipment.model.station = $scope.currentPeople.station;
          _.map($scope.equipment.properties.items, function(property) {
            if (property.model.property === "people-id") {
              property.value = $scope.currentPeople.peopleId;
            }
            if (property.model.property === "people-name") {
              property.value = $scope.currentPeople.peopleName;
            }
            if (property.model.property === "people-sex") {
              property.value = $scope.currentPeople.peopleSex;
            }
            if (property.model.property === "people-imgsrc") {
              property.value = $scope.currentPeople.peopleImg;
            }
            if (property.model.property === "people-mobile") {
              property.value = $scope.currentPeople.peopleMobile;
            }
            if (property.model.property === "people-email") {
              property.value = $scope.currentPeople.peopleEmail;
            }
            if (property.model.property === "people-position") {
              property.value = $scope.currentPeople.peoplePosition;
            }
            if (property.model.property === "people-group") {
              property.value = $scope.currentPeople.peopleGroup;
            }
            if (property.model.property === "people-title") {
              property.value = $scope.currentPeople.peopleTitle;
            }
            if (property.model.property === "people-telephone") {
              property.value = $scope.currentPeople.peopleTelephone;
            }
            if (property.model.property === "people-describe") {
              return property.value = $scope.currentPeople.peopleDescribe;
            }
          });
          return $scope.equipment.save(function(err, model) {
            $scope.closeModal();
            return loadEquipsByTemplate(true);
          });
        };
      })(this);
      $scope.closeModal = (function(_this) {
        return function() {
          return $('#door-people-modal').modal('close');
        };
      })(this);
      return $scope.refreshData = (function(_this) {
        return function() {
          return $scope.currentPeople = {
            peopleId: moment().format("YYYYMMDDHHmmssSSS"),
            peopleName: 'new-people-name',
            peopleImg: '',
            peopleMobile: '',
            peopleSex: '0',
            peoplePosition: '0',
            peopleGroup: '0',
            peopleTitle: '0',
            peopleEmail: '',
            peopleDescribe: '',
            peopleTelephone: '',
            vendor: '0',
            station: $scope.station.model.station
          };
        };
      })(this);
    };

    UserManagerDirective.prototype.resize = function($scope) {};

    UserManagerDirective.prototype.dispose = function($scope) {};

    return UserManagerDirective;

  })(base.BaseDirective);
  return exports = {
    UserManagerDirective: UserManagerDirective
  };
});
