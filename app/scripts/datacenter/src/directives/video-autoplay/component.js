// Generated by IcedCoffeeScript 108.0.12

/*
* File: video-autoplay-directive
* User: David
* Date: 2020/03/02
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', '../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function($, base, css, view, _, moment) {
  var VideoAutoplayDirective, exports;
  VideoAutoplayDirective = (function(_super) {
    __extends(VideoAutoplayDirective, _super);

    function VideoAutoplayDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "video-autoplay";
      VideoAutoplayDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    VideoAutoplayDirective.prototype.setScope = function() {};

    VideoAutoplayDirective.prototype.setCSS = function() {
      return css;
    };

    VideoAutoplayDirective.prototype.setTemplate = function() {
      return view;
    };

    VideoAutoplayDirective.prototype.show = function($scope, element, attrs) {
      var playInVXGPLAYER;
      $('.fullscreen').hide();
      if ($scope.player) {
        $scope.player.dispose();
      }
      $scope.$watch('equipment', (function(_this) {
        return function(equip) {
          if (!equip || !equip.model) {
            if ($scope.player) {
              $scope.player.dispose();
            }
            return;
          }
          return _this.$timeout(function() {
            var src;
            src = (equip != null ? equip.getPropertyValue('url') : void 0) || (equip != null ? equip.getPropertyValue('rtsp') : void 0);
            if (src !== "" && src !== void 0) {
              return playInVXGPLAYER(src, equip);
            } else {
              return playInCKPLAYER();
            }
          }, 100);
        };
      })(this));
      return playInVXGPLAYER = (function(_this) {
        return function(src, equip) {
          var error, height, player1Id, playerId, width;
          player1Id = "player1-" + equip.model.equipment;
          playerId = "player-" + equip.model.equipment;
          $scope.playerId = playerId;
          width = parseInt($('#' + player1Id).width());
          height = parseInt($('#' + player1Id).height());
          try {
            return $scope.player = vxgplayer(playerId, {
              url: '',
              nmf_path: 'media_player.nmf',
              nmf_src: '/lib/vxgplayer/pnacl/Release/media_player.nmf',
              latency: 300,
              aspect_ratio_mode: 1,
              autohide: 3,
              controls: true,
              connection_timeout: 50000,
              connection_udp: 0,
              custom_digital_zoom: false
            }).ready(function() {
              var _ref, _ref1, _ref2, _ref3;
              console.log(' =>ready to player ' + playerId, src);
              $scope.player = vxgplayer(playerId);
              vxgplayer(playerId).size(width, height);
              vxgplayer(playerId).src(src);
              vxgplayer(playerId).autoreconnect(1);
              vxgplayer(playerId).controls(true);
              vxgplayer(playerId).play();
              if (!((_ref = $scope.controller) != null ? (_ref1 = _ref.errorvxgobj) != null ? _ref1.includes(vxgplayer(playerId)) : void 0 : void 0) && ((_ref2 = $scope.controller) != null ? _ref2.errorvxgobj : void 0)) {
                if ((_ref3 = $scope.controller.errorvxgobj) != null) {
                  _ref3.push(vxgplayer(playerId));
                }
              }
              vxgplayer(playerId).onError((function(_this) {
                return function(player) {
                  var itemobj, _i, _len, _ref4, _results;
                  $scope.player.size(width, height);
                  console.log(player.error());
                  if ($scope.controller.errorvxgobj) {
                    _ref4 = $scope.controller.errorvxgobj;
                    _results = [];
                    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                      itemobj = _ref4[_i];
                      _results.push(itemobj.autoreconnect(1));
                    }
                    return _results;
                  }
                };
              })(this));
              return vxgplayer(playerId).onBandwidthError((function(_this) {
                return function(player) {
                  var itemobj, _i, _len, _ref4, _results;
                  $scope.player.size(width, height);
                  console.log(player.error());
                  if ($scope.controller.errorvxgobj) {
                    _ref4 = $scope.controller.errorvxgobj;
                    _results = [];
                    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                      itemobj = _ref4[_i];
                      _results.push(itemobj.autoreconnect(1));
                    }
                    return _results;
                  }
                };
              })(this));
            });
          } catch (_error) {
            error = _error;
            return console.log(error);
          }
        };
      })(this);
    };

    VideoAutoplayDirective.prototype.resize = function(scope) {
      return this.$timeout(function() {
        var height, width, _ref;
        width = parseInt($('.video').width());
        height = parseInt($('.video').height());
        return (_ref = scope.player) != null ? _ref.size(width, height) : void 0;
      }, 100);
    };

    VideoAutoplayDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.player) != null ? _ref.dispose() : void 0;
    };

    return VideoAutoplayDirective;

  })(base.BaseDirective);
  return exports = {
    VideoAutoplayDirective: VideoAutoplayDirective
  };
});
