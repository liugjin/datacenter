// Generated by IcedCoffeeScript 108.0.13

/*
* File: video-history-directive
* User: region
* Date: 2019/04/10
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var VideoHistoryDahuaDirective, exports;
  VideoHistoryDahuaDirective = (function(_super) {
    __extends(VideoHistoryDahuaDirective, _super);

    function VideoHistoryDahuaDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "video-history-dahua";
      VideoHistoryDahuaDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    VideoHistoryDahuaDirective.prototype.setScope = function() {};

    VideoHistoryDahuaDirective.prototype.setCSS = function() {
      return css;
    };

    VideoHistoryDahuaDirective.prototype.setTemplate = function() {
      return view;
    };

    VideoHistoryDahuaDirective.prototype.show = function(scope, element, attrs) {
      var clickStartPlayback, g_iWndIndex, iRet, loadStationVideos, station, timebar, _i, _len, _ref, _ref1, _ref2;
      scope.videospng = this.getComponentPath('image/video/videos.png');
      scope.videopng = this.getComponentPath('image/video/video.png');
      scope.leftblack0 = this.getComponentPath('image/video/leftblack0.svg');
      scope.leftblack1 = this.getComponentPath('image/video/leftblack1.svg');
      scope.leftblack2 = this.getComponentPath('image/video/leftblack2.svg');
      scope.rightblack0 = this.getComponentPath('image/video/rightblack0.svg');
      scope.rightblack1 = this.getComponentPath('image/video/rightblack1.svg');
      scope.rightblack2 = this.getComponentPath('image/video/rightblack2.svg');
      scope.playing = this.getComponentPath('image/video/playing.svg');
      scope.pauseing = this.getComponentPath('image/video/pauseing.svg');
      scope.gridStatus = "start";
      scope.recordfilename = "";
      scope.viewstatus = [];
      scope.pageStatus = [];
      scope.maskLayer = false;
      scope.timedate = moment().format('YYYY-MM-DD');
      scope.datacenters = [];
      _ref = scope.project.stations.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        if (station.stations.length > 0) {
          scope.datacenters.push(station);
        }
      }
      if (scope.datacenters.length > 0) {
        scope.datacenter = scope.datacenters[0];
      } else {
        scope.datacenter = scope.project;
      }
      scope.selectStation = function(station) {
        loadStationVideos(station);
        return true;
      };
      scope.setGridOptions = function(rows, cols, setting) {
        if (setting == null) {
          setting = false;
        }
        return scope.gridOptions = {
          rows: rows,
          cols: cols,
          setting: setting
        };
      };
      loadStationVideos = function(station, callback, refresh) {
        var mds;
        mds = [];
        return station.loadEquipments({
          project: station.model.project,
          type: 'video'
        }, null, (function(_this) {
          return function(err, model) {
            var equip, i, md, sta, ___iced_passed_deferral, __iced_deferrals, __iced_k;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            (function(__iced_k) {
              var _j, _len1, _ref1, _results, _while;
              _ref1 = station.stations;
              _len1 = _ref1.length;
              i = 0;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    ++i;
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(i < _len1)) {
                  return _break();
                } else {
                  sta = _ref1[i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "F:\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\video-history-dahua\\component.coffee"
                    });
                    sta.loadEquipments({
                      project: station.model.project,
                      type: 'video'
                    }, null, __iced_deferrals.defer({
                      assign_fn: (function(__slot_1, __slot_2) {
                        return function() {
                          err = arguments[0];
                          return __slot_1[__slot_2] = arguments[1];
                        };
                      })(mds, i),
                      lineno: 70
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(function() {
              var _j, _k, _len1, _len2;
              if (!err) {
                for (_j = 0, _len1 = mds.length; _j < _len1; _j++) {
                  md = mds[_j];
                  model = model.concat(md);
                }
                scope.videos = model;
                scope.setGridOptions(1, 1, true);
                for (_k = 0, _len2 = model.length; _k < _len2; _k++) {
                  equip = model[_k];
                  equip.loadCommands(null, function() {
                    return console.log("先不订阅，在选中具体摄像头时订阅");
                  }, refresh);
                  equip.loadSignals(null, function(err, data) {
                    if (data[0]) {
                      return console.log("先不订阅，在选中具体摄像头时订阅");
                    }
                  });
                }
              }
              return typeof callback === "function" ? callback(err, model) : void 0;
            });
          };
        })(this), refresh);
      };
      scope.loadUsers = function() {
        return scope.users = scope.project.model.starUsers;
      };
      if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
        this.display("请使用IE浏览器查看");
        return;
      }
      scope.selectStation(scope.station);
      scope.loadUsers();
      if ((_ref1 = scope.searchSubscription) != null) {
        _ref1.dispose();
      }
      scope.searchSubscription = this.commonService.subscribeEventBus('search', (function(_this) {
        return function(msg) {
          scope.search = msg.message;
          return scope.$applyAsync();
        };
      })(this));
      scope.filterVideo = (function(_this) {
        return function(video) {
          if (!scope.search || scope.search === "") {
            return true;
          }
          if (video.model.equipment.indexOf(scope.search) >= 0) {
            return true;
          }
          if (video.model.name.indexOf(scope.search) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
      if ((_ref2 = scope.somedayplaybackSubscription) != null) {
        _ref2.dispose();
      }
      scope.somedayplaybackSubscription = this.commonService.subscribeEventBus('somedayplayback', (function(_this) {
        return function(d) {
          var message, starttime;
          if (scope.equipment === void 0 || scope.equipment === null || scope.equipment === "") {
            _this.display("请先选择设备");
            return;
          }
          if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
            _this.display("请使用IE浏览器查看");
            return;
          }
          starttime = moment(d.message.timedate).format('YYYY-MM-DD');
          if (starttime > moment().format('YYYY-MM-DD')) {
            alert("历史视频不支持超过当前系统日期");
            return;
          }
          message = {
            type: 'I_StartPlayback',
            channel: Number(scope.dahuaOptions.channel),
            protocolType: 0,
            streamType: 2,
            timeFrom: "" + starttime + " 00:00:00",
            timeTo: "" + starttime + " 23:59:59",
            options: scope.dahuaOptions
          };
          return scope.actionMessage(message);
        };
      })(this));
      scope.selectVideo = (function(_this) {
        return function(video, index, playstatus) {
          var dahuaOptions, message, optionsArr, starttime;
          if (playstatus == null) {
            playstatus = false;
          }
          scope.equipment = video;
          dahuaOptions = optionsArr = {};
          _.map(video.model.properties, function(data) {
            return optionsArr[data.id] = data.value;
          });
          scope.dahuaOptions = dahuaOptions;
          scope.video = video;
          starttime = moment(scope.timedate).format('YYYY-MM-DD');
          message = {
            type: 'I_StartPlayback',
            channel: Number(scope.dahuaOptions.channel),
            protocolType: 0,
            streamType: 2,
            timeFrom: "" + starttime + " 00:00:00",
            timeTo: "" + starttime + " 23:59:59",
            options: scope.dahuaOptions
          };
          return scope.actionMessage(message);
        };
      })(this);
      scope.startPreview = function() {
        var message;
        message = {
          type: 'start-preview',
          protocolType: 0,
          streamType: 2
        };
        return scope.startPreview2(message);
      };
      scope.startPlayback = function(fileName) {
        var message;
        scope.recordfilename = fileName;
        scope.maskLayer = true;
        message = {
          type: 'start-playback',
          channel: Number(this.dahuaOptions.channel),
          protocolType: 0,
          streamType: 2,
          fileName: fileName,
          options: scope.dahuaOptions
        };
        this.commonService.publishEventBus('record', message);
        return setTimeout((function(_this) {
          return function() {
            return _this.commonService.publishEventBus('record', message);
          };
        })(this), 2000);
      };
      scope.stopPlayback = function() {
        var message;
        scope.maskLayer = false;
        message = {
          type: 'stop-playback',
          channel: Number(scope.dahuaOptions.channel),
          protocolType: 0,
          streamType: 2
        };
        return scope.stopPlayback2(message);
      };
      iRet = 0;
      scope.channelid = 0;
      scope.szip = "127.0.0.1";
      scope.mancount = 0;
      scope.kuaicount = 0;
      g_iWndIndex = 0;
      scope.holewidth = $('#contentdiv').width();
      scope.hoelheight = $('#contentdiv').height();
      scope.hoelhe2ight2 = parseInt(scope.holewidth - 61) + 'px';
      console.log("-----初始化时间条------");
      timebar = $('#timelineId').timebar({
        totalTimeInSecond: 86400,
        width: scope.hoelhe2ight2,
        height: '98px',
        multiSelect: true,
        barClicked: (function(_this) {
          return function(time) {
            var selectedTime;
            selectedTime = $('#datevalue').val() + " " + timebar.formatTime(time);
            return clickStartPlayback(scope.channelid, moment(selectedTime).format("YYYY-MM-DD HH:mm:ss"), moment($('#datevalue').val()).format("YYYY-MM-DD") + " 23:59:59");
          };
        })(this),
        pointerClicked: (function(_this) {
          return function(time) {
            var selectedTime;
            selectedTime = $('#datevalue').val() + " " + timebar.formatTime(time);
            return clickStartPlayback(scope.channelid, moment(selectedTime).format("YYYY-MM-DD HH:mm:ss"), moment($('#datevalue').val()).format("YYYY-MM-DD") + " 23:59:59");
          };
        })(this)
      });
      scope.nvrLogin = function(options) {
        if (!options.nvrip) {
          return;
        }
        scope.szip = options.nvrip;
        scope.channelid = options.channel;
        scope.userstr = options.nvruser;
        scope.pwdstr = options.nvrpassword;
        WebVideoCtrl.insertPluginObject("divPlugin", scope.holewidth, scope.hoelheight - 100);
        WebVideoCtrl.initPlugin((function(_this) {
          return function() {
            WebVideoCtrl.setSplitNum(1);
            WebVideoCtrl.enablePreviewDBClickFullSreen(true);
            WebVideoCtrl.addEventListener("DownloadByTimePos", function(eventParam) {
              scope.pos = eventParam["pos"];
              scope.speed = eventParam["speed"];
              scope.end = eventParam["end"];
              return scope.g_iWndIndex;
            });
            WebVideoCtrl.addEventListener("ChnlInfo", function(eventParam) {
              scope.channelNum = eventParam["ChanNum"];
              return scope.g_iWndIndex;
            });
            WebVideoCtrl.addEventListener("ReturnWindInfo", function(eventParam) {
              scope.g_iWndIndex = eventParam["winID"];
              return scope.g_iWndIndex;
            });
            return WebVideoCtrl.addEventListener("NetPlayState", function(eventParam) {
              scope.g_iWndIndex = eventParam["winID"];
              return scope.g_iWndIndex;
            });
          };
        })(this));
        scope.ret = WebVideoCtrl.login(scope.szip, 37777, scope.userstr, scope.pwdstr, 0);
        if (scope.ret === 0) {
          M.toast({
            html: 'NVR登录成功'
          }, 3000);
          console.log("nvr login successed");
          WebVideoCtrl.setModuleMode(4);
        } else {
          M.toast({
            html: '摄像头登录失败，errorcode:' + ret
          }, 3000);
        }
        return true;
      };
      scope.playstatu = 0;
      scope.resumeorpause = function() {
        if (scope.playstatu === 0) {
          WebVideoCtrl.pausePlayBack();
          $('#imgpaly').attr("src", scope.pauseing);
          return scope.playstatu = 1;
        } else {
          WebVideoCtrl.resumePlayback();
          $('#imgpaly').attr("src", scope.playing);
          return scope.playstatu = 0;
        }
      };
      scope.playspeed = 4;
      scope.clickPlayFastorSlow = function(palymode) {
        if (palymode === 0) {
          scope.playspeed--;
        } else {
          scope.playspeed++;
        }
        WebVideoCtrl.setPlaySpeed(scope.playspeed);
        if (scope.playspeed === 4) {
          $('#imgman').attr("src", scope.leftblack0);
        }
        if (scope.playspeed === 3) {
          $('#imgman').attr("src", scope.leftblack1);
        }
        if (scope.playspeed === 2) {
          $('#imgman').attr("src", scope.leftblack2);
        }
        if (scope.playspeed === 4) {
          $('#imgkuai').attr("src", scope.rightblack0);
        }
        if (scope.playspeed === 5) {
          $('#imgkuai').attr("src", scope.rightblack1);
        }
        if (scope.playspeed === 6) {
          return $('#imgkuai').attr("src", scope.rightblack2);
        }
      };
      clickStartPlayback = function(channelid, szStartTime, szEndTime) {
        scope.channelid = channelid;
        return WebVideoCtrl.playBackByTimeEx(0, Number(channelid), 2, szStartTime, szEndTime);
      };
      return scope.actionMessage = function(d) {
        scope.nvrLogin(d.options);
        switch (d.type) {
          case 'I_StartPlayback':
            return setTimeout((function(_this) {
              return function() {
                return clickStartPlayback(d.options.channel, moment(d.timeFrom).format("YYYY-MM-DD HH:mm:ss"), moment(d.timeTo).format("YYYY-MM-DD HH:mm:ss"));
              };
            })(this), 100);
        }
      };
    };

    VideoHistoryDahuaDirective.prototype.resize = function(scope) {};

    VideoHistoryDahuaDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = scope.searchSubscription) != null) {
        _ref.dispose();
      }
      return (_ref1 = scope.somedayplaybackSubscription) != null ? _ref1.dispose() : void 0;
    };

    return VideoHistoryDahuaDirective;

  })(base.BaseDirective);
  return exports = {
    VideoHistoryDahuaDirective: VideoHistoryDahuaDirective
  };
});
