// Generated by IcedCoffeeScript 108.0.13

/*
* File: video-history-directive
* User: region
* Date: 2019/04/10
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var VideoHistoryDirective, exports;
  VideoHistoryDirective = (function(_super) {
    __extends(VideoHistoryDirective, _super);

    function VideoHistoryDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "video-history";
      VideoHistoryDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    VideoHistoryDirective.prototype.setScope = function() {};

    VideoHistoryDirective.prototype.setCSS = function() {
      return css;
    };

    VideoHistoryDirective.prototype.setTemplate = function() {
      return view;
    };

    VideoHistoryDirective.prototype.show = function(scope, element, attrs) {
      var LOGIN_ERROR, clickStartPlayback, g_iWndIndex, getChannelInfo, hoelhe2ight2, hoelheight, holewidth, iRet, loadStationVideos, station, timebar, _i, _len, _ref, _ref1, _ref2, _ref3;
      scope.videospng = this.getComponentPath('image/video/videos.png');
      scope.videopng = this.getComponentPath('image/video/video.png');
      scope.gridStatus = "start";
      scope.recordfilename = "";
      scope.viewstatus = [];
      scope.pageStatus = [];
      scope.maskLayer = false;
      scope.timedate = moment().format('YYYY-MM-DD');
      scope.datacenters = [];
      scope.leftblack0 = this.getComponentPath('image/video/leftblack0.svg');
      scope.leftblack1 = this.getComponentPath('image/video/leftblack1.svg');
      scope.leftblack2 = this.getComponentPath('image/video/leftblack2.svg');
      scope.rightblack0 = this.getComponentPath('image/video/rightblack0.svg');
      scope.rightblack1 = this.getComponentPath('image/video/rightblack1.svg');
      scope.rightblack2 = this.getComponentPath('image/video/rightblack2.svg');
      scope.playing = this.getComponentPath('image/video/playing.svg');
      scope.pauseing = this.getComponentPath('image/video/pauseing.svg');
      _ref = scope.project.stations.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        if (station.stations.length > 0) {
          scope.datacenters.push(station);
        }
      }
      if (scope.datacenters.length > 0) {
        scope.datacenter = scope.datacenters[0];
      } else {
        scope.datacenter = scope.project;
      }
      scope.selectStation = function(station) {
        loadStationVideos(station);
        return true;
      };
      scope.setGridOptions = function(rows, cols, setting) {
        if (setting == null) {
          setting = false;
        }
        return scope.gridOptions = {
          rows: rows,
          cols: cols,
          setting: setting
        };
      };
      loadStationVideos = function(station, callback, refresh) {
        var mds;
        mds = [];
        return station.loadEquipments({
          project: station.model.project,
          type: 'video'
        }, null, (function(_this) {
          return function(err, model) {
            var equip, i, md, sta, ___iced_passed_deferral, __iced_deferrals, __iced_k;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            (function(__iced_k) {
              var _j, _len1, _ref1, _results, _while;
              _ref1 = station.stations;
              _len1 = _ref1.length;
              i = 0;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    ++i;
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(i < _len1)) {
                  return _break();
                } else {
                  sta = _ref1[i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "F:\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\video-history\\component.coffee"
                    });
                    sta.loadEquipments({
                      project: station.model.project,
                      type: 'video'
                    }, null, __iced_deferrals.defer({
                      assign_fn: (function(__slot_1, __slot_2) {
                        return function() {
                          err = arguments[0];
                          return __slot_1[__slot_2] = arguments[1];
                        };
                      })(mds, i),
                      lineno: 70
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(function() {
              var _j, _k, _len1, _len2;
              if (!err) {
                for (_j = 0, _len1 = mds.length; _j < _len1; _j++) {
                  md = mds[_j];
                  model = model.concat(md);
                }
                scope.videos = model;
                scope.setGridOptions(1, 1, true);
                for (_k = 0, _len2 = model.length; _k < _len2; _k++) {
                  equip = model[_k];
                  equip.loadCommands(null, function() {
                    return console.log("先不订阅，在选中具体摄像头时订阅");
                  }, refresh);
                  equip.loadSignals(null, function(err, data) {
                    if (data[0]) {
                      return console.log("先不订阅，在选中具体摄像头时订阅");
                    }
                  });
                }
              }
              return typeof callback === "function" ? callback(err, model) : void 0;
            });
          };
        })(this), refresh);
      };
      scope.loadUsers = function() {
        return scope.users = scope.project.model.starUsers;
      };
      if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
        this.display("请使用IE浏览器查看");
        return;
      }
      scope.selectStation(scope.station);
      scope.loadUsers();
      if ((_ref1 = scope.searchSubscription) != null) {
        _ref1.dispose();
      }
      scope.searchSubscription = this.commonService.subscribeEventBus('search', (function(_this) {
        return function(msg) {
          scope.search = msg.message;
          return scope.$applyAsync();
        };
      })(this));
      scope.filterVideo = (function(_this) {
        return function(video) {
          if (!scope.search || scope.search === "") {
            return true;
          }
          if (video.model.equipment.indexOf(scope.search) >= 0) {
            return true;
          }
          if (video.model.name.indexOf(scope.search) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
      if ((_ref2 = scope.somedayplaybackSubscription) != null) {
        _ref2.dispose();
      }
      scope.somedayplaybackSubscription = this.commonService.subscribeEventBus('somedayplayback', (function(_this) {
        return function(d) {
          var message, starttime;
          if (scope.equipment === void 0 || scope.equipment === null || scope.equipment === "") {
            _this.display("请先选择设备");
            return;
          }
          if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
            _this.display("请使用IE浏览器查看");
            return;
          }
          starttime = moment(d.message.timedate).format('YYYY-MM-DD');
          if (starttime > moment().format('YYYY-MM-DD')) {
            alert("历史视频不支持超过当前系统日期");
            return;
          }
          message = {
            type: 'I_StartPlayback',
            channel: Number(scope.hikOptions.channel),
            protocolType: 0,
            streamType: 0,
            timeFrom: "" + starttime + " 00:00:00",
            timeTo: "" + starttime + " 23:59:59",
            options: scope.hikOptions
          };
          return scope.actionMessage(message);
        };
      })(this));
      scope.selectVideo = (function(_this) {
        return function(video, index, playstatus) {
          var hikOptions, message, optionsArr, starttime;
          if (playstatus == null) {
            playstatus = false;
          }
          scope.equipment = video;
          hikOptions = optionsArr = {};
          _.map(video.model.properties, function(data) {
            return optionsArr[data.id] = data.value;
          });
          scope.hikOptions = hikOptions;
          if (!video.signals.items[0].data.value) {
            scope.play = video.model.template;
          }
          if (!playstatus) {
            scope.play = "video_template";
          }
          scope.video = video;
          hikOptions = optionsArr = {};
          hikOptions["play"] = scope.play;
          if (scope.play === 'video_template') {
            _.map(video.model.properties, function(data) {
              return optionsArr[data.id] = data.value;
            });
            hikOptions["name"] = video.model.name;
          }
          starttime = moment(scope.timedate).format('YYYY-MM-DD');
          message = {
            type: 'I_StartPlayback',
            channel: Number(scope.hikOptions.channel),
            protocolType: 0,
            streamType: 0,
            timeFrom: "" + starttime + " 00:00:00",
            timeTo: "" + starttime + " 23:59:59",
            options: scope.hikOptions
          };
          return scope.actionMessage(message);
        };
      })(this);
      scope.startPreview = function() {
        var message;
        message = {
          type: 'start-preview',
          protocolType: 0,
          streamType: 0
        };
        return scope.startPreview2(message);
      };
      scope.startPlayback = function(fileName) {
        var message;
        scope.recordfilename = fileName;
        scope.maskLayer = true;
        message = {
          type: 'start-playback',
          channel: Number(this.hikOptions.channel),
          protocolType: 0,
          streamType: 0,
          fileName: fileName,
          options: scope.hikOptions
        };
        this.commonService.publishEventBus('record', message);
        return setTimeout((function(_this) {
          return function() {
            return _this.commonService.publishEventBus('record', message);
          };
        })(this), 2000);
      };
      scope.stopPlayback = function() {
        var message;
        scope.maskLayer = false;
        message = {
          type: 'stop-playback',
          channel: Number(scope.hikOptions.channel),
          protocolType: 0,
          streamType: 0
        };
        return scope.stopPlayback2(message);
      };
      LOGIN_ERROR = -1;
      scope.instance = (_ref3 = element.find('.hik-video-instance')[0]) != null ? _ref3.object : void 0;
      scope.options = null;
      scope.login = function() {
        return scope.loginState = scope.instance.Login(scope.options.ip, scope.options.port, scope.options.user, scope.options.password);
      };
      scope.ensureLogined = function() {
        if (scope.loginState === LOGIN_ERROR) {
          return scope.login();
        }
      };
      scope.startPreview2 = (function(_this) {
        return function(params) {
          scope.ensureLogined();
          if (scope.instance.StartRealPlay(scope.options.channel, params.protocolType, params.streamType)) {
            return scope.playing = true;
          }
        };
      })(this);
      scope.stopPreview2 = function(params) {
        if (scope.playing) {
          if (scope.instance.StopRealPlay()) {
            return scope.playing = false;
          }
        }
      };
      scope.startPlayback2 = function(params) {
        scope.ensureLogined();
        scope.instance.StopRealPlay();
        scope.instance.SetPlayWndType(0);
        return scope.instance.PlayBackByName(params.fileName);
      };
      scope.stopPlayback2 = function(params) {
        return scope.instance.StopPlayBack();
      };
      scope.ptzCtrlstop2 = (function(_this) {
        return function(params) {
          if (scope.playing) {
            return scope.instance.PTZCtrlStop(10, scope.speed);
          }
        };
      })(this);
      scope.ptzCtrlstart2 = (function(_this) {
        return function(params) {
          if (scope.playing) {
            scope.instance.PTZCtrlStop(10, scope.speed);
            return scope.instance.PTZCtrlStart(params.commandcode, scope.speed);
          }
        };
      })(this);
      scope.snapshot2 = (function(_this) {
        return function(params) {
          if (scope.playing) {
            return scope.instance.JPEGCapturePicture(scope.options.channel + 1, 2, 0, "" + params.pictruepath + "/" + params.dirname, 1);
          }
        };
      })(this);
      scope.getrecordFiles = function(params, callback) {
        var recordFiles;
        recordFiles = scope.instance.SearchRemoteRecordFile(scope.options.channel, 0, params.timeFrom, params.timeTo, false, false, "");
        console.log(recordFiles);
        return callback(recordFiles);
      };
      scope.createVideo = function() {
        var instance, video, _ref4;
        instance = (_ref4 = element.find('.hik-video-instance')[0]) != null ? _ref4.object : void 0;
        if (!instance) {
          return;
        }
        video = new hv.HikVideo(scope.options, instance);
        video.login();
        return video;
      };
      iRet = 0;
      scope.channelid = 0;
      scope.szip = "127.0.0.1";
      scope.mancount = 0;
      scope.kuaicount = 0;
      g_iWndIndex = 0;
      holewidth = $('#contentdiv').width();
      hoelheight = $('#contentdiv').height();
      hoelhe2ight2 = parseInt(holewidth - 61) + 'px';
      console.log("-----初始化时间条------");
      timebar = $('#timelineId').timebar({
        totalTimeInSecond: 86400,
        width: hoelhe2ight2,
        height: '98px',
        multiSelect: true,
        barClicked: (function(_this) {
          return function(time) {
            var selectedTime;
            selectedTime = $('#datevalue').val() + " " + timebar.formatTime(time);
            return clickStartPlayback(scope.szip, scope.channelid, moment(selectedTime).format("YYYY-MM-DD HH:mm:ss"), moment($('#datevalue').val()).format("YYYY-MM-DD") + " 23:59:59");
          };
        })(this),
        pointerClicked: (function(_this) {
          return function(time) {
            var selectedTime;
            selectedTime = $('#datevalue').val() + " " + timebar.formatTime(time);
            return clickStartPlayback(scope.szip, scope.channelid, moment(selectedTime).format("YYYY-MM-DD HH:mm:ss"), moment($('#datevalue').val()).format("YYYY-MM-DD") + " 23:59:59");
          };
        })(this)
      });
      scope.nvrLogin = function(options) {
        var isinstalled;
        scope.channelid = options.channel;
        if (!options.nvrip) {
          return;
        }
        scope.szip = options.nvrip;
        isinstalled = WebVideoCtrl.I_CheckPluginInstall();
        WebVideoCtrl.I_InitPlugin(holewidth, hoelheight - 100, {
          iWndowType: 1,
          cbSelWnd: (function(_this) {
            return function(xmlDoc) {
              return g_iWndIndex = $(xmlDoc).find("SelectWnd").eq(0).text();
            };
          })(this)
        });
        WebVideoCtrl.I_InsertOBJECTPlugin("divPlugin");
        iRet = WebVideoCtrl.I_Login(scope.szip, '1', '80', options.nvruser, options.nvrpassword, {
          success: (function(_this) {
            return function(model) {
              return setTimeout(function() {
                getChannelInfo(scope.szip);
                return clickStartPlayback(scope.szip, scope.channelid, moment().format("YYYY-MM-DD") + " 00:00:00", moment().format("YYYY-MM-DD") + " 23:59:59");
              }, 100);
            };
          })(this),
          error: (function(_this) {
            return function(err) {
              return console.log(err);
            };
          })(this)
        });
        return iRet;
      };
      getChannelInfo = function(nvrip) {
        WebVideoCtrl.I_GetAnalogChannelInfo(nvrip, {
          async: false,
          success: (function(_this) {
            return function(model) {
              var nAnalogChannel, oChannels;
              oChannels = $(model).find("VideoInputChannel");
              return nAnalogChannel = oChannels.length;
            };
          })(this),
          error: (function(_this) {
            return function(err) {
              return console.log('I_GetAnalogChannelInfoIP error' + err);
            };
          })(this)
        });
        WebVideoCtrl.I_GetDigitalChannelInfo(nvrip, {
          async: false,
          success: (function(_this) {
            return function(model) {
              var oChannels;
              return oChannels = $(model).find("InputProxyChannelStatus");
            };
          })(this),
          error: (function(_this) {
            return function(err) {
              return console.log('I_GetDigitalChannelInfo error' + err);
            };
          })(this)
        });
        return WebVideoCtrl.I_GetZeroChannelInfo(nvrip, {
          async: false,
          success: (function(_this) {
            return function(model) {
              var oChannels;
              return oChannels = $(model).find("ZeroVideoChannel");
            };
          })(this),
          error: (function(_this) {
            return function(err) {
              return console.log('I_GetZeroChannelInfo error' + err);
            };
          })(this)
        });
      };
      scope.resumeorpause = function() {
        var imgmodel, oWndInfo;
        oWndInfo = WebVideoCtrl.I_GetWindowStatus(0);
        if (oWndInfo !== null) {
          imgmodel = $('#imgpaly').attr('src');
          if ((imgmodel.indexOf('playing')) > 0) {
            iRet = WebVideoCtrl.I_Pause();
            return $('#imgpaly').attr("src", scope.pauseing);
          } else {
            iRet = WebVideoCtrl.I_Resume();
            return $('#imgpaly').attr("src", scope.playing);
          }
        } else {
          return this.prompt('提示', '请先选择摄像头');
        }
      };
      clickStartPlayback = function(szip, channelid, szStartTime, szEndTime) {
        var bChecked, bZeroChannel, oWndInfo, szInfo;
        scope.channelid = channelid;
        scope.szip = szip;
        oWndInfo = WebVideoCtrl.I_GetWindowStatus(0);
        bZeroChannel = false;
        szInfo = "";
        bChecked = false;
        iRet = -1;
        if (oWndInfo !== null) {
          WebVideoCtrl.I_Stop();
        }
        return iRet = WebVideoCtrl.I_StartPlayback(szip, {
          iChannelID: channelid,
          szStartTime: szStartTime,
          szEndTime: szEndTime
        });
      };
      scope.clickPlaySlow = function() {
        var oWndInfo;
        oWndInfo = WebVideoCtrl.I_GetWindowStatus(g_iWndIndex);
        if (oWndInfo !== null) {
          iRet = WebVideoCtrl.I_PlaySlow();
          if (iRet === 0) {
            if (scope.mancount < 3 && scope.kuaicount === 0) {
              scope.mancount += 1;
            }
            if (scope.kuaicount > 0) {
              scope.kuaicount -= 1;
            }
            if (scope.kuaicount === 0) {
              if (scope.mancount === 0) {
                $('#imgman').attr("src", scope.leftblack0);
              }
              if (scope.mancount === 1) {
                $('#imgman').attr("src", scope.leftblack1);
              }
              if (scope.mancount === 2) {
                $('#imgman').attr("src", scope.leftblack2);
              }
            }
            if (scope.mancount === 0) {
              if (scope.kuaicount === 0) {
                $('#imgkuai').attr("src", scope.rightblack0);
              }
              if (scope.kuaicount === 1) {
                $('#imgkuai').attr("src", scope.rightblack1);
              }
              if (scope.kuaicount === 2) {
                return $('#imgkuai').attr("src", scope.rightblack2);
              }
            }
          } else {
            return this.prompt('提示', '慢放失败');
          }
        } else {
          return this.prompt('提示', '请先选择摄像头');
        }
      };
      scope.clickPlayFast = function() {
        var oWndInfo;
        oWndInfo = WebVideoCtrl.I_GetWindowStatus(g_iWndIndex);
        if (oWndInfo !== null) {
          iRet = WebVideoCtrl.I_PlayFast();
          if (iRet === 0) {
            if (scope.kuaicount < 3 && scope.mancount === 0) {
              scope.kuaicount += 1;
            }
            if (scope.mancount > 0) {
              scope.mancount -= 1;
            }
            if (scope.kuaicount === 0) {
              if (scope.mancount === 0) {
                $('#imgman').attr("src", scope.leftblack0);
              }
              if (scope.mancount === 1) {
                $('#imgman').attr("src", scope.leftblack1);
              }
              if (scope.mancount === 2) {
                $('#imgman').attr("src", scope.leftblack2);
              }
            }
            if (scope.mancount === 0) {
              if (scope.kuaicount === 0) {
                $('#imgkuai').attr("src", scope.rightblack0);
              }
              if (scope.kuaicount === 1) {
                $('#imgkuai').attr("src", scope.rightblack1);
              }
              if (scope.kuaicount === 2) {
                return $('#imgkuai').attr("src", scope.rightblack2);
              }
            }
          } else {
            return this.prompt('提示', '快放失败');
          }
        } else {
          return this.prompt('提示', '请先选择摄像头');
        }
      };
      return scope.actionMessage = function(d) {
        scope.nvrLogin(d.options);
        switch (d.type) {
          case 'I_StartPlayback':
            iRet = WebVideoCtrl.I_Login(d.options.nvrip, '1', '80', d.options.nvruser, d.options.nvrpassword, {
              success: (function(_this) {
                return function(model) {
                  return setTimeout(function() {
                    getChannelInfo(d.options.nvrip);
                    return clickStartPlayback(d.options.nvrip, d.options.channel, moment(d.timeFrom).format("YYYY-MM-DD HH:mm:ss"), moment(d.timeTo).format("YYYY-MM-DD HH:mm:ss"));
                  }, 100);
                };
              })(this),
              error: (function(_this) {
                return function(err) {
                  return console.log(err);
                };
              })(this)
            });
            if (iRet === -1 || iRet === "-1") {
              return clickStartPlayback(d.options.nvrip, d.options.channel, moment(d.timeFrom).format("YYYY-MM-DD HH:mm:ss"), moment(d.timeTo).format("YYYY-MM-DD HH:mm:ss"));
            }
        }
      };
    };

    VideoHistoryDirective.prototype.resize = function(scope) {};

    VideoHistoryDirective.prototype.dispose = function(scope) {
      var _ref, _ref1;
      if ((_ref = scope.searchSubscription) != null) {
        _ref.dispose();
      }
      return (_ref1 = scope.somedayplaybackSubscription) != null ? _ref1.dispose() : void 0;
    };

    return VideoHistoryDirective;

  })(base.BaseDirective);
  return exports = {
    VideoHistoryDirective: VideoHistoryDirective
  };
});
