// Generated by IcedCoffeeScript 108.0.12

/*
* File: video-list-directive
* User: David
* Date: 2019/02/21
* Desc:
 */
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['jquery', '../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function($, base, css, view, _, moment) {
  var VideoListbetterDirective, exports;
  VideoListbetterDirective = (function(_super) {
    __extends(VideoListbetterDirective, _super);

    function VideoListbetterDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "video-listbetter";
      VideoListbetterDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    VideoListbetterDirective.prototype.setScope = function() {};

    VideoListbetterDirective.prototype.setCSS = function() {
      return css;
    };

    VideoListbetterDirective.prototype.setTemplate = function() {
      return view;
    };

    VideoListbetterDirective.prototype.show = function(scope, element, attrs) {
      var clearVideo, executeCommand, executeCommand2, loadStationVideos, station, videoTemplates, _i, _len, _ref;
      scope.vxgplayerpath = this.getComponentPath('res/vxgplayer.zip');
      scope.videospng = this.getComponentPath('image/video/videos.png');
      scope.videopng = this.getComponentPath('image/video/videos.png');
      scope.videopngselect = this.getComponentPath('image/video/select.png');
      scope.downgif = this.getComponentPath('image/down.gif');
      scope.flag = 0;
      scope.number = 2;
      scope.nums = [];
      scope.playing = false;
      scope.istextlistpage = true;
      scope.videocommands = [];
      scope.rtspprefix = 'rtsp://admin:admin123@';
      videoTemplates = null;
      scope.project.loadEquipmentTemplates({
        type: "video"
      }, 'user project type vendor template name base index image', (function(_this) {
        return function(err, templates) {
          if (err || templates.length < 0) {
            return;
          }
          return videoTemplates = templates;
        };
      })(this));
      scope.videotemplates = [
        {
          id: "video_template",
          name: "普通摄像头"
        }, {
          id: "ipvideo_template",
          name: "云摄像头"
        }, {
          id: "ckvideo_template",
          name: "萤石摄像头"
        }
      ];
      scope.datacenters = [];
      _ref = scope.project.stations.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        station = _ref[_i];
        if (station.model.station.charAt(0) !== "_" && _.isEmpty(station.model.parent)) {
          scope.datacenters.push(station);
        }
      }
      scope.datacenter = scope.datacenters[0];
      executeCommand = (function(_this) {
        return function(vedioObj) {
          var cmd, commnad, filter, _ref1;
          cmd = _.find(vedioObj.commands.items, function(ps) {
            var _ref1;
            return ((_ref1 = ps.model) != null ? _ref1.command : void 0) === "switch";
          });
          commnad = cmd;
          if (commnad !== void 0 && _this.commnad !== "") {
            cmd.model.parameters[0].value = 1;
            executeCommand2(cmd);
            filter = {
              user: scope.station.model.user,
              project: scope.station.model.project,
              station: scope.station.model.station,
              equipment: vedioObj.model.equipment,
              command: cmd.model.command
            };
            if ((_ref1 = scope.rtmpSubscription) != null) {
              _ref1.dispose();
            }
            return scope.rtmpSubscription = _this.commonService.commandLiveSession.subscribeValues(filter, function(err, d) {
              var title;
              title = "发送开启摄像头推流命令";
              if (d.message.phase === "complete") {
                return title = "操作成功";
              } else if (d.message.phase === "error") {
                return title = "操作失败";
              } else if (d.message.phase === 'timeout') {
                return title = "操作超时";
              }
            });
          } else {
            console.log("缺少 switch 控制命令");
          }
        };
      })(this);
      executeCommand2 = (function(_this) {
        return function(command, comment) {
          var data, model, parameters;
          model = command.model;
          parameters = command.getParameterValues();
          data = command.getIds();
          data.priority = model.priority;
          data.phase = 'executing';
          data.parameters = parameters;
          data.startTime = new Date;
          data.endTime = null;
          data.result = null;
          data.trigger = 'user';
          data.operator = scope.project.model.user;
          data.operatorName = scope.project.model.userName;
          data.comment = comment != null ? comment : model.comment;
          return _this.commonService.commandLiveSession.executeCommand(data);
        };
      })(this);
      scope.changeLayout = function(number, refresh) {
        var i, length, tolen, _j, _ref1;
        scope.number = number;
        length = scope.nums.length;
        if (refresh) {
          scope.nums = [];
          length = 0;
        }
        tolen = number * number;
        if (length < tolen) {
          for (i = _j = length, _ref1 = tolen - 1; length <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = length <= _ref1 ? ++_j : --_j) {
            scope.nums.push(i);
          }
        } else {
          scope.nums.splice(tolen, length - tolen);
        }
        return scope.controller.$rootScope.flag = !scope.controller.$rootScope.flag;
      };
      scope.selectDatacenter = function(datacenter) {
        if (scope.datacenter === datacenter) {
          return false;
        }
        scope.datacenter = datacenter;
        scope.selectStation(datacenter);
        return true;
      };
      scope.getvideostate = function(videopara) {
        return videopara != null ? videopara.loadProperties(null, (function(_this) {
          return function(err, properties) {
            var e, equipType, ippara, ping, rtspobj, url, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
            ippara = "192.168.1.1";
            equipType = videopara.model.vendor;
            rtspobj = _.find(properties, function(property) {
              return property.model.property === "rtsp";
            });
            if ((rtspobj != null) && (rtspobj !== "" && rtspobj.value !== null)) {
              if (equipType === "dahua" || equipType === "hikvision") {
                ippara = (_ref1 = rtspobj.value.split('rtsp://')) != null ? (_ref2 = _ref1[1].split(':')) != null ? (_ref3 = _ref2[1].split('@')) != null ? (_ref4 = _ref3[1].split('/')) != null ? _ref4[0] : void 0 : void 0 : void 0 : void 0;
              } else if (equipType === "huawei") {
                ippara = (_ref5 = rtspobj.value.split('rtsp://')) != null ? (_ref6 = _ref5[1].split(':')) != null ? _ref6[0] : void 0 : void 0;
              } else {
                console.log(videopara.model.name + "rtsp属性错误");
              }
              try {
                ping = new XMLHttpRequest();
                ping.seq = 6;
                ping.date1 = Date.now();
                ping.timeout = 4000;
                videopara.onlineflag = false;
                ping.onreadystatechange = function() {
                  if (ping.readyState === 4 && ping.status === 200) {
                    videopara.onlineflag = false;
                    return scope.$applyAsync();
                  }
                };
                url = 'http://' + ippara + '/favicon.ico' + Math.random().toString().substring(7);
                ping.open("GET", url, true);
                ping.setRequestHeader("Access-Control-Allow-Origin", "*");
                ping.ontimeout = function() {
                  videopara.onlineflag = true;
                  return scope.$applyAsync();
                };
                ping.send();
                return url;
              } catch (_error) {
                e = _error;
                return console.log(e);
              }
            }
          };
        })(this)) : void 0;
      };
      scope.selectStation = function(station, refresh) {
        scope.station = station;
        loadStationVideos(station, (function(_this) {
          return function() {
            return scope.changeLayout(scope.number, true);
          };
        })(this), refresh);
        return true;
      };
      loadStationVideos = function(station, callback, refresh) {
        var mds;
        if (station == null) {
          station = scope.station;
        }
        mds = [];
        return station.loadEquipments({
          project: station.model.project,
          type: 'video'
        }, null, (function(_this) {
          return function(err, models) {
            var i, md, sta, video, ___iced_passed_deferral, __iced_deferrals, __iced_k;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            (function(__iced_k) {
              var _j, _len1, _ref1, _results, _while;
              _ref1 = station.stations;
              _len1 = _ref1.length;
              i = 0;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    ++i;
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(i < _len1)) {
                  return _break();
                } else {
                  sta = _ref1[i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\ahuayuaniot\\codeET\\clc.datacenter\\app\\scripts\\datacenter\\src\\directives\\video-listbetter\\component.coffee"
                    });
                    sta.loadEquipments({
                      project: station.model.project,
                      type: 'video'
                    }, null, __iced_deferrals.defer({
                      assign_fn: (function(__slot_1, __slot_2) {
                        return function() {
                          err = arguments[0];
                          return __slot_1[__slot_2] = arguments[1];
                        };
                      })(mds, i),
                      lineno: 166
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(function() {
              var _j, _k, _len1, _len2, _ref1;
              if (!err) {
                for (_j = 0, _len1 = mds.length; _j < _len1; _j++) {
                  md = mds[_j];
                  models = models.concat(md);
                }
                scope.videos = models;
                _ref1 = scope.videos;
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  video = _ref1[_k];
                  scope.getvideostate(video);
                }
              }
              return typeof callback === "function" ? callback() : void 0;
            });
          };
        })(this), refresh);
      };
      scope.changeLayout(scope.number);
      scope.selectStation(scope.station);
      scope.playVideo = function(video) {
        var index;
        if (video !== void 0 && video !== "") {
          index = scope.nums.indexOf(video);
          scope.equipment = video;
          if (index >= 0 && index !== scope.flag) {
            scope.nums[index] = index;
            if (_.every(scope.nums, function(num) {
              return isNaN(num) === false;
            })) {
              return scope.playing = false;
            }
          } else {
            scope.playing = true;
            return scope.nums[scope.flag] = video;
          }
        }
      };
      scope.setWindow = function(index) {
        return scope.flag = index;
      };
      scope.playAll = function() {
        var index, num, _j, _len1, _ref1;
        if (scope.playing === true) {
          return;
        }
        scope.playing = true;
        _ref1 = scope.nums;
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          num = _ref1[index];
          if (scope.videos[index]) {
            scope.nums[index] = scope.videos[index];
          }
        }
        return scope.$applyAsync();
      };
      scope.stopAll = function() {
        if (scope.playing === false) {
          return;
        }
        scope.playing = false;
        scope.flag = 0;
        return scope.nums = [0, 1, 2, 3];
      };
      scope.operation = function(oid) {
        var video;
        video = scope.nums[scope.flag];
        if (isNaN(video)) {
          return video.loadCommands(null, (function(_this) {
            return function(err, cmds) {
              var cmd;
              cmd = _.find(cmds, function(cd) {
                return cd.model.command === oid;
              });
              if (cmd) {
                executeCommand2(cmd);
                return subscribeOperationResult(cmd);
              } else {
                return _this.display("摄像头不支持该操作");
              }
            };
          })(this));
        } else {
          return this.display("请选定摄像头");
        }
      };
      ({
        subscribeOperationResult: function(cmd) {
          var filter, _ref1;
          filter = {
            user: cmd.model.user,
            project: cmd.model.project,
            station: cmd.model.station,
            equipment: cmd.model.equipment
          };
          if ((_ref1 = scope.oneSubscription) != null) {
            _ref1.dispose();
          }
          return scope.oneSubscription = this.commandLiveSession.subscribeValues(filter, (function(_this) {
            return function(err, d) {
              if (!d) {
                return;
              }
              if (d.message.phase === "error") {
                _this.display("控制失败");
              }
              if (d.message.phase === "timeout") {
                return _this.display("控制超时");
              }
            };
          })(this));
        }
      });
      scope.filterVideo = (function(_this) {
        return function(video) {
          if (!scope.search || scope.search === "") {
            return true;
          }
          if (video.model.equipment.indexOf(scope.search) >= 0) {
            return true;
          }
          if (video.model.name.indexOf(scope.search) >= 0) {
            return true;
          }
          return false;
        };
      })(this);
      clearVideo = function() {
        return scope.video = null;
      };
      scope.selectTemplate = function() {
        var _ref1, _ref2, _ref3, _ref4, _ref5;
        scope.video.model.vendor = (_ref1 = _.find(videoTemplates, (function(_this) {
          return function(template) {
            return template.model.template === scope.video.model.template;
          };
        })(this))) != null ? _ref1.model.vendor : void 0;
        if (scope.operateFlag === 1) {
          switch (scope.video.model.template) {
            case 'video_template':
              return (_ref2 = scope.video.model) != null ? _ref2.address = scope.rtspprefix + scope.video.model.rtspip : void 0;
            case 'ipvideo_template':
              return (_ref3 = scope.video.model) != null ? _ref3.address = 'rtmp://lab.huayuan-iot.com:9641/live/9H200A1700017_camera1' : void 0;
            case 'ckvideo_template':
              return (_ref4 = scope.video.model) != null ? _ref4.address = 'http://vshare.ys7.com:80/hcnp/472637161_1_1_1_0_www.ys7.com_6500.m3u8' : void 0;
          }
        } else {
          if (scope.video.model.template === "video_template") {
            scope.video.model.address = scope.video.getPropertyValue("rtsp");
            scope.video.model.rtspip = (_ref5 = scope.video.model.address) != null ? _ref5.split('@')[1] : void 0;
          }
          if (scope.video.model.template === "ckvideo_template") {
            scope.video.model.address = scope.video.getPropertyValue("http");
          }
          if (scope.video.model.template === "ipvideo_template") {
            scope.video.model.address = scope.video.getPropertyValue("rtmp");
          }
          return 0;
        }
      };
      scope.createVideo = function() {
        var model, _ref1, _ref2;
        scope.operateFlag = 1;
        model = {
          type: "video",
          enable: true
        };
        clearVideo();
        scope.video = scope.station.createEquipment(model);
        if ((_ref1 = scope.video.model) != null) {
          _ref1.template = 'video_template';
        }
        scope.video.model.rtspip = '192.168.50.50';
        if ((_ref2 = scope.video.model) != null) {
          _ref2.address = scope.rtspprefix + scope.video.model.rtspip;
        }
        scope.equipment = scope.video;
        return scope.video;
      };
      scope.editVideo = function() {
        scope.operateFlag = 2;
        scope.video = scope.nums[scope.flag];
        return scope.video.loadProperties(null, (function(_this) {
          return function(err, properties) {
            var _ref1;
            if (scope.video.model.template === "video_template") {
              scope.video.model.address = scope.video.getPropertyValue("rtsp");
              scope.video.model.rtspip = (_ref1 = scope.video.model.address) != null ? _ref1.split('@')[1] : void 0;
            }
            if (scope.video.model.template === "ckvideo_template") {
              scope.video.model.address = scope.video.getPropertyValue("http");
            }
            if (scope.video.model.template === "ipvideo_template") {
              return scope.video.model.address = scope.video.getPropertyValue("rtmp");
            }
          };
        })(this));
      };
      scope.$watch('video.model.rtspip', function(data) {
        if (!data) {
          return;
        }
        return scope.video.model.address = scope.rtspprefix + data;
      });
      scope.openIE = (function(_this) {
        return function() {
          var urlstr, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
          urlstr = "http://" + ((_ref1 = scope.controller) != null ? (_ref2 = _ref1.$location) != null ? _ref2.$$host : void 0 : void 0) + ":" + ((_ref3 = scope.controller) != null ? (_ref4 = _ref3.$location) != null ? _ref4.$$port : void 0 : void 0) + '/' + ((_ref5 = scope.controller) != null ? _ref5.project.type : void 0) + "/#/video_histroy_list/" + ((_ref6 = scope.project) != null ? (_ref7 = _ref6.model) != null ? _ref7.user : void 0 : void 0) + "/" + ((_ref8 = scope.project) != null ? (_ref9 = _ref8.model) != null ? _ref9.project : void 0 : void 0) + "?token=" + ((_ref10 = scope.controller) != null ? (_ref11 = _ref10.$rootScope) != null ? (_ref12 = _ref11.user) != null ? _ref12.token : void 0 : void 0 : void 0);
          if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
            return window.location.href = "openIE:" + urlstr;
          } else {
            return window.location.href = urlstr;
          }
        };
      })(this);
      scope.openHighReliable = (function(_this) {
        return function() {
          var urlstr, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
          if (scope.videos.length === 0) {
            M.toast({
              html: "没有找到摄像头！",
              displayLength: 3500
            });
            return;
          }
          urlstr = "http://" + ((_ref1 = scope.controller) != null ? (_ref2 = _ref1.$location) != null ? _ref2.$$host : void 0 : void 0) + ":" + ((_ref3 = scope.controller) != null ? (_ref4 = _ref3.$location) != null ? _ref4.$$port : void 0 : void 0) + '/' + ((_ref5 = scope.controller) != null ? _ref5.project.type : void 0) + "/#/video_reliable_list/" + ((_ref6 = scope.project) != null ? (_ref7 = _ref6.model) != null ? _ref7.user : void 0 : void 0) + "/" + ((_ref8 = scope.project) != null ? (_ref9 = _ref8.model) != null ? _ref9.project : void 0 : void 0) + "?token=" + ((_ref10 = scope.controller) != null ? (_ref11 = _ref10.$rootScope) != null ? (_ref12 = _ref11.user) != null ? _ref12.token : void 0 : void 0 : void 0);
          if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) {
            return window.location.href = "openIE:" + urlstr;
          } else {
            return window.location.href = urlstr;
          }
        };
      })(this);
      scope.saveVideo = function() {
        if (!scope.video.model.equipment) {
          M.toast({
            html: "请输入设备ID！",
            displayLength: 1500
          });
          return;
        }
        if (!scope.video.model.name) {
          M.toast({
            html: "请输入设备名称！",
            displayLength: 1500
          });
          return;
        }
        if (!scope.video.model.rtspip) {
          M.toast({
            html: "请输入设备IP！",
            displayLength: 1500
          });
          return;
        }
        return scope.video.loadProperties(null, (function(_this) {
          return function(err, data) {
            if (err || data.length < 1) {
              return;
            }
            if (scope.video.model.template === "video_template") {
              scope.video.setPropertyValue('rtsp', scope.video.model.address);
            }
            if (scope.video.model.template === "ckvideo_template") {
              scope.video.setPropertyValue('http', scope.video.model.address);
            }
            if (scope.video.model.template === "ipvideo_template") {
              scope.video.setPropertyValue('rtmp', scope.video.model.address);
            }
            return scope.equipment.save(function(err, model) {
              var index;
              scope.operateFlag = 0;
              $("#video-modal").modal('close');
              index = _.find(scope.videos, function(vd) {
                return vd.key === scope.video.key;
              });
              if (index) {
                scope.videos.splice(index, 1);
              }
              return scope.videos.push(scope.video);
            }, scope.video);
          };
        })(this), true);
      };
      scope.removeVideo = function() {
        return this.prompt("确认删除", "是否确认删除该视频设备？", (function(_this) {
          return function(ok) {
            if (!ok) {
              return;
            }
            return scope.video.remove(function(err, model) {
              var vd;
              $("#video-modal").modal('close');
              vd = _.find(scope.videos, function(vd) {
                return vd.key === model[0].user + "_" + model[0].project + "_" + model[0].station + "_" + model[0].equipment;
              });
              if (vd) {
                scope.videos.splice(_.indexOf(scope.videos, vd), 1);
              }
              return scope.nums[scope.flag] = null;
            });
          };
        })(this));
      };
      scope.screenShot = (function(_this) {
        return function() {
          var currentVideo;
          currentVideo = scope.nums[scope.flag];
          if (_.isNumber(currentVideo)) {
            return;
          }
          currentVideo.loadSignals(null, function(err, signals) {
            var filter, imageScreenShot, model, _ref1;
            imageScreenShot = _.find(signals, function(signal) {
              return signal.model.signal === 'imageName';
            });
            model = currentVideo.model;
            filter = {
              user: model.user,
              project: model.project,
              station: model.station,
              equipment: model.equipment,
              signal: imageScreenShot.model.signal
            };
            if ((_ref1 = scope.signalSubscription) != null) {
              _ref1.dispose();
            }
            return scope.signalSubscription = _this.signalLiveSession.subscribeValues(filter, function(err, d) {
              var signal;
              if (!d) {
                return;
              }
              signal = scope.project.getSignalByTopic(d.topic);
              if (signal) {
                signal.setValue(d.message);
              }
              if (d.message.signal === 'imageName') {
                return scope.imagePath = d.message.value;
              }
            });
          });
          return currentVideo.loadCommands(null, function(err, commands) {
            var screenShot;
            screenShot = _.find(commands, function(command) {
              return command.model.command === 'screen-shot';
            });
            return executeCommand2(screenShot);
          });
        };
      })(this);
      return scope.searchSubscription = this.commonService.subscribeEventBus('search', (function(_this) {
        return function(msg) {
          scope.search = msg.message;
          return scope.$applyAsync();
        };
      })(this));
    };

    VideoListbetterDirective.prototype.resize = function(scope) {};

    VideoListbetterDirective.prototype.dispose = function(scope) {
      var _ref;
      return (_ref = scope.searchSubscription) != null ? _ref.dispose() : void 0;
    };

    return VideoListbetterDirective;

  })(base.BaseDirective);
  return exports = {
    VideoListbetterDirective: VideoListbetterDirective
  };
});
