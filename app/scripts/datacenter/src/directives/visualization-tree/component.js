// Generated by IcedCoffeeScript 108.0.13

/*
* File: visualization-tree-directive
* User: David
* Date: 2019/01/16
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var VisualizationTreeDirective, exports;
  VisualizationTreeDirective = (function(_super) {
    __extends(VisualizationTreeDirective, _super);

    function VisualizationTreeDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.show = __bind(this.show, this);
      this.id = "visualization-tree";
      VisualizationTreeDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    VisualizationTreeDirective.prototype.setScope = function() {};

    VisualizationTreeDirective.prototype.setCSS = function() {
      return css;
    };

    VisualizationTreeDirective.prototype.setTemplate = function() {
      return view;
    };

    VisualizationTreeDirective.prototype.show = function(scope, element, attrs) {
      var join, root, roots, sources, _i, _len, _ref, _ref1;
      scope.search = "";
      scope.filter = (_ref = scope.parameters.filter) != null ? _ref : true;
      sources = [];
      join = (function(_this) {
        return function(station) {
          var ret, sta, _i, _len, _ref1;
          ret = {
            id: station.model.station,
            title: station.model.name,
            folder: true,
            level: "station"
          };
          ret.icon = _this.getIcon(station.model.type);
          if (station.stations.length && station.model.type !== "station") {
            ret.children = [];
            _ref1 = station.stations;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sta = _ref1[_i];
              ret.children.push(join(sta));
            }
            ret.expanded = true;
            ret.lazy = true;
          } else {
            ret.expanded = false;
            ret.lazy = true;
          }
          return ret;
        };
      })(this);
      roots = _.filter(scope.project.stations.items, function(item) {
        if (item.model.station.charAt(0) !== "_") {
          return !item.model.parent;
        }
      });
      for (_i = 0, _len = roots.length; _i < _len; _i++) {
        root = roots[_i];
        sources.push(join(root));
      }
      element.find('.tree').fancytree({
        checkbox: (_ref1 = scope.parameters.checkbox) != null ? _ref1 : false,
        selectMode: 3,
        source: sources,
        extensions: ["filter"],
        filter: {
          autoApply: true,
          autoExpand: true,
          counter: true,
          fuzzy: false,
          hideExpandedCounter: true,
          hideExpanders: false,
          highlight: true,
          leavesOnly: false,
          nodata: true,
          mode: "hide"
        },
        lazyLoad: (function(_this) {
          return function(event, data) {
            var arr, station;
            arr = [];
            station = _.find(scope.project.stations.items, function(item) {
              return item.model.station === data.node.data.id && item.model.station.charAt(0) !== "_";
            });
            return data.result = $.Deferred(function(dtd) {
              arr = [];
              return station != null ? station.loadEquipment("_station_management", null, function(err, equipment) {
                return equipment != null ? equipment.loadProperties(null, function(err, properties) {
                  var configdiagram, error, visualization;
                  configdiagram = _.find(properties, function(property) {
                    return property.model.property === "configdiagram";
                  });
                  if (station.stations.length === 0) {
                    if (!configdiagram) {
                      arr.push({
                        id: "no-message",
                        title: "暂无信息",
                        icon: _this.getIcon("null"),
                        level: "station"
                      });
                      dtd.resolve(arr);
                      return;
                    } else if (configdiagram.value.length === 0) {
                      arr.push({
                        id: "no-message",
                        title: "暂无信息",
                        icon: _this.getIcon("null"),
                        level: "station"
                      });
                      dtd.resolve(arr);
                      return;
                    }
                  }
                  if (station.stations.length > 0) {
                    if (!configdiagram || configdiagram.value.length === 0) {
                      _.map(station.stations, function(child) {
                        arr.push({
                          id: child.model.station,
                          title: child.model.name,
                          icon: _this.getIcon(child.model.type),
                          station: child.model.station,
                          level: "station",
                          expanded: false,
                          lazy: true
                        });
                        return dtd.resolve(arr);
                      });
                      return;
                    }
                  }
                  if (station.stations.length > 0) {
                    _.map(station.stations, function(child) {
                      return arr.push({
                        id: child.model.station,
                        title: child.model.name,
                        icon: _this.getIcon(child.model.type),
                        station: child.model.station,
                        level: "station",
                        expanded: false,
                        lazy: true
                      });
                    });
                    if (configdiagram || configdiagram.value.length > 0) {
                      try {
                        visualization = JSON.parse(configdiagram.value);
                        _.map(visualization, function(vis) {
                          return arr.push({
                            id: vis.id,
                            title: vis.title,
                            icon: _this.getIcon("visualization"),
                            level: "visualization"
                          });
                        });
                        dtd.resolve(arr);
                      } catch (_error) {
                        error = _error;
                        console.log(error);
                      }
                      return;
                    }
                  }
                  if (station.stations.length === 0) {
                    if (configdiagram || configdiagram.value.length > 0) {
                      try {
                        visualization = JSON.parse(configdiagram.value);
                        _.map(visualization, function(vis) {
                          return arr.push({
                            id: vis.id,
                            title: vis.title,
                            icon: _this.getIcon("visualization"),
                            level: "visualization"
                          });
                        });
                        dtd.resolve(arr);
                      } catch (_error) {
                        error = _error;
                        console.log(error);
                      }
                    }
                  }
                }) : void 0;
              }) : void 0;
            });
          };
        })(this),
        activate: (function(_this) {
          return function(event, data) {
            var selectNode;
            selectNode = data.node;
            return _this.publishEventBus("selectStation", selectNode.data);
          };
        })(this),
        select: (function(_this) {
          return function(event, data) {
            var node, selectNodes, selects, _j, _len1;
            selects = [];
            selectNodes = data.tree.getSelectedNodes();
            for (_j = 0, _len1 = selectNodes.length; _j < _len1; _j++) {
              node = selectNodes[_j];
              selects.push(node.data);
            }
            return _this.publishEventBus("checkStations", selects);
          };
        })(this)
      });
      scope.filterTree = function() {
        var filterFunc, match, opts, tree;
        tree = $.ui.fancytree.getTree();
        opts = {
          "autoApply": true,
          "autoExpand": true,
          "fuzzy": false,
          "hideExpanders": false,
          "highlight": true,
          "leavesOnly": false,
          "nodata": false
        };
        filterFunc = tree.filterBranches;
        match = scope.search;
        return filterFunc.call(tree, match, opts);
      };
      return scope.clearSearch = function() {
        return scope.search = "";
      };
    };

    VisualizationTreeDirective.prototype.getIcon = function(type) {
      switch (type) {
        case "visualization":
          return {
            html: '<img src="' + this.getComponentPath("icons/visualization.svg") + '" class="icon"/>'
          };
        case "null":
          return {
            html: '<img src="' + this.getComponentPath("icons/null.svg") + '" class="icon"/>'
          };
        case "site":
          return {
            html: '<img src="' + this.getComponentPath("icons/site.svg") + '" class="icon"/>'
          };
        case "datacenter":
          return {
            html: '<img src="' + this.getComponentPath("icons/datacenter.svg") + '" class="icon"/>'
          };
        case "station":
          return {
            html: '<img src="' + this.getComponentPath("icons/station.svg") + '" class="icon"/>'
          };
        case "central-station":
          return {
            html: '<img src="' + this.getComponentPath("icons/station.svg") + '" class="icon"/>'
          };
      }
    };

    VisualizationTreeDirective.prototype.resize = function(scope) {};

    VisualizationTreeDirective.prototype.dispose = function(scope) {};

    return VisualizationTreeDirective;

  })(base.BaseDirective);
  return exports = {
    VisualizationTreeDirective: VisualizationTreeDirective
  };
});
