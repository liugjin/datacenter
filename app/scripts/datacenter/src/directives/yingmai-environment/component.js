// Generated by IcedCoffeeScript 108.0.13

/*
* File: yingmai-environment-directive
* User: David
* Date: 2019/02/15
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../base-directive', 'text!./style.css', 'text!./view.html', 'underscore', "moment"], function(base, css, view, _, moment) {
  var YingmaiEnvironmentDirective, exports;
  YingmaiEnvironmentDirective = (function(_super) {
    __extends(YingmaiEnvironmentDirective, _super);

    function YingmaiEnvironmentDirective($timeout, $window, $compile, $routeParams, commonService) {
      this.initData = __bind(this.initData, this);
      this.loadEquipmentSignalValues = __bind(this.loadEquipmentSignalValues, this);
      this.show = __bind(this.show, this);
      this.id = "yingmai-environment";
      YingmaiEnvironmentDirective.__super__.constructor.call(this, $timeout, $window, $compile, $routeParams, commonService);
    }

    YingmaiEnvironmentDirective.prototype.setScope = function() {};

    YingmaiEnvironmentDirective.prototype.setCSS = function() {
      return css;
    };

    YingmaiEnvironmentDirective.prototype.setTemplate = function() {
      return view;
    };

    YingmaiEnvironmentDirective.prototype.show = function(scope, element, attrs) {
      return scope.project.loadStations(null, (function(_this) {
        return function(err, stationObjs) {
          return scope.project.loadEquipmentTemplates(null, null, function(err, templates) {
            var selectTemplates, templateItem, _i, _len;
            selectTemplates = {};
            selectTemplates["intelli-tempera-humidity"] = [];
            selectTemplates["intelli-tempera-humidity"].push("intelli-tempera-humidity");
            selectTemplates["leak_sensor_template"] = [];
            selectTemplates["leak_sensor_template"].push("leak_sensor_template");
            selectTemplates["smoke_template"] = [];
            selectTemplates["smoke_template"].push("smoke_template");
            for (_i = 0, _len = templates.length; _i < _len; _i++) {
              templateItem = templates[_i];
              if (templateItem.model.base === "environmental.intelli-tempera-humidity") {
                selectTemplates["intelli-tempera-humidity"].push(templateItem.model.template);
              } else if (templateItem.model.base === "environmental.smoke_template") {
                selectTemplates["smoke_template"].push(templateItem.model.template);
              } else if (templateItem.model.base === "environmental.leak_sensor_template") {
                selectTemplates["leak_sensor_template"].push(templateItem.model.template);
              }
            }
            _this.selectStation = scope.station;
            scope.selectEquipment = function(equip) {
              var isFlag;
              isFlag = _.indexOf(selectTemplates["intelli-tempera-humidity"], equip.model.template);
              if (isFlag !== -1) {
                _this.loadEquipmentSignalValues(equip, _this.tempHumi, function(signal) {
                  return scope.tempHumi[signal.model.signal] = signal;
                });
              }
              isFlag = _.indexOf(selectTemplates["leak_sensor_template"], equip.model.template);
              if (isFlag !== -1) {
                _this.loadEquipmentSignalValues(equip, _this.waterAndSmoke, function(signal) {
                  return scope.water[signal.model.signal] = signal;
                });
              }
              isFlag = _.indexOf(selectTemplates["smoke_template"], equip.model.template);
              if (isFlag !== -1) {
                return _this.loadEquipmentSignalValues(equip, _this.waterAndSmoke, function(signal) {
                  return scope.smoke[signal.model.signal] = signal;
                });
              }
            };
            _this.initData(scope);
            return _this.commonService.loadEquipmentsByType(_this.selectStation, "environmental", function(err, equipments) {
              if (equipments.length === 0) {
                return;
              }
              _this.smokeEquip = [];
              _this.waterEquip = [];
              _this.tempHumiEquip = [];
              _.map(equipments, function(equip) {
                var isFlag;
                scope.selectEquip = equipments;
                isFlag = _.indexOf(selectTemplates["smoke_template"], equip.model.template);
                if (isFlag !== -1) {
                  _this.smokeEquip.push(equip);
                }
                isFlag = _.indexOf(selectTemplates["leak_sensor_template"], equip.model.template);
                if (isFlag !== -1) {
                  _this.waterEquip.push(equip);
                }
                isFlag = _.indexOf(selectTemplates["intelli-tempera-humidity"], equip.model.template);
                if (isFlag !== -1) {
                  return _this.tempHumiEquip.push(equip);
                }
              });
              _this.loadEquipmentSignalValues(_this.tempHumiEquip[0], _this.tempHumi, function(signal) {
                return scope.tempHumi[signal.model.signal] = signal;
              });
              _this.loadEquipmentSignalValues(_this.waterEquip[0], _this.waterAndSmoke, function(signal) {
                return scope.water = signal;
              });
              return _this.loadEquipmentSignalValues(_this.smokeEquip[0], _this.waterAndSmoke, function(signal) {
                return scope.smoke = signal;
              });
            });
          });
        };
      })(this));
    };

    YingmaiEnvironmentDirective.prototype.loadEquipmentSignalValues = function(equipment, callbackList, callback) {
      _.mapObject(this.subEquipment != null, (function(_this) {
        return function(val, key) {
          return val != null ? val.dispose() : void 0;
        };
      })(this));
      return this.subEquipment[equipment.key] = this.commonService.subscribeEquipmentSignalValues(equipment, (function(_this) {
        return function(signal) {
          return _.map(callbackList, function(item) {
            if (signal.model.signal === item) {
              return typeof callback === "function" ? callback(signal) : void 0;
            }
          });
        };
      })(this));
    };

    YingmaiEnvironmentDirective.prototype.initData = function(scope) {
      this.smokeEquip = [];
      this.waterEquip = [];
      this.tempHumiEquip = [];
      this.subEquipment = {};
      scope.tempHumi = {};
      this.tempHumi = ["humidity", "temperature"];
      this.waterAndSmoke = ["trigger-alarm-signal"];
      scope.water = {};
      return scope.smoke = {};
    };

    YingmaiEnvironmentDirective.prototype.resize = function(scope) {};

    YingmaiEnvironmentDirective.prototype.dispose = function(scope) {
      return _.mapObject(this.subEquipment, (function(_this) {
        return function(val, key) {
          return val != null ? val.dispose() : void 0;
        };
      })(this));
    };

    return YingmaiEnvironmentDirective;

  })(base.BaseDirective);
  return exports = {
    YingmaiEnvironmentDirective: YingmaiEnvironmentDirective
  };
});
