// Generated by IcedCoffeeScript 108.0.11

/*
* File: backupInfo-service
* User: foam
* Date: 2020/05/22
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation.web', 'clc.foundation.data/app/models/configuration/equipment-signals-model', 'clc.foundation.data/app/models/monitoring/event-values-model', 'clc.foundation.data/app/models/monitoring/signal-values-model', 'clc.foundation.data/app/models/monitoring/signal-statistics-model', 'moment', 'ftp', 'later', 'fs'], function(base, esm, eventService, signalService, statisticsService, moment, ftp, later, fs) {
  var BackupInfoService, exports;
  BackupInfoService = (function(_super) {
    __extends(BackupInfoService, _super);

    function BackupInfoService(options) {
      this.getStoreMode = __bind(this.getStoreMode, this);
      this.changeStoreMode = __bind(this.changeStoreMode, this);
      this.changeStoreInfo = __bind(this.changeStoreInfo, this);
      this.uploadFtp = __bind(this.uploadFtp, this);
      this.queryStoreSheet = __bind(this.queryStoreSheet, this);
      this.setUploadTime = __bind(this.setUploadTime, this);
      this.init = __bind(this.init, this);
      BackupInfoService.__super__.constructor.call(this, options);
      this.eventService = new eventService.EventValuesModel;
      this.signalService = new signalService.SignalValuesModel;
      this.statisticsService = new statisticsService.SignalStatisticsModel;
      this.equipmentSignalsService = new esm.EquipmentSignalsModel;
      this.init();
    }

    BackupInfoService.prototype.init = function() {
      this.settingPath = "./store-setting.json";
      if (fs.existsSync(this.settingPath)) {
        this.setting = JSON.parse(fs.readFileSync(this.settingPath));
        this.ftpHost = this.setting.ftpHost;
        this.ftpPort = Number(this.setting.ftpPort);
        this.ftpUser = this.setting.ftpUser;
        this.ftpPassword = this.setting.ftpPassword;
        this.user = this.setting.user;
        this.project = this.setting.project;
        return this.setUploadTime();
      } else {
        return console.log("无数据转储路径");
      }
    };

    BackupInfoService.prototype.setUploadTime = function() {
      var everydayExecute, timing;
      timing = {
        schedules: [{h:[00],m:[00]}]
      };
      later.date.localTime();
      return everydayExecute = later.setInterval((function(_this) {
        return function() {
          return _this.queryStoreSheet();
        };
      })(this), timing);
    };

    BackupInfoService.prototype.queryStoreSheet = function() {
      return this.signalService.find({
        user: this.user,
        project: this.project
      }, null, (function(_this) {
        return function(err1, signalValues) {
          _this.uploadFtp(signalValues, "signalValues");
          return _this.eventService.find({
            user: _this.user,
            project: _this.project
          }, null, function(err2, eventValues) {
            _this.uploadFtp(eventValues, "eventValues");
            return _this.statisticsService.find({
              user: _this.user,
              project: _this.project
            }, null, function(err3, statisticsValues) {
              return _this.uploadFtp(statisticsValues, "statisticsValues");
            });
          });
        };
      })(this));
    };

    BackupInfoService.prototype.uploadFtp = function(arrValues, fileName) {
      var FTP, buf, nowTime, str;
      nowTime = moment(new Date()).format("YYYYMMDD");
      FTP = new ftp();
      str = JSON.stringify(arrValues, fileName);
      buf = Buffer.from(str);
      FTP.on("error", (function(_this) {
        return function(err) {
          return console.log({
            status: false,
            msg: "数据备份时发生错误,备份失败"
          });
        };
      })(this));
      FTP.on("ready", function() {
        return FTP.put(buf, "" + nowTime + "-" + fileName + ".json", function(err) {
          if (err) {
            throw err;
          }
          return FTP.end();
        });
      });
      return FTP.connect({
        host: this.ftpHost,
        port: Number(this.ftpPort),
        user: this.ftpUser,
        password: this.ftpPassword
      });
    };

    BackupInfoService.prototype.changeStoreInfo = function(options, callback) {
      var FTP;
      FTP = new ftp();
      FTP.on("error", (function(_this) {
        return function(err) {
          return typeof callback === "function" ? callback(null, {
            status: false,
            msg: "连接失败"
          }) : void 0;
        };
      })(this));
      FTP.on("ready", (function(_this) {
        return function() {
          _this.setting.ftpHost = _this.ftpHost = options.parameters.address.host;
          _this.setting.ftpPort = _this.ftpPort = Number(options.parameters.address.port);
          _this.setting.ftpUser = _this.ftpUser = options.parameters.address.user;
          _this.setting.ftpPassword = _this.ftpPassword = options.parameters.address.password;
          _this.setting.project = _this.project = options.parameters.project;
          _this.setting.user = _this.user = options.parameters.user;
          fs.writeFileSync(_this.settingPath, JSON.stringify(_this.setting));
          _this.init();
          return typeof callback === "function" ? callback(null, {
            status: true,
            msg: "连接成功"
          }) : void 0;
        };
      })(this));
      return FTP.connect({
        host: options.parameters.address.host,
        port: Number(options.parameters.address.port),
        user: options.parameters.address.user,
        password: options.parameters.address.password
      });
    };

    BackupInfoService.prototype.changeStoreMode = function(options, callback) {
      return this.equipmentSignalsService.model.update({
        user: options.parameters.user,
        project: options.parameters.project,
        storage: {
          $ne: null
        }
      }, {
        $set: {
          storage: {
            period: parseInt(options.parameters.model)
          }
        }
      }, {
        multi: true
      }, (function(_this) {
        return function(err, data) {
          if (fs.existsSync("./store-setting.json")) {
            _this.setting = JSON.parse(fs.readFileSync("./store-setting.json"));
            _this.setting.storeMode = options.parameters.model;
            fs.writeFileSync("./store-setting.json", JSON.stringify(_this.setting));
            return typeof callback === "function" ? callback(null, data) : void 0;
          } else {
            console.log("无store-setting.json文件,修改储存模式失败");
            return typeof callback === "function" ? callback(null, {
              status: false,
              msg: "修改储存模式失败"
            }) : void 0;
          }
        };
      })(this));
    };

    BackupInfoService.prototype.getStoreMode = function(callback) {
      var obj, result;
      if (fs.existsSync("./store-setting.json")) {
        this.setting = JSON.parse(fs.readFileSync("./store-setting.json"));
        result = {
          host: this.setting.ftpHost,
          port: this.setting.ftpPort,
          user: this.setting.ftpUser,
          password: this.setting.ftpPassword,
          storeMode: this.setting.storeMode
        };
        return typeof callback === "function" ? callback(null, result) : void 0;
      } else {
        obj = {
          host: "",
          port: null,
          user: "",
          password: "",
          user: "",
          storeMode: ""
        };
        return typeof callback === "function" ? callback(null, obj) : void 0;
      }
    };

    return BackupInfoService;

  })(base.MqttService);
  return exports = {
    BackupInfoService: BackupInfoService
  };
});
