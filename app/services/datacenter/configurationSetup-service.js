// Generated by IcedCoffeeScript 108.0.13
var __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

__iced_k = __iced_k_noop = function() {};

if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['clc.foundation.web', 'iced-coffee-script', 'adm-zip', '../../../index-setting', 'path', 'fs', 'urllib', 'underscore', 'child_process'], function(base, iced, zip, setting, path, fs, urllib, _, process) {
  var ConfigurationSetuoService, exports;
  if (iced.iced) {
    iced = iced.iced;
  }
  ConfigurationSetuoService = (function(_super) {
    __extends(ConfigurationSetuoService, _super);

    function ConfigurationSetuoService(options) {
      this.uploadResource = __bind(this.uploadResource, this);
      this.graphicPostHttp = __bind(this.graphicPostHttp, this);
      this.graphicDeleteHttp = __bind(this.graphicDeleteHttp, this);
      this.recursionFiles = __bind(this.recursionFiles, this);
      this.uploadGraphicConfigure = __bind(this.uploadGraphicConfigure, this);
      this.httpData = __bind(this.httpData, this);
      this.backupsSiteEquipment = __bind(this.backupsSiteEquipment, this);
      this.backupsDeviceTemplate = __bind(this.backupsDeviceTemplate, this);
      this.backupsDataDictionary = __bind(this.backupsDataDictionary, this);
      this.backupsProject = __bind(this.backupsProject, this);
      this.handleConfigureData = __bind(this.handleConfigureData, this);
      this.setCollectionConfiguration = __bind(this.setCollectionConfiguration, this);
      this.handleGraphicsData = __bind(this.handleGraphicsData, this);
      this.handleElements = __bind(this.handleElements, this);
      this.handleConfigure = __bind(this.handleConfigure, this);
      ConfigurationSetuoService.__super__.constructor.call(this, options);
    }

    ConfigurationSetuoService.prototype.uploadElement = function(file, callback) {
      var options, zipEntries, zp;
      options = file.options;
      zp = new zip(file.path);
      zipEntries = zp.getEntries();
      _.each(zipEntries, (function(_this) {
        return function(zipEntry) {
          var ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          if (zipEntry.entryName === "project-admin.zip") {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
              });
              _this.handleConfigure(zipEntry, options, false, false, true, false, __iced_deferrals.defer({
                lineno: 15
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              if (zipEntry.entryName === "elements.zip") {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                  });
                  _this.handleElements(zipEntry, options, __iced_deferrals.defer({
                    lineno: 17
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  if (zipEntry.entryName === "graphic-templates-admin.zip") {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                      });
                      _this.handleGraphicsData(zipEntry, options, __iced_deferrals.defer({
                        lineno: 19
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        };
      })(this));
      return typeof callback === "function" ? callback(null, "ok") : void 0;
    };

    ConfigurationSetuoService.prototype.configurationRecovery = function(file, callback) {
      var options, zipEntries, zp;
      options = file.options;
      zp = new zip(file.path);
      zipEntries = zp.getEntries();
      _.each(zipEntries, (function(_this) {
        return function(zipEntry) {
          var ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          if (zipEntry.entryName === "project-admin.zip") {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
              });
              _this.handleConfigure(zipEntry, options, true, true, true, __iced_deferrals.defer({
                lineno: 30
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              if (zipEntry.entryName === "elements.zip") {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                  });
                  _this.handleElements(zipEntry, options, __iced_deferrals.defer({
                    lineno: 32
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  if (zipEntry.entryName === "graphic-templates-admin.zip") {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                      });
                      _this.handleGraphicsData(zipEntry, options, __iced_deferrals.defer({
                        lineno: 34
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    (function(__iced_k) {
                      if (zipEntry.entryName === "monitoring-units.zip") {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                          });
                          _this.setCollectionConfiguration(zipEntry, options, __iced_deferrals.defer({
                            lineno: 36
                          }));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(__iced_k);
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        };
      })(this));
      return typeof callback === "function" ? callback(null, "ok") : void 0;
    };

    ConfigurationSetuoService.prototype.handleConfigure = function(zipEntry, options, ifProject, ifDataDictionary, ifDeviceTemplate, ifSiteEquipment, callback) {
      var zipEntries, zp;
      zp = new zip(zipEntry.getData());
      zipEntries = zp.getEntries();
      _.each(zipEntries, (function(_this) {
        return function(zipEntry) {
          var plugins, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            if (zipEntry.name.indexOf(".json") !== -1 && zipEntry.name) {
              plugins = JSON.parse(zipEntry.getData().toString('utf8'));
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                });
                _this.handleConfigureData(plugins.data, options, ifProject, ifDataDictionary, ifDeviceTemplate, ifSiteEquipment, __iced_deferrals.defer({
                  lineno: 53
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            if (zipEntry.name.indexOf(".json") === -1 && zipEntry.name) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                });
                _this.uploadResource(options, zipEntry, __iced_deferrals.defer({
                  lineno: 55
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          });
        };
      })(this));
      return typeof callback === "function" ? callback() : void 0;
    };

    ConfigurationSetuoService.prototype.handleElements = function(zipEntry, options, callback) {
      var zp;
      zp = new zip(zipEntry.getData());
      this.elementPath = "/root/apps/app/aggregation/element-lib/";
      zp.extractEntryTo("elements/", this.elementPath, false, true);
      return typeof callback === "function" ? callback() : void 0;
    };

    ConfigurationSetuoService.prototype.handleGraphicsData = function(zipEntry, options, callback) {
      var zipEntries, zp;
      zp = new zip(zipEntry.getData());
      zipEntries = zp.getEntries();
      _.each(zipEntries, (function(_this) {
        return function(zipEntry) {
          var ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            if (zipEntry.name.indexOf(".json") === -1 && zipEntry.name) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                });
                _this.uploadResource(options, zipEntry, __iced_deferrals.defer({
                  lineno: 72
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            if (zipEntry.name.indexOf(".json") !== -1 && zipEntry.name) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee"
                });
                _this.uploadGraphicConfigure(options, zipEntry, __iced_deferrals.defer({
                  lineno: 74
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          });
        };
      })(this));
      return typeof callback === "function" ? callback() : void 0;
    };

    ConfigurationSetuoService.prototype.setCollectionConfiguration = function(zipEntry, options, callback) {
      var zp;
      zp = new zip(zipEntry.getData());
      this.muPath = "/root/apps/app/aggregation/";
      zp.extractEntryTo("monitoring-units/", this.muPath, false, true);
      return typeof callback === "function" ? callback() : void 0;
    };

    ConfigurationSetuoService.prototype.handleConfigureData = function(datas, options, ifProject, ifDataDictionary, ifDeviceTemplate, ifSiteEquipment, callback) {
      var callbackData, dataDictionary, deviceTemplate, siteEquipment, typeKey, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      dataDictionary = ["datatypes", "signaltypes", "eventtypes", "porttypes", "stationtypes", "connectiontypes", "units", "eventseverities", "eventphases", "vendors", "roles", "capacities"];
      deviceTemplate = ["equipmenttypes", "equipmenttemplates", "equipmentproperties", "equipmentevents", "equipmentcommands", "equipmentports", "equipmentsignals"];
      siteEquipment = ["stations", "equipments"];
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref, _results, _while;
          _ref = datas;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              typeKey = _keys[_i];
              (function(__iced_k) {
                if (typeKey === "project" && ifProject) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                      funcname: "ConfigurationSetuoService.handleConfigureData"
                    });
                    _this.backupsProject(options, datas, typeKey, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return callbackData = arguments[0];
                        };
                      })(),
                      lineno: 90
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  if (__indexOf.call(dataDictionary, typeKey) >= 0 && ifDataDictionary) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                        funcname: "ConfigurationSetuoService.handleConfigureData"
                      });
                      _this.backupsDataDictionary(options, datas, typeKey, __iced_deferrals.defer({
                        lineno: 91
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  (function(__iced_k) {
                    if (__indexOf.call(deviceTemplate, typeKey) >= 0 && ifDeviceTemplate) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                          funcname: "ConfigurationSetuoService.handleConfigureData"
                        });
                        _this.backupsDeviceTemplate(options, datas, typeKey, __iced_deferrals.defer({
                          lineno: 92
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    (function(__iced_k) {
                      if (__indexOf.call(siteEquipment, typeKey) >= 0 && ifSiteEquipment) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                            funcname: "ConfigurationSetuoService.handleConfigureData"
                          });
                          _this.backupsSiteEquipment(options, datas, typeKey, __iced_deferrals.defer({
                            lineno: 93
                          }));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(_next);
                  });
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.backupsProject = function(options, datas, typeKey, callback) {
      var option, url;
      if (typeKey === "project") {
        url = options.ip + "/model/clc/api/v1/projects/" + options.user + "/" + datas[typeKey].project;
        datas[typeKey].token = options.token;
        option = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: datas[typeKey]
        };
        return urllib.request(url, option, (function(_this) {
          return function(err, data, res) {
            return typeof callback === "function" ? callback(data) : void 0;
          };
        })(this));
      }
    };

    ConfigurationSetuoService.prototype.backupsDataDictionary = function(options, datas, typeKey, callback) {
      var callbackData, typeDataArr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      typeDataArr = ["datatypes", "signaltypes", "eventtypes", "porttypes", "stationtypes", "connectiontypes"];
      (function(_this) {
        return (function(__iced_k) {
          if ((__indexOf.call(typeDataArr, typeKey) >= 0)) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                funcname: "ConfigurationSetuoService.backupsDataDictionary"
              });
              _this.httpData(options, datas[typeKey], typeKey, "type", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return callbackData = arguments[0];
                  };
                })(),
                lineno: 116
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeKey === "units") {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                  funcname: "ConfigurationSetuoService.backupsDataDictionary"
                });
                _this.httpData(options, datas[typeKey], typeKey, "unit", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return callbackData = arguments[0];
                    };
                  })(),
                  lineno: 118
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              if (typeKey === "eventseverities") {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                    funcname: "ConfigurationSetuoService.backupsDataDictionary"
                  });
                  _this.httpData(options, datas[typeKey], typeKey, "severity", __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return callbackData = arguments[0];
                      };
                    })(),
                    lineno: 120
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              (function(__iced_k) {
                if (typeKey === "eventphases") {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                      funcname: "ConfigurationSetuoService.backupsDataDictionary"
                    });
                    _this.httpData(options, datas[typeKey], typeKey, "phase", __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return callbackData = arguments[0];
                        };
                      })(),
                      lineno: 122
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  if (typeKey === "vendors") {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                        funcname: "ConfigurationSetuoService.backupsDataDictionary"
                      });
                      _this.httpData(options, datas[typeKey], typeKey, "vendor", __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return callbackData = arguments[0];
                          };
                        })(),
                        lineno: 124
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  (function(__iced_k) {
                    if (typeKey === "roles") {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                          funcname: "ConfigurationSetuoService.backupsDataDictionary"
                        });
                        _this.httpData(options, datas[typeKey], typeKey, "role", __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return callbackData = arguments[0];
                            };
                          })(),
                          lineno: 126
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    (function(__iced_k) {
                      if (typeKey === "capacities") {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                            funcname: "ConfigurationSetuoService.backupsDataDictionary"
                          });
                          _this.httpData(options, datas[typeKey], typeKey, "capacity", __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return callbackData = arguments[0];
                              };
                            })(),
                            lineno: 128
                          }));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      return typeof callback === "function" ? callback() : void 0;
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.backupsDeviceTemplate = function(options, datas, typeKey, callback) {
      var callbackData, typeDataArr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      typeDataArr = ["equipmenttypes", "equipmenttemplates", "equipmentproperties", "equipmentsignals", "equipmentevents", "equipmentcommands", "equipmentports", "equipmentpoints", "equipmentlogics"];
      (function(_this) {
        return (function(__iced_k) {
          if (__indexOf.call(typeDataArr, typeKey) >= 0 && datas[typeKey].length > 0) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                funcname: "ConfigurationSetuoService.backupsDeviceTemplate"
              });
              _this.httpData(options, datas[typeKey], typeKey, "type", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return callbackData = arguments[0];
                  };
                })(),
                lineno: 135
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.backupsSiteEquipment = function(options, datas, typeKey, callback) {
      var callbackData, typeDataArr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      typeDataArr = ["stations", "equipments"];
      (function(_this) {
        return (function(__iced_k) {
          if ((__indexOf.call(typeDataArr, typeKey) >= 0)) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                funcname: "ConfigurationSetuoService.backupsSiteEquipment"
              });
              _this.httpData(options, datas[typeKey], typeKey, "station", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return callbackData = arguments[0];
                  };
                })(),
                lineno: 142
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.httpData = function(options, datasArr, typeKey, typeID, callback) {
      return _.each(datasArr, (function(_this) {
        return function(dataObj) {
          var option, url;
          delete dataObj.user;
          delete dataObj.project;
          delete dataObj._index;
          delete dataObj.createtime;
          delete dataObj.updatetime;
          delete dataObj._id;
          dataObj.token = options.token;
          url = "" + options.ip + "/model/clc/api/v1/" + typeKey + "/" + options.user + "/" + options.project + "/" + dataObj[typeID];
          if (typeKey === "equipmenttemplates" && dataObj.template) {
            url += "/" + dataObj.template;
          }
          if (typeKey === "equipmentproperties" && dataObj.property) {
            url += "/" + dataObj.template + "/" + dataObj.property;
          }
          if (typeKey === "equipmentsignals" && dataObj.signal) {
            url += "/" + dataObj.template + "/" + dataObj.signal;
          }
          if (typeKey === "equipmentevents" && dataObj.event) {
            url += "/" + dataObj.template + "/" + dataObj.event;
          }
          if (typeKey === "equipmentcommands" && dataObj.command) {
            url += "/" + dataObj.template + "/" + dataObj.command;
          }
          if (typeKey === "equipmentports" && dataObj.port) {
            url += "/" + dataObj.template + "/" + dataObj.port;
          }
          if (typeKey === "equipmentpoints" && dataObj.point) {
            url += "/" + dataObj.template + "/" + dataObj.point;
          }
          if (typeKey === "equipmentlogics" && dataObj.logic) {
            url += "/" + dataObj.template + "/" + dataObj.logic;
          }
          if (typeKey === "equipments" && dataObj.equipment) {
            url += "/" + dataObj.equipment;
          }
          option = {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            data: dataObj
          };
          return urllib.request(url, option, function(err, data, res) {
            return typeof callback === "function" ? callback(data) : void 0;
          });
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.uploadGraphicConfigure = function(options, zipEntry, callback) {
      var callbackData, plugins, references, svgType, th, typeData, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      plugins = JSON.parse(zipEntry.getData().toString('utf8'));
      svgType = ["svg-template", "svg-frame", "svg-rect", "snapsvg", "base", "svg-text", "svg-image", "svg-group", "text-box-graphic"];
      references = plugins._references;
      th = plugins;
      th.files = [];
      this.recursionFiles(th.elements, th.files);
      delete th._references;
      delete th.project;
      delete th._selected;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref, _results, _while;
          _ref = references;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              typeData = _keys[_i];
              (function(__iced_k) {
                if ((__indexOf.call(svgType, typeData) >= 0)) {
                  th.files.push(references[typeData].image);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                      funcname: "ConfigurationSetuoService.uploadGraphicConfigure"
                    });
                    _this.graphicDeleteHttp(options, typeData, "graphictypes", __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          typeData = arguments[0];
                          return callbackData = arguments[1];
                        };
                      })(),
                      lineno: 201
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                        funcname: "ConfigurationSetuoService.uploadGraphicConfigure"
                      });
                      _this.graphicPostHttp(options, references, typeData, "graphictypes", true, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return callbackData = arguments[0];
                          };
                        })(),
                        lineno: 202
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  });
                } else {
                  return __iced_k();
                }
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (th) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                  funcname: "ConfigurationSetuoService.uploadGraphicConfigure"
                });
                _this.graphicDeleteHttp(options, th.template, "graphictemplates", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      typeData = arguments[0];
                      return callbackData = arguments[1];
                    };
                  })(),
                  lineno: 204
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\sheen\\myPro\\clc.datacenter\\app\\services\\datacenter\\configurationSetup-service.coffee",
                    funcname: "ConfigurationSetuoService.uploadGraphicConfigure"
                  });
                  _this.graphicPostHttp(options, th, th.template, "graphictemplates", false, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return callbackData = arguments[0];
                      };
                    })(),
                    lineno: 205
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.recursionFiles = function(elements, files) {
      if (elements && elements.length > 0) {
        return _.each(elements, (function(_this) {
          return function(element) {
            _this.recursionFiles(element.elements, files);
            if (element.propertyValues.src) {
              return files.push(element.propertyValues.src.split("?")[0]);
            }
          };
        })(this));
      }
    };

    ConfigurationSetuoService.prototype.graphicDeleteHttp = function(options, typeData, graphicType, callback) {
      var option, url;
      url = "" + options.ip + "/model/clc/api/v1/" + graphicType + "/" + options.user + "/" + options.project + "/" + typeData + "?token=" + options.token;
      option = {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          token: options.token
        }
      };
      return urllib.request(url, option, (function(_this) {
        return function(err, data, res) {
          return typeof callback === "function" ? callback(typeData, data) : void 0;
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.graphicPostHttp = function(options, fieldData, typeData, graphicType, isfor, callback) {
      var modata, option, url;
      if (isfor) {
        fieldData[typeData].token = options.token;
        modata = fieldData[typeData];
      } else {
        fieldData.token = options.token;
        modata = fieldData;
      }
      delete modata._id;
      delete modata._index;
      delete modata.user;
      url = "" + options.ip + "/model/clc/api/v1/" + graphicType + "/" + options.user + "/" + options.project + "/" + typeData;
      option = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        data: modata
      };
      return urllib.request(url, option, (function(_this) {
        return function(err, data, res) {
          return typeof callback === "function" ? callback(data) : void 0;
        };
      })(this));
    };

    ConfigurationSetuoService.prototype.uploadResource = function(options, zipEntry, callback) {
      var option, url;
      if (zipEntry.name) {
        url = "" + options.ip + "/resource/upload/img/public/" + zipEntry.name + "?author=" + options.user + "&filename=" + zipEntry.name + "&project=" + options.project + "&token=" + options.token + "&user=" + options.user;
        option = {
          method: 'POST',
          files: zipEntry.getData(),
          data: {
            author: options.user,
            filename: zipEntry.name,
            project: options.project,
            token: options.token,
            user: options.user
          }
        };
        return urllib.request(url, option, (function(_this) {
          return function(err, data, res) {
            return typeof callback === "function" ? callback(data) : void 0;
          };
        })(this));
      }
    };

    return ConfigurationSetuoService;

  })(base.MqttService);
  return exports = {
    ConfigurationSetuoService: ConfigurationSetuoService
  };
});
