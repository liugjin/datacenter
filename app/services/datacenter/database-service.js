// Generated by IcedCoffeeScript 108.0.13
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation', 'underscore', 'mongodb', '../../../index-setting.json', 'clc.foundation.data/app/models/monitoring/signal-values-model', 'clc.foundation.data/app/models/monitoring/event-values-model', 'clc.foundation.data/app/models/monitoring/command-values-model', 'clc.foundation.data/app/models/monitoring/signal-statistics-model', 'fs', 'moment'], function(base, _, mongodb, settings, svm, evm, cvm, ssm, fs, moment) {
  var DatabaseService, exports;
  DatabaseService = (function(_super) {
    __extends(DatabaseService, _super);

    function DatabaseService(options) {
      this.options = options;
      DatabaseService.__super__.constructor.call(this, this.options);
      this.setting = {};
      this.signal = new svm.SignalValuesModel;
      this.event = new evm.EventValuesModel;
      this.command = new cvm.CommandValuesModel;
      this.statistic = new ssm.SignalStatisticsModel;
    }

    DatabaseService.prototype.initialize = function(callback) {
      var options, url;
      DatabaseService.__super__.initialize.call(this, callback);
      this.publishDatabaseSetting();
      this.subscribeDatabaseCmd();
      url = settings.mongodb.urls[settings.mongodb.env];
      options = {
        auth: {
          user: settings.mongodb.options.user,
          password: settings.mongodb.options.pass
        },
        authSource: 'admin',
        useUnifiedTopology: true
      };
      return mongodb.MongoClient.connect(url, options, (function(_this) {
        return function(err, client) {
          _this.db = client.db("clc-dev");
          return setInterval(function() {
            _this.diagnosticDatabase();
            return _this.clearData();
          }, 50000);
        };
      })(this));
    };

    DatabaseService.prototype.diagnosticDatabase = function() {
      return this.db.stats({}, (function(_this) {
        return function(err, status) {
          var value;
          if (err) {
            return;
          }
          value = {
            collections: status.collections,
            indexes: status.indexes,
            count: status.objects,
            size: parseFloat((status.storageSize / 1024 / 1024 / 1024).toFixed(2))
          };
          _this.publishMessage("diagnostic", "database", "db", value);
          _this.getCollectionInfo("signalvalues", function(err, count, size) {
            value = {
              count: count,
              size: size
            };
            _this.publishMessage("diagnostic", "database", "signals", value);
            return _this.signals = size;
          });
          _this.getCollectionInfo("eventvalues", function(err, count, size) {
            value = {
              count: count,
              size: size
            };
            _this.publishMessage("diagnostic", "database", "events", value);
            return _this.events = size;
          });
          _this.getCollectionInfo("commandvalues", function(err, count, size) {
            value = {
              count: count,
              size: size
            };
            _this.publishMessage("diagnostic", "database", "commands", value);
            return _this.commands = size;
          });
          return _this.getCollectionInfo("signalstatistics", function(err, count, size) {
            value = {
              count: count,
              size: size
            };
            _this.publishMessage("diagnostic", "database", "statistics", value);
            return _this.statistics = size;
          });
        };
      })(this));
    };

    DatabaseService.prototype.getCollectionInfo = function(name, callback) {
      return this.db.collection(name).stats({}, function(err, data) {
        var count, size;
        if (err) {
          return;
        }
        count = data != null ? data.count : void 0;
        size = parseFloat(((data != null ? data.size : void 0) / 1024 / 1024).toFixed(2));
        return typeof callback === "function" ? callback(err, count, size) : void 0;
      });
    };

    DatabaseService.prototype.publishMessage = function(mu, su, ch, value) {
      var topic;
      topic = "sample-values/" + mu + "/" + su + "/" + ch;
      return this.publishToMqtt(topic, {
        monitoringUnitId: mu,
        sampleUnitId: su,
        channelId: ch,
        value: value,
        timestamp: new Date()
      });
    };

    DatabaseService.prototype.publishDatabaseSetting = function() {
      if (fs.existsSync("./db-setting.json")) {
        this.setting = JSON.parse(fs.readFileSync("./db-setting.json"));
        return this.publishToMqtt("cmd/diagnostic/database/setting", this.setting, {
          qos: 0,
          retain: false
        });
      }
    };

    DatabaseService.prototype.subscribeDatabaseCmd = function() {
      return this.subscribeToMqtt("cmd/diagnostic/database/setting", {
        qos: 0
      }, (function(_this) {
        return function(d) {
          return _this.saveSetting(d.message);
        };
      })(this));
    };

    DatabaseService.prototype.saveSetting = function(sting) {
      this.setting = sting;
      return fs.writeFileSync("./db-setting.json", JSON.stringify(this.setting));
    };

    DatabaseService.prototype.clearData = function() {
      var date, error, _ref;
      if (this.setting.months) {
        date = moment().subtract(this.setting.months, 'months');
        try {
          this.signal.remove({
            timestamp: {
              $lt: date
            }
          }, null, (function(_this) {
            return function(err, records) {
              if (err) {
                console.log(err);
              }
              if (_this.setting.path) {
                return _this.backupData(records, "signals");
              }
            };
          })(this));
          this.event.remove({
            startTime: {
              $lt: date
            }
          }, null, (function(_this) {
            return function(err, records) {
              if (err) {
                console.log(err);
              }
              if (_this.setting.path) {
                return _this.backupData(records, "events");
              }
            };
          })(this));
          this.command.remove({
            startTime: {
              $lt: date
            }
          }, null, (function(_this) {
            return function(err, records) {
              if (err) {
                console.log(err);
              }
              if (_this.setting.path) {
                return _this.backupData(records, "commands");
              }
            };
          })(this));
          this.statistic.remove({
            timestamp: {
              $lt: date
            }
          }, null, (function(_this) {
            return function(err, records) {
              if (err) {
                console.log(err);
              }
              if (_this.setting.path) {
                return _this.backupData(records, "statistics");
              }
            };
          })(this));
        } catch (_error) {
          error = _error;
          console.log("remove date error:", error);
        }
      }
      if (this.setting.signals && this.setting.signals <= this.signals) {
        this.signal.findLastOne({}, "_index", (function(_this) {
          return function(err, item) {
            var sindex, _ref;
            sindex = item._index + ((_ref = _this.setting.count) != null ? _ref : 100);
            console.log("signal index:", sindex);
            try {
              return _this.signal.remove({
                _index: {
                  $lt: sindex
                }
              }, null, function(err, records) {
                if (err) {
                  return console.log(err);
                }
                console.log("removed signals:", records.length);
                if (_this.setting.path) {
                  return _this.backupData(records, "signals");
                }
              });
            } catch (_error) {
              err = _error;
              return console.log("remove signals error:", err);
            }
          };
        })(this));
      }
      if (this.setting.events && this.setting.events <= this.events) {
        this.event.findLastOne({}, "_index", (function(_this) {
          return function(err, item) {
            var eindex, _ref;
            eindex = item._index + ((_ref = _this.setting.count) != null ? _ref : 100);
            console.log("event index:", eindex);
            try {
              return _this.event.remove({
                _index: {
                  $lt: eindex
                }
              }, null, function(err, records) {
                if (err) {
                  return console.log(err);
                }
                console.log("removed events:", records.length);
                if (_this.setting.path) {
                  return _this.backupData(records, "events");
                }
              });
            } catch (_error) {
              err = _error;
              return console.log("remove events error:", err);
            }
          };
        })(this));
      }
      if (this.setting.commands && this.setting.commands <= this.commands) {
        this.command.findLastOne({}, "_index", (function(_this) {
          return function(err, item) {
            var cindex, _ref;
            cindex = item._index + ((_ref = _this.setting.count) != null ? _ref : 100);
            console.log("command index:", cindex);
            try {
              return _this.command.remove({
                _index: {
                  $lt: cindex
                }
              }, null, function(err, records) {
                if (err) {
                  return console.log(err);
                }
                console.log("removed commands:", records.length);
                if (_this.setting.path) {
                  return _this.backupData(records, "commands");
                }
              });
            } catch (_error) {
              err = _error;
              return console.log("remove commands error:", err);
            }
          };
        })(this));
      }
      if (this.setting.statistics && this.setting.statistics <= this.statistics) {
        return this.statistic.model.find({}, "_id").sort("_id").limit((_ref = this.setting.count) != null ? _ref : 100).exec((function(_this) {
          return function(err, items) {
            var index, _ref;
            index = items[((_ref = _this.setting.count) != null ? _ref : 100) - 1]._id;
            console.log("statistic _id:", index);
            try {
              return _this.statistic.remove({
                _id: {
                  $lte: index
                }
              }, null, function(err, records) {
                if (err) {
                  return console.log(err);
                }
                console.log("removed statistics:", records.length);
                if (_this.setting.path) {
                  return _this.backupData(records, "statistics");
                }
              });
            } catch (_error) {
              err = _error;
              return console.log("remove statistics error:", err);
            }
          };
        })(this));
      }
    };

    DatabaseService.prototype.backupData = function(data, type) {
      var name;
      if (!this.setting.path || !fs.existsSync(this.setting.path)) {
        return;
      }
      if (!data || data.length === 0) {
        return;
      }
      name = type + moment().format("YYYYMMDDHHmmss") + ".json";
      return fs.writeFileSync(this.setting.path + "/" + name, JSON.stringify(data));
    };

    return DatabaseService;

  })(base.MqttService);
  return exports = {
    DatabaseService: DatabaseService
  };
});
