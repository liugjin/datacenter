// Generated by IcedCoffeeScript 108.0.12

/*
* File: service-register
* User: Pu
* Date: 2018/9/1
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation', 'clc.foundation.web', './datacenter-service', './systemInfo-service', './configurationSetup-service', './backupInfo-service', './getVersion-service', './timeManage-service'], function(base, web, cs, sis, css, bis, gvs, tms) {
  var ServiceRegister, exports;
  ServiceRegister = (function(_super) {
    __extends(ServiceRegister, _super);

    function ServiceRegister(options, namespace) {
      ServiceRegister.__super__.constructor.call(this, options, namespace);
    }

    ServiceRegister.prototype.createService = function(name) {
      var service;
      switch (name) {
        case 'register':
          service = new web.RegisterService(this.getOptions('register'));
          break;
        case 'configuration':
          service = new web.ConfigurationService(this.getOptions('configuration'));
          break;
        case 'home':
          service = new web.HomeService(this.options);
          break;
        case 'datacenter':
          service = new cs.DatacenterService(this.getOptions('services'));
          break;
        case 'SystemInfoService':
          service = new sis.SystemInfoService(this.getOptions('services'));
          break;
        case 'ConfigurationSetuoService':
          service = new css.ConfigurationSetuoService(this.getOptions('services'));
          break;
        case 'TimeManageService':
          service = new tms.TimeManageService(this.getOptions('services'));
          break;
        case 'BackupInfo':
          service = new bis.BackupInfoService(this.getOptions('services'));
          break;
        case 'GetVersionService':
          service = new gvs.GetVersionService(this.getOptions('services'));
          break;
        default:
          throw "unsupported service: " + name;
      }
      return service;
    };

    return ServiceRegister;

  })(base.ServiceRegisterBase);
  return exports = {
    ServiceRegister: ServiceRegister
  };
});
