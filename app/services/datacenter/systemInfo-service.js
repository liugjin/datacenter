// Generated by IcedCoffeeScript 108.0.12
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation.web', 'fs', "moment", 'path'], function(base, fs, moment, path) {
  var SystemInfoService, exports;
  SystemInfoService = (function(_super) {
    __extends(SystemInfoService, _super);

    function SystemInfoService(options) {
      this.publishDatabaseSetting = __bind(this.publishDatabaseSetting, this);
      SystemInfoService.__super__.constructor.call(this, options);
    }

    SystemInfoService.prototype.initialize = function(callback) {
      SystemInfoService.__super__.initialize.call(this, callback);
      return this.subscribeDatabaseCmd();
    };

    SystemInfoService.prototype.run = function(callback) {
      var pageFilelog, src;
      src = path.join(__dirname, "../../../../");
      if (fs.existsSync(src + "/version-info-log.json")) {
        pageFilelog = JSON.parse(fs.readFileSync(src + "/version-info-log.json"));
        return typeof callback === "function" ? callback(null, pageFilelog) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, "暂无升级记录") : void 0;
      }
    };

    SystemInfoService.prototype.publishDatabaseSetting = function(str) {
      var setting;
      setting = {
        str: str
      };
      return this.publishToMqtt("ping-callback", setting, {
        qos: 0,
        retain: false
      });
    };

    SystemInfoService.prototype.subscribeDatabaseCmd = function() {
      this.process  =  require('child_process');
      return this.subscribeToMqtt("ping-network", {
        qos: 0
      }, (function(_this) {
        return function(d) {
          var iconv ;
          console.log("d", d);
          if (d && d.message.state) {
            _this.ping = _this.process.spawn('ping', [d.message.ip]);
            iconv  =  require('iconv-lite');
            _this.ping.stdout.on('data', function(data) {
              var str ;
              str  =  iconv.decode(data, 'cp936');
              _this.publishDatabaseSetting(str);
              return console.log("str", str);
            });
            return _this.ping.stderr.on('data', function(data) {
              return console.log("ping stderr", data);
            });
          } else {
            _this.ping.kill();
            return _this.ping.on('close', function(code, signal) {
              return console.log("子进程因收到信号 " + signal + " 而终止");
            });
          }
        };
      })(this));
    };

    return SystemInfoService;

  })(base.MqttService);
  return exports = {
    SystemInfoService: SystemInfoService
  };
});
